/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.plsql.navigator;

import java.awt.Image;
import java.io.Serializable;
import org.openide.ErrorManager;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import javax.swing.text.Document;
import javax.swing.*;
import javax.swing.tree.*;

public class NavigatorTopComponent extends TopComponent {

   private static final long serialVersionUID = 1L;
   /** path to the icon used by the component and its open action */

   protected static final ImageIcon dbFileIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/db_file.png");
   protected static final ImageIcon luIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/lu.png");
   protected static final ImageIcon pkgIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/package.png");
   protected static final ImageIcon viewsIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/views.png");
   protected static final ImageIcon viewIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/view.png");
   protected static final ImageIcon tableIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/table.png");
   protected static final ImageIcon publicMethodIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/public_method.png");
   protected static final ImageIcon protectedMethodIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/protected_method.png");
   protected static final ImageIcon privateMethodIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/private_method.png");
   protected static final ImageIcon implementationMethodIcon = createImageIcon("org/netbeans/modules/plsql/navigator/resources/implementation_method.png");

   private static final String PREFERRED_ID = "NavigatorTopComponent";
   private static NavigatorTopComponent instance;
   protected DefaultMutableTreeNode root;
   protected DefaultTreeModel treeModel;
   protected int startOffset;
   private Document editorDocument = null;

   public boolean sortBySource = true;
  

   public NavigatorTopComponent() {
      initComponents();     
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        btnSortPosition = new javax.swing.JToggleButton();
        btnSortAlpha = new javax.swing.JToggleButton();

        jTree1.setToggleClickCount(Integer.MAX_VALUE);
        jScrollPane1.setViewportView(jTree1);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setFocusable(false);
        jToolBar1.setOpaque(false);

        btnSortPosition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/plsql/navigator/resources/sortPosition.png"))); // NOI18N
        btnSortPosition.setSelected(true);
        btnSortPosition.setToolTipText(org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "OpenIDE-toolTip-Sort-by-Source")); // NOI18N
        btnSortPosition.setActionCommand("SORT_SOURCE");
        btnSortPosition.setFocusable(false);
        btnSortPosition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSortPosition.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnSortPosition.setMaximumSize(new java.awt.Dimension(35, 21));
        btnSortPosition.setMinimumSize(new java.awt.Dimension(35, 21));
        btnSortPosition.setName(org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "OpenIDE-Sort-by-Source")); // NOI18N
        btnSortPosition.setPreferredSize(new java.awt.Dimension(35, 21));
        btnSortPosition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSortPosition);

        btnSortAlpha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/plsql/navigator/resources/sortAlpha.png"))); // NOI18N
        btnSortAlpha.setToolTipText(org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "OpenIDE-toolTip-sort-byAlpha")); // NOI18N
        btnSortAlpha.setFocusable(false);
        btnSortAlpha.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSortAlpha.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnSortAlpha.setMaximumSize(new java.awt.Dimension(35, 21));
        btnSortAlpha.setMinimumSize(new java.awt.Dimension(35, 21));
        btnSortAlpha.setName(org.openide.util.NbBundle.getMessage(NavigatorTopComponent.class, "OpenIDE-sort-byAlpha")); // NOI18N
        btnSortAlpha.setPreferredSize(new java.awt.Dimension(30, 21));
        btnSortAlpha.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSortAlpha);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToggleButton btnSortAlpha;
    public javax.swing.JToggleButton btnSortPosition;
    protected javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    protected javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

   /**
    * Creates ImageIcons for the navigator components.
    * @param path The location of the ImageIcon where it is stored.
    * @return An ImageIcon which the system found corresponds to that path.
    */
   protected static ImageIcon createImageIcon(String path) {
      try {
         Image img=org.openide.util.ImageUtilities.loadImage(path);
         if (img != null) {
            return new ImageIcon(img);
         } else {
            System.err.println("Couldn't find file: " + path);
            return null;
         }
      } catch (Exception e) {
         System.err.println("icon missing; using default.");
         return null;
      }
   }

   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized NavigatorTopComponent getDefault() {
      if (instance == null) {
         instance = new NavigatorTopComponent();
      }

      return instance;
   }

   /**
    * Obtain the NavigatorTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized NavigatorTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);

      if (win == null) {
         ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Navigator component. It will not be located properly in the window system.");
         return getDefault();
      }

      if (win instanceof NavigatorTopComponent) {
         return (NavigatorTopComponent) win;
      }
      
      ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }

   @Override
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }

   /** replaces this in object stream */
   @Override
   public Object writeReplace() {
      return new ResolvableHelper();
   }

   @Override
   protected String preferredID() {
      return PREFERRED_ID;
   }

   protected void setDocument(Document doc) {
       editorDocument = doc;
   }
   
   protected Document getDocument() {
       return editorDocument;
   }
     
   static final class ResolvableHelper implements Serializable {

      private static final long serialVersionUID = 1L;

      public Object readResolve() {
         return NavigatorTopComponent.getDefault();
      }
   }
}
