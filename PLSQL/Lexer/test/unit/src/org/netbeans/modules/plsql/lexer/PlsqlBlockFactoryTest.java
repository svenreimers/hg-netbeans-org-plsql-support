/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2011 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2011 Sun Microsystems, Inc.
 */
package org.netbeans.modules.plsql.lexer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.List;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.netbeans.api.lexer.Language;
import org.netbeans.api.lexer.TokenHierarchy;
import org.netbeans.api.lexer.TokenSequence;
import org.openide.cookies.EditorCookie;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileSystem;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataFolder;
import org.openide.loaders.DataObject;
import org.openide.util.Task;
import static org.junit.Assert.*;

/**
 *
 * @author YADHLK
 */
public class PlsqlBlockFactoryTest {

    private static FileSystem fs = null;

    public PlsqlBlockFactoryTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        fs = FileUtil.createMemoryFileSystem();
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
        assertNotNull(fs);
    }

    @After
    public void tearDown() {
    }

    @Test
    public void testBlocksApy() throws IOException, BadLocationException {
        System.out.println("Testing blocks of an APY file");
        FileObject fileObject = fs.getRoot().createData("test.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "test.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
            //printHierarchy(lstBlockFac, "");
            //generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 7);

            //Test 1st level blocks
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: Formula", false, 0, 348, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.VIEW, "FORMULA", false, 809, 1319, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.TABLE_COMMENT, "FORMULA", false, 1322, 1390, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.COLUMN_COMMENT, "FORMULA", false, 1393, 1821, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.PACKAGE_BODY, "FORMULA_API", false, 1861, 3550, 8);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 1976, 2209, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_DEF, "Check_Formula_State___", true, 2211, 2305, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_DEF, "Get_Db_Values___", true, 2307, 2363, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 3, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 2365, 2592, 1);
            assertBlock(lstBlockFac.get(4).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(formula_id_))", true, 2485, 2581, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 2594, 2643, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_IMPL, "Get", true, 2645, 2962, 1);
            assertBlock(lstBlockFac.get(4).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 2734, 2863, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 2964, 3428, 0);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 7, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 3430, 3539, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.BEGIN_END, "", false, 3566, 3611, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.COMMENT, "COMMENT...", false, 3772, 3849, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testBlocksApi() throws IOException, BadLocationException {
        System.out.println("Testing blocks of an API file");
        FileObject fileObject = fs.getRoot().createData("test.api");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "test.api");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
            //printHierarchy(lstBlockFac, "");
            assertTrue(lstBlockFac.size() == 3);

            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: Formula", false, 0, 332, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.BEGIN_END, "", false, 461, 560, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.PACKAGE, "FORMULA_API", false, 600, 1494, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- PRIVATE FINITE STATE MACHINE ", true, 809, 1042, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_DEF, "Finite_State_Decode__", true, 1044, 1120, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 2, PlsqlBlockType.PROCEDURE_DEF, "Enumerate_States_Db__", true, 1186, 1248, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PUBLIC METHODS ", true, 1250, 1483, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testBlocksUpg() throws IOException, BadLocationException {
        System.out.println("Testing blocks of an UPG file");
        FileObject fileObject = fs.getRoot().createData("test.upg");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "test.upg");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
            //printHierarchy(lstBlockFac, "");
            assertTrue(lstBlockFac.size() == 4);

            assertBlock(lstBlockFac, 0, PlsqlBlockType.JAVA_SOURCE, "", false, 0, 5193, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.DECLARE_END, "", false, 5196, 5804, 2);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 5207, 5389, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "rec_ IN ( * FROM company_emp_tab)", true, 5416, 5799, 1);
            assertBlock(lstBlockFac.get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 5553, 5761, 1);
            assertBlock(lstBlockFac.get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO company_person_tab(company_id,emp_no,master_employment,operator,rowversion)", true, 5590, 5747, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.STATEMENT, "UPDATE search_domain_attribute_tab", false, 5808, 6299, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  datatype\n                           WHEN 'VARCHAR2'", true, 5867, 5935, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN 'CHAR'", true, 5963, 5986, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 2, PlsqlBlockType.CASE, "WHEN 'NUMBER'", true, 6014, 6041, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 3, PlsqlBlockType.CASE, "WHEN 'DATE'", true, 6069, 6092, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 4, PlsqlBlockType.CASE, "WHEN 'CLOB'", true, 6120, 6148, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 5, PlsqlBlockType.CASE, "WHEN 'BLOB'", true, 6176, 6201, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 6, PlsqlBlockType.CASE, "ELSE", true, 6229, 6268, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TRIGGER, "vmogss_base_tablerestrict_tr", false, 6303, 6704, 1);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "insert into vmo_base_gss_scope(gss_id, created, source_tbl, source_info) values('ALL_GSS_ID', sysdate,  'VMO_BASE_TABLERESTRICTION', :newrec.idrole)", true, 6511, 6659, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced1() throws IOException, BadLocationException {
        System.out.println("Advanced test case 1");
        FileObject fileObject = fs.getRoot().createData("test1.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "test1.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
            //printHierarchy(lstBlockFac, "");
            //generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 17);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.VIEW, "&VIEW", false, 27, 1231, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.DECLARE_END, "", false, 1234, 3604, 3);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Insert_Module_Data", true, 1245, 1305, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_IMPL, "Insert_data", true, 1307, 3286, 2);
            assertBlock(lstBlockFac.get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 1874, 2500, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "UPDATE language_sys_tab", true, 2566, 3207, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  NOT Installation_SYS.Is_Db_Patch_Registered('FNDBAS', '70745')", true, 3298, 3482, 1);
            assertBlock(lstBlockFac.get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN Insert_Module_Data", true, 3375, 3471, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.BEGIN_END, "", false, 3783, 5491, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Database_SYS.Is_Db_Patch_Registered('ORDER', 90590))", true, 3793, 5486, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.DECLARE_END, "", true, 3866, 5356, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE customer_order_delivery_tab cod", true, 4015, 5343, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  WHEN (cod.delnote_no IS NOT NULL)", true, 4091, 4381, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN (cod.delnote_no IS NULL AND cod.shipment_id IS NOT NULL)", true, 4424, 4721, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.CASE, "ELSE", true, 4764, 5298, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.STATEMENT, "UPDATE INVOICE_TAB", false, 5646, 6296, 4);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE \n                            WHEN CREATOR = 'CUSTOMER_ORDER_INV_HEAD_API'", true, 5690, 5817, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 1, PlsqlBlockType.CASE, "ELSE", true, 5846, 5913, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 2, PlsqlBlockType.CASE, "CASE \n                            WHEN CREATOR = 'CUSTOMER_ORDER_INV_HEAD_API' AND INVOICE_TYPE NOT IN('CUSTORDDEB','CUSTCOLDEB','SELFBILLDEB','SELFBILLCRE','CUSTORDCRE','CUSTCOLCRE','CUSTCOLCOR','CUSTORDCOR')", true, 5940, 6189, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 3, PlsqlBlockType.CASE, "ELSE", true, 6218, 6296, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.VIEW, "_DEF", false, 6342, 6687, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.TABLE_COMMENT, "_DEF", false, 6690, 6770, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.DECLARE_END, "", false, 6773, 6852, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.DECLARE_END, "", false, 6854, 7438, 2);
            assertBlock(lstBlockFac.get(7).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 6865, 7034, 0);
            assertBlock(lstBlockFac.get(7).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "rec_ IN ( * FROM company_emp_tab)", true, 7058, 7433, 1);
            assertBlock(lstBlockFac.get(7).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 7195, 7401, 1);
            assertBlock(lstBlockFac.get(7).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO company_person_tab(company_id,emp_no,master_employment,operator,rowversion)", true, 7232, 7389, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.STATEMENT, "DROP PROCEDURE Temp_Person_Document_Default", false, 7479, 7522, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.BEGIN_END, "", false, 7525, 7729, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.STATEMENT, "INDEX Report_Grouping_Detail_Ux ON Report_Grouping_Detail_Tab", false, 7733, 7917, 0);
            assertBlock(lstBlockFac, 11, PlsqlBlockType.VIEW, "&MODULE_VIEW1", false, 7920, 8259, 0);
            assertBlock(lstBlockFac, 12, PlsqlBlockType.VIEW, "&VIEW3", false, 8262, 9892, 0);
            assertBlock(lstBlockFac, 13, PlsqlBlockType.TRIGGER, "VMOL_BASE_FIELDDEPVALUES_TIB", false, 9895, 10114, 1);
            assertBlock(lstBlockFac.get(13).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT VMOL_ID_SEQ.NEXTVAL INTO :NEWREC.ID_ FROM DUAL", true, 10052, 10105, 0);
            assertBlock(lstBlockFac, 14, PlsqlBlockType.BEGIN_END, "", false, 10118, 10507, 3);
            assertBlock(lstBlockFac.get(14).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- OK if ORA ", true, 10315, 10377, 0);
            assertBlock(lstBlockFac.get(14).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  INSTR(SQLERRM,'-00955') != 0", true, 10386, 10428, 0);
            assertBlock(lstBlockFac.get(14).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 10437, 10502, 0);
            assertBlock(lstBlockFac, 15, PlsqlBlockType.TRIGGER, "VMO_BASE_GSS_SYNCED_RECORDS_TR", false, 10511, 11707, 2);
            assertBlock(lstBlockFac.get(15).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- This trigger is only used to make sure that an old version of GSS still can be tested", true, 10677, 10937, 0);
            assertBlock(lstBlockFac.get(15).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "GET_GSS_USER", true, 10950, 11540, 1);
            assertBlock(lstBlockFac.get(15).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT U.GSS_USER INTO GSS_USER_", true, 11150, 11392, 0);
            assertBlock(lstBlockFac, 16, PlsqlBlockType.STATEMENT, "UPDATE search_domain_attribute_tab", false, 11712, 12203, 7);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  datatype\n                           WHEN 'VARCHAR2'", true, 11771, 11839, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN 'CHAR'", true, 11867, 11890, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 2, PlsqlBlockType.CASE, "WHEN 'NUMBER'", true, 11918, 11945, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 3, PlsqlBlockType.CASE, "WHEN 'DATE'", true, 11973, 11996, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 4, PlsqlBlockType.CASE, "WHEN 'CLOB'", true, 12024, 12052, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 5, PlsqlBlockType.CASE, "WHEN 'BLOB'", true, 12080, 12105, 0);
            assertBlock(lstBlockFac.get(16).getChildBlocks(), 6, PlsqlBlockType.CASE, "ELSE", true, 12133, 12172, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced2() throws IOException, BadLocationException {
        System.out.println("Advanced test case 2");
        FileObject fileObject = fs.getRoot().createData("test2.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "test2.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
            //printHierarchy(lstBlockFac, "");
            //generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 1);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.PROCEDURE_IMPL, "Evaluate_Level___", false, 1, 59599, 6);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 783, 785, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_line_item_no", true, 2780, 3073, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_parent_supply", true, 3077, 3287, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- FOR", true, 3367, 3442, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "parent_supply_ IN get_parent_supply", true, 3446, 59496, 16);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Set parent_supply_rec_ as Parent_supply_", true, 3497, 3540, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "COMMENT...", true, 3591, 3593, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "COMMENT...", true, 3685, 3687, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "COMMENT...", true, 3861, 3863, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "COMMENT...", true, 4222, 4224, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (part_type_code_ IN ( '1','2'))", true, 4231, 4305, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (part_type_code_ IN ('3', '4'))", true, 4312, 4403, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- begin CTP", true, 4479, 4494, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "-- If ctp planned, check multi", true, 4610, 4681, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  evaluation_rec_.ctp_planned = 1 AND\n         \n         part_type_code_ IN ('3','4')", true, 4727, 7414, 4);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- parent_supply_.interim_structure_level > 0 AND", true, 4775, 4823, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- check for multi", true, 4875, 4910, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  Dictionary_SYS.Logical_Unit_Is_Installed('SupplySourcePartManager')", true, 5032, 5469, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(9).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20051221", true, 5252, 5286, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  check_source_ = 'TRUE'", true, 5552, 7376, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- No further evaluation if multisite part.", true, 7507, 7550, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  NOT multi_site_part_exist_", true, 7555, 58694, 10);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- IF", true, 7653, 7770, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ((configurable_ = 'CONFIGURED') AND (part_type_code_ = '1')) OR\n         ((dop_part_ = 'D') AND (part_type_code_ = '1'))", true, 7777, 15425, 10);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.alternate_status = 'Buildable')", true, 7915, 9530, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Manuf_Part_Attribute_API.Get_Structure_Effectivity(parent_supply_.contract, parent_supply_.part_no)\n               = Effectivity_Control_API.Decode('SERIAL')", true, 8075, 8764, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 8779, 9512, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Retrieve configured part routing if manufactured part.", true, 9692, 9749, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (comp_bom_type_db_ = 'M')", true, 9759, 13111, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NVL(operation_rec_.operation_row_count,0) > 0)", true, 10889, 12718, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (routing_alternative_no_ IS NOT NULL)", true, 10960, 12698, 5);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "ops IN 1..operation_rec_.operation_row_count", true, 11025, 11242, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Note; Set Routing_alternative on InterimOrder After DetermineRouting", true, 11261, 11332, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "COMMENT...", true, 11731, 11733, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (NOT Routing_Int_API.Is_Routing_Buildable(parent_supply_.contract,\n                                                               parent_supply_.part_no,\n                                                               parent_supply_.routing_revision,\n                                                               comp_bom_type_,\n                                                               routing_alternative_no_))", true, 11752, 12654, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "COMMENT...", true, 12673, 12675, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Note; Create Operations that is evaluated", true, 12731, 12775, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Correct the top order start date before determine the structure", true, 13163, 13229, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  parent_supply_.interim_order_no ='1'", true, 13239, 13689, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 13699, 13781, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- Retrieve the components for configured part.", true, 13783, 13830, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- Note; Set Structure_alternative on InterimOrder After DetermineStructure", true, 14914, 15001, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (structure_alternative_no_ IS NOT NULL)", true, 15011, 15346, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- IF", true, 15348, 15425, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (Part_Catalog_API.Get_Configurable_Db(evaluation_rec_.part_no) = 'NOT CONFIGURED')", true, 15432, 22718, 7);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Note; If interim demand head part is not configured then do normal explosion", true, 15535, 15694, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Get routing revision and alternate for non", true, 15829, 15904, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (comp_bom_type_db_ = 'M')", true, 15999, 19455, 4);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.alternate_status = 'Buildable')", true, 16045, 17127, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  comp_routing_revision_ IS NULL", true, 16785, 17127, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 17140, 18328, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  comp_routing_revision_ IS NULL", true, 17951, 18308, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  comp_struct_alternative_no_ IS NULL", true, 19040, 19373, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Get routing revision and alternate for non", true, 19383, 19455, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (comp_bom_type_db_ = 'P')", true, 19465, 19916, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- If manufactured, retrieve routing operations for non", true, 19960, 20032, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (comp_bom_type_db_ = 'M')", true, 20042, 21840, 3);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 20808, 20810, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NVL(operation_rec_.operation_row_count,0) > 0)", true, 20823, 21447, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (comp_rout_alternative_no_ IS NOT NULL)", true, 20894, 21427, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Note; Set Routing_alternative on InterimOrder After DetermineRouting", true, 20960, 21031, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Note; Create Operations that is evaluated", true, 21461, 21505, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(2).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- Retrieve components for non", true, 21842, 21889, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- End of IF", true, 22796, 22817, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- If top", true, 22900, 22981, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  parent_supply_.interim_order_no ='1'", true, 22988, 23330, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 23337, 24786, 3);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "component_line_item_rec_ IN get_line_item_no(evaluation_rec_.interim_header_id, parent_order_no_)", true, 23741, 24141, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF   (component_line_item_rec_.supply_interim_order_no = parent_supply_.interim_order_no)", true, 23860, 24122, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (leadtime_offset_ > 0)", true, 24151, 24456, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(6).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 24466, 24545, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- FOR", true, 24788, 24842, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "i IN 1..NVL(component_rec_.comp_row_count,0)", true, 24849, 58623, 6);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- If by", true, 25656, 25720, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (component_rec_.qty_per_assembly_tab(i) < 0)", true, 25730, 27866, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.WHILE_LOOP, "(parent_interim_order_no_ > 0) and (NOT phatom_part_exist_ )", true, 28048, 28595, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  parent_part_mrp_code_ = 'P'", true, 28332, 28430, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- If expense component line, then create warning and ignore.", true, 28597, 28658, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (part_type_code_ = '6')", true, 28668, 30817, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Else if not phantom parent part, process.", true, 30773, 30817, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (parent_interim_order_no_ = 0)", true, 30827, 58528, 6);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (part_type_code_ IN ( '1','2'))", true, 30881, 30961, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (part_type_code_ IN ('3', '4'))", true, 30974, 31077, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- IF", true, 31154, 31198, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (component_rec_.mrp_order_code_tab(i) IN ('P','K') AND\n             (part_type_code_ = '1'))", true, 31211, 37738, 6);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  component_rec_.mrp_order_code_tab(i) = 'P'", true, 31437, 32540, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (qty_avail_ >=  primary_comp_qty_ ) OR (component_rec_.consumption_item_db_tab(i) = 'Not Consumed')", true, 32266, 32420, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 32440, 32517, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  get_comp_flag_ = TRUE", true, 32557, 33569, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF  get_comp_flag_ = FALSE", true, 33585, 37396, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Create InterimOrderComponent", true, 35543, 35574, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (evaluation_rec_.single_level_explosion = 0)", true, 37450, 37570, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 37586, 37682, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(3).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- IF", true, 37684, 37738, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 37751, 58427, 13);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- If ctp planned record check for orders to evaluate.", true, 37771, 37825, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  evaluation_rec_.ctp_planned = 1", true, 37841, 39673, 3);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  configurable_ = 'CONFIGURED'", true, 37899, 39281, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  part_type_code_ IN ('3','4')", true, 37957, 38933, 3);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Dictionary_SYS.Logical_Unit_Is_Installed('SupplySourcePartManager')", true, 38018, 38660, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20051221", true, 38344, 38378, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  check_source_ = 'TRUE'", true, 38686, 38794, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 38819, 38933, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 38955, 39281, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.single_level_explosion = 0)", true, 38984, 39113, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 39138, 39252, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 39300, 39608, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.single_level_explosion = 0)", true, 39326, 39452, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 39474, 39582, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Not ctp planned, check for orders to evaluate.", true, 39624, 39673, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 39689, 40181, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ((configurable_ = 'CONFIGURED') AND (part_type_code_ = '1')) OR\n                     ((dop_part_ = 'D') AND (part_type_code_ = '1'))", true, 39712, 40158, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.single_level_explosion = 0)", true, 39875, 40001, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 40023, 40131, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Note; Create InterimOrder", true, 40579, 40689, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (comp_bom_type_db_ = 'M')", true, 40802, 47732, 3);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Note; For Component part even tentative alternative is allowed as a leaf.", true, 40854, 41004, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  Manuf_Part_Attribute_API.Get_Structure_Effectivity(component_rec_.contract_tab(i), component_rec_.component_part_tab(i))\n                     = Effectivity_Control_API.Decode('SERIAL')", true, 41024, 44290, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 44311, 47681, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (evaluation_rec_.alternate_status = 'Buildable')", true, 45217, 46374, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  comp_routing_revision_ IS NULL", true, 45993, 46374, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 46397, 47655, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  comp_routing_revision_ IS NULL", true, 47228, 47625, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (comp_bom_type_db_ = 'P')", true, 47749, 48734, 2);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 77319, start", true, 48143, 48162, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 77319, end", true, 48694, 48711, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (comp_eng_chg_level_ IS NULL)", true, 48787, 51225, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Note; Set a error message for part revision being null for component", true, 48843, 48914, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "COMMENT...", true, 51286, 51306, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "j IN 1..NVL(operation_rec_.operation_row_count,0)", true, 51352, 51628, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (component_rec_.comp_operation_no_tab(i)=operation_rec_.operation_no_tab(j))", true, 51429, 51603, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (NOT found_)", true, 51644, 51752, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (component_rec_.comp_operation_no_tab(i) IS NOT NULL)", true, 51769, 52797, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "COMMENT...", true, 52813, 52815, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  ( ( (component_rec_.comp_operation_no_tab(i) IS NULL) OR\n                      ( (component_rec_.comp_operation_no_tab(i) IS NOT NULL) AND\n                        (oper_valid_) ) ) AND\n                    ( (component_rec_.qty_per_assembly_tab(i) > 0) OR\n                      (component_rec_.consumption_item_db_tab(i) = 'Not Consumed') ) )", true, 52831, 58340, 4);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  component_rec_.consumption_item_db_tab(i) = 'Not Consumed'", true, 53199, 53353, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Note; Create InterimOrderComponent", true, 54776, 54813, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Note; Create InterimCompWorkGuide", true, 56753, 56789, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "j IN 1..comp_work_guide_rec_.comp_work_guide_count", true, 56808, 58287, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (component_rec_.line_item_no_tab(i) = comp_work_guide_rec_.comp_line_item_no_tab(j))", true, 56889, 58259, 1);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks().get(12).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 57006, 57008, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks().get(8).getChildBlocks().get(5).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- End IF", true, 58493, 58510, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks().get(11).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- End FOR", true, 58624, 58682, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 12, PlsqlBlockType.COMMENT, "-- Note; Initialize all records for the next interim order", true, 58737, 58795, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "COMMENT...", true, 59312, 59314, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- Bug 74483, start", true, 59362, 59381, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks().get(4).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "-- Bug 74483, end", true, 59466, 59483, 0);
            assertBlock(lstBlockFac.get(0).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- End FOR", true, 59497, 59576, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced3() throws IOException, BadLocationException {
        System.out.println("Advanced test case 3");
        FileObject fileObject = fs.getRoot().createData("080617_75132_fndbas.cdb");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "080617_75132_fndbas.cdb");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 5);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- File    :  080617_75132_Fndbas.cdb", false, 0, 760, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.BEGIN_END, "", false, 795, 903, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.DECLARE_END, "", false, 965, 1601, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT &AO..Installation_SYS.Is_Db_Patch_Registered('FNDBAS', 75132)", true, 1130, 1596, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.DECLARE_END, "", false, 1666, 2310, 1);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT &AO..Installation_SYS.Is_Db_Patch_Registered('FNDBAS', 75132)", true, 1839, 2305, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.BEGIN_END, "", false, 2315, 2416, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced4() throws IOException, BadLocationException {
        System.out.println("Advanced test case 4");
        FileObject fileObject = fs.getRoot().createData("081114_78488_VMOSFA.cdb");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "081114_78488_VMOSFA.cdb");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 3);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Module  : VMOSFA", false, 0, 473, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "COMMENT...", false, 516, 634, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.TABLE_COMMENT, "VMO_BASE_SYNC_PACKAGE_VIEW", false, 636, 894, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced5() throws IOException, BadLocationException {
        System.out.println("Advanced test case 5");
        FileObject fileObject = fs.getRoot().createData("Dictionary.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "Dictionary.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 4);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Package: Dictionary_SYS", false, 0, 19335, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 19440, 19673, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.PACKAGE_BODY, "DICTIONARY_SYS", false, 19712, 130195, 68);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- SERVICE SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 20170, 20403, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_DEF, "Check_Method_From_View___", true, 20405, 20525, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- SERVICE SPECIFIC IMPLEMENTATION METHODS ", true, 20527, 20760, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_IMPL, "Check_Method_From_View___", true, 20762, 21616, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(index_ > 0)", true, 21227, 21568, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Method_Is_Installed(package_name_, method_name_))", true, 21376, 21499, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 4, PlsqlBlockType.FUNCTION_IMPL, "Rebuild_Dictionary_Storage___", true, 21618, 97424, 47);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_last_update", true, 23133, 23218, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- LAST_DDL_TIME:", true, 23223, 24026, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_pkgs_to_update", true, 24030, 24353, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Views to update (last_ddl_time has changed since last update)", true, 24398, 24462, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 4, PlsqlBlockType.CURSOR, "get_views_to_update", true, 24466, 24674, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- All packages (used when doing a full refresh for performance reasons)", true, 24679, 24751, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 6, PlsqlBlockType.CURSOR, "get_all_pkgs", true, 24755, 24964, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- All view (used when doing a full refresh for performance reasons)", true, 25009, 25077, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 8, PlsqlBlockType.CURSOR, "get_all_views", true, 25081, 25210, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- Package information", true, 25215, 25237, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 10, PlsqlBlockType.CURSOR, "get_package_info", true, 25241, 25892, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "-- View information", true, 25897, 25916, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 12, PlsqlBlockType.CURSOR, "get_view_comments", true, 25920, 26094, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Write_Error_Text___", true, 26099, 26631, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  write_clob_", true, 26281, 26443, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  new_line_", true, 26310, 26375, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 26385, 26443, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 26450, 26603, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  new_line_", true, 26464, 26522, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(13).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 26532, 26589, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Get_Next_Pkg_Index___", true, 26637, 27027, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "next_index", true, 26753, 26896, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Get_Next_View_Index___", true, 27032, 27421, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "next_index", true, 27151, 27288, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Handle_Possible_State_Pkg___", true, 27426, 27891, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  method_name_ = 'Finite_State_Events__'", true, 27552, 27854, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Set global variable", true, 27608, 27630, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Update main dictionary information", true, 27674, 27711, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_package_tab", true, 27721, 27839, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 17, PlsqlBlockType.PROCEDURE_IMPL, "Fill_List_Array___", true, 27896, 31673, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Check for incorrectness in number of values and remove redundant information if it occurs", true, 28373, 28465, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  db_values_.COUNT != client_values_.COUNT", true, 28472, 31268, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  db_count_ > client_count_", true, 28618, 29707, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Missing client values", true, 28664, 28688, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN Nvl(db_values_.FIRST, 0)..Nvl(db_values_.LAST, -1)", true, 28851, 29707, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Try to find more values by calling standard interfaces for domains,", true, 28931, 29072, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  domain_", true, 29088, 29471, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 29122, 29471, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe utgulk 20060105", true, 29149, 29183, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 29487, 29684, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Can't find the values for other types than domains...", true, 29510, 29566, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 29717, 30787, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Missing db values", true, 29734, 29754, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN Nvl(client_values_.FIRST,0)..Nvl(client_values_.LAST,-1)", true, 29917, 30770, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Try to find more values by calling standard interfaces for domains,", true, 30003, 30144, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  domain_", true, 30160, 30539, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 30194, 30539, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe utgulk 20060105", true, 30221, 30255, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 30555, 30748, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Can't find the values for other types than domains...", true, 30578, 30634, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Log information if values could not be determined...", true, 30797, 30852, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  error_", true, 30862, 31254, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(17).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "i IN Nvl(db_values_.FIRST,0)..Nvl(db_values_.LAST,-1)", true, 31275, 31646, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Rebuild_State_Machine___", true, 31678, 37787, 10);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "state_mach", true, 31795, 32633, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Get_Lu_Name_", true, 33226, 33747, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT lu_name INTO tmp_", true, 33384, 33504, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_IMPL, "trim_str", true, 33758, 33900, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  full_mode_", true, 33918, 33974, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 33981, 34100, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT NVL(MAX(updated),SYSDATE-1000) INTO last_update_ FROM dictionary_sys_state_mach_tab", true, 33995, 34085, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 5, PlsqlBlockType.WHILE_LOOP, "i < state_machine.LAST", true, 34236, 35499, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  state_machine(i-1).type ='START' AND state_machine(i).type = 'EVENT'", true, 34280, 35432, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "in_state_transistion AND i+1 <= state_machine.LAST", true, 34470, 35432, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  state_machine(i).type='EVENT' AND\n                  state_machine(i+1).type='END' AND\n                  trim_str(state_machine(i).what) IS NOT NULL", true, 34548, 35184, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF state_machine(i).type!='START' AND i < state_machine.LAST", true, 35200, 35294, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 35310, 35410, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 35442, 35483, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- This line only used when debugging", true, 35500, 35747, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 35773, 35807, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 8, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_state_mach_tab VALUES model(k)", true, 36346, 36403, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks(), 9, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 36679, 37613, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(18).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Write_Error_Text___ (error_text_, '   Position number '||to_char(position_));", true, 36776, 36873, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "Rebuild_All_State_Event___", true, 37793, 44384, 9);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_events", true, 37912, 38424, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Get_Lu_Name_", true, 39041, 39523, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT lu_name INTO tmp_", true, 39184, 39298, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  full_mode_", true, 39541, 39597, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 39604, 39723, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT NVL(MAX(updated),SYSDATE-1000) INTO last_update_ FROM dictionary_sys_state_mach_tab", true, 39618, 39708, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  SQL%NOTFOUND", true, 39810, 39947, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 39954, 40399, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 39968, 40385, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 39986, 40020, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 6, PlsqlBlockType.FOR_LOOP, "i IN Nvl(state_events_.FIRST,0)..Nvl(state_events_.LAST,-1)", true, 40756, 42282, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.LOOP, "", true, 40908, 42266, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  event_idx_!=1", true, 41108, 41441, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j IN Nvl(event_array_.FIRST,0)..Nvl(event_array_.LAST,-1)", true, 41184, 41421, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  event_array_(j)=event_", true, 41269, 41396, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT dup_event_val_", true, 41454, 42217, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ELSE", true, 41934, 42197, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 7, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_state_event_tab VALUES state_event_values_(j)", true, 42773, 42845, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 43104, 43892, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(19).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Write_Error_Text___ (error_text_, '   Position number '||to_char(position_));", true, 43198, 43292, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Rebuild_State_Transitions___", true, 44391, 50214, 9);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_state_events_", true, 44784, 45087, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Get_Allowed_State_Trans", true, 45370, 46212, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe utgulk 20060105", true, 45784, 45818, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  full_mode_", true, 46230, 46286, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 46293, 46569, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT NVL(MAX(to_date(timestamp, 'RRRR-MM-DD:HH24:MI:SS')),SYSDATE-1000) INTO last_update_", true, 46307, 46554, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  SQL%NOTFOUND", true, 46668, 46817, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 46824, 47269, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 46838, 47255, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 46856, 46890, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 6, PlsqlBlockType.FOR_LOOP, "i IN Nvl(state_list_.FIRST,0)..Nvl(state_list_.LAST,-1)", true, 47326, 48183, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.LOOP, "", true, 47522, 48167, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 7, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_state_trans_tab VALUES state_trans_values_(j)", true, 48677, 48749, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 49013, 49941, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(20).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Write_Error_Text___ (error_text_, '   Position number '||to_char(position_));", true, 49107, 49201, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Tokenize_Lists___", true, 50219, 51194, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "end_pos_ < len_ AND end_pos_ != 0", true, 50701, 51168, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 22, PlsqlBlockType.PROCEDURE_IMPL, "Insert_Package_Information___", true, 51199, 54616, 9);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_tab", true, 51472, 51620, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  length(lu_name_) > 25", true, 51631, 51839, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_tab", true, 51904, 52085, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Insert and if already existing then update.", true, 52482, 52592, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_package_tab", true, 52672, 52880, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Fix problems with LU that has more than one _API package (e.g. for state handling).", true, 52891, 53002, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 6, PlsqlBlockType.STATEMENT, "UPDATE Dictionary_Sys_Package_Tab", true, 53012, 53697, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "COMMENT...", true, 53709, 53711, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(22).getChildBlocks(), 8, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_package_tab", true, 53776, 53939, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Insert_View_Information___", true, 54621, 57785, 12);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find the base view according to naming conventions...", true, 54930, 55061, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  view_name_ =  Clientnametodbname_(lu_name_)", true, 55068, 55185, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 55192, 55269, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Insert into dictionary_sys_tab. It is likely this entry already exist (from package information),", true, 55276, 55448, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  base_view_", true, 55455, 55845, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_tab", true, 55483, 55622, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  SQL%NOTFOUND", true, 55633, 55845, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_tab", true, 55666, 55827, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 55852, 56179, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_tab", true, 55866, 55965, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  SQL%NOTFOUND", true, 55976, 56165, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_tab", true, 56009, 56147, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- Insert into dictionary_sys_view_tab", true, 56186, 56341, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  base_view_", true, 56419, 56468, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF substr(view_name_, -4) = '_REP'", true, 56478, 56551, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSE", true, 56561, 56613, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 10, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_view_tab", true, 56623, 56838, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(23).getChildBlocks(), 11, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_view_tab", true, 56904, 57146, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 24, PlsqlBlockType.PROCEDURE_IMPL, "Refresh_View_Columns___", true, 57790, 64140, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_view_columns", true, 57896, 58224, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_new_view_columns", true, 58232, 58678, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Fetch view column information and delete old information", true, 59249, 59326, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  all_views_", true, 59333, 59640, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove all old information", true, 59491, 59564, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 59647, 60151, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove old information for all of the methods that is being updated", true, 59803, 59873, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_view_column_tab c", true, 59883, 60136, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Process all of the view column information", true, 60159, 60204, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  view_columns_.COUNT > 0", true, 60211, 64108, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(view_columns_.FIRST,0)..Nvl(view_columns_.LAST,-1)", true, 60252, 62822, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find the lu name for the view if view has changed", true, 60333, 60385, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (prev_view_ <> view_columns_(i).view_name)", true, 60398, 60606, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  lu_name_ IS NOT NULL", true, 60619, 62803, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 60663, 62754, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Insert all the values into dictionary_sys_view_column_tab", true, 62833, 62893, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks(), 2, PlsqlBlockType.BEGIN_END, "", true, 62903, 64094, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_view_column_tab VALUES complete_columns_(j)", true, 63027, 63097, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(24).getChildBlocks().get(6).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 63371, 64080, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 25, PlsqlBlockType.COMMENT, "-- Handles both domain and state information, behaves different depending on info_type", true, 64145, 64231, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 26, PlsqlBlockType.PROCEDURE_IMPL, "Refresh_Domain_State_Info___", true, 64235, 70207, 11);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Domain information", true, 64388, 64409, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_domain_info", true, 64416, 65703, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- State information", true, 65717, 65737, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_state_info", true, 65744, 66259, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- AND    line BETWEEN 2 AND 11;", true, 66260, 66300, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Delete old values (they can only exist if this is not a full refresh)", true, 66671, 66743, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  NOT refresh_all_", true, 66750, 67129, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  refresh_domain_", true, 66784, 66946, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_domain_tab", true, 66820, 66945, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 66956, 67115, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(6).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_state_tab", true, 66973, 67097, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- Clear variables", true, 67137, 67155, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  refresh_domain_", true, 67248, 67904, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN Nvl(list_.FIRST,0)..Nvl(list_.LAST,-1)", true, 67434, 67572, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "j_ IN Nvl(list_.FIRST,0)..Nvl(list_.LAST,-1)", true, 67762, 67904, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSE", true, 67911, 68423, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "list IN get_state_info(package_name_)", true, 67925, 68323, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Break down the list into single values in an array", true, 67984, 68037, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  list.list_type = 'db_state_list_'", true, 68050, 68155, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF list.list_type = 'client_state_list_'", true, 68168, 68304, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Get state events", true, 68333, 68408, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  db_values_.count > 0", true, 68431, 70170, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Fill the result array with the rest of the necessary information", true, 68469, 68536, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Insert all of the values into dictionary_sys_domain_tab", true, 68659, 68717, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks(), 2, PlsqlBlockType.BEGIN_END, "", true, 68727, 70156, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  refresh_domain_", true, 68745, 68956, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_domain_tab VALUES complete_values_(j)", true, 68891, 68955, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 68969, 69180, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_state_tab VALUES complete_values_(j)", true, 69096, 69159, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 69490, 70142, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(26).getChildBlocks().get(10).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Write_Error_Text___ (error_text_, '   Position number '||to_char(position_));", true, 69591, 69688, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 27, PlsqlBlockType.PROCEDURE_IMPL, "Refresh_Method_Arguments___", true, 70212, 75509, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_met_arguments", true, 70326, 70705, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_new_met_arguments", true, 70713, 71255, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Fetch method argument information and delete old information", true, 71784, 71865, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  all_methods_", true, 71872, 72181, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove all old information", true, 72035, 72108, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 72188, 72701, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove old information for all of the methods that is being updated", true, 72347, 72417, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_argument_tab a", true, 72427, 72686, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Process method argument information", true, 72708, 72764, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  met_arguments.COUNT > 0", true, 72771, 75473, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(met_arguments.FIRST,0)..Nvl(met_arguments.LAST,-1)", true, 72812, 74065, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find the lu name for the package if package has changed", true, 72893, 72951, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (prev_pkg_ <> met_arguments(i).package_name)", true, 72964, 73182, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  lu_name_ IS NOT NULL", true, 73195, 74046, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Insert the values into the complete array", true, 73239, 73283, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Insert all the values into dictionary_sys_argument_tab", true, 74076, 74133, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks(), 2, PlsqlBlockType.BEGIN_END, "", true, 74143, 75458, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_argument_tab VALUES all_arguments_(j)", true, 74261, 74325, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(27).getChildBlocks().get(6).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 74603, 75444, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 28, PlsqlBlockType.PROCEDURE_IMPL, "Refresh_Methods___", true, 75514, 84605, 17);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_methods", true, 75619, 75913, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_pragma_methods", true, 75921, 76333, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_new_methods", true, 76341, 76773, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_new_pragma_methods", true, 76781, 77323, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Fetch method information and delete old information", true, 77830, 77902, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  all_methods_", true, 77909, 78205, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove all old information for methods", true, 78049, 78134, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 78212, 78700, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Remove old information for all of the methods that is being updated", true, 78348, 78418, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_method_tab m", true, 78428, 78685, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- Process method information", true, 78707, 78754, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  methods_.COUNT > 0", true, 78761, 80891, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(methods_.FIRST,0)..Nvl(methods_.LAST,-1)", true, 78797, 79614, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (prev_pkg_ <> methods_(i).pkg)", true, 78868, 79044, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  lu_name_ IS NOT NULL", true, 79057, 79595, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Insert the values into the complete array", true, 79187, 79231, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Insert all the values into dictionary_sys_method_tab", true, 79625, 79680, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.BEGIN_END, "", true, 79690, 80877, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_method_tab VALUES complete_methods_(j)", true, 79814, 79879, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN 1..error_count_", true, 80148, 80863, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- Clear arrays", true, 80899, 80914, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- Fetch pragma method information", true, 80977, 81029, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  all_methods_", true, 81036, 81187, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSE", true, 81194, 81355, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "-- Process pragma method information", true, 81362, 81416, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 14, PlsqlBlockType.IF, "IF  methods_.COUNT > 0", true, 81423, 84036, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Initiate sub type", true, 81459, 81479, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN Nvl(methods_.FIRST,0)..Nvl(methods_.LAST,-1)", true, 81523, 84022, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find the name of the LU for every new package", true, 81594, 81642, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (prev_pkg_ <> methods_(i).pkg)", true, 81655, 81831, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  lu_name_ IS NOT NULL", true, 81844, 84003, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Update the record in dictionary_sys_method_tab", true, 81974, 82023, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.BEGIN_END, "", true, 82039, 83287, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_method_tab", true, 82063, 82338, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  SQL%NOTFOUND", true, 82358, 82653, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO dictionary_sys_method_tab", true, 82400, 82626, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Handle if current package contains a state machine (identified by a specific PRAGMA method)", true, 83303, 83465, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Fetch and insert state information if current package contains a state machine", true, 83545, 83626, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  pkg_lu_sub_type_ = 'S'", true, 83642, 83983, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (refresh_mode_ != 'LIGHT')", true, 83691, 83838, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Reset the sub_type to avoid multiple unnecessary searches", true, 83857, 83917, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "-- Update special handled methods to PRAGMA (Read", true, 84043, 84124, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(28).getChildBlocks(), 16, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_method_tab t", true, 84131, 84577, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 29, PlsqlBlockType.COMMENT, "-- Validate refresh mode before proceeding", true, 84965, 85019, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 30, PlsqlBlockType.IF, "IF  refresh_mode_ IS NULL OR refresh_mode_ NOT IN ('FULL', 'PARTIAL', 'VIEWS', 'PACKAGES', 'LIGHT')", true, 85023, 85288, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 31, PlsqlBlockType.COMMENT, "-- If a refresh is not necessary and a full refresh is not ordered, abort immediately...", true, 85292, 85601, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 32, PlsqlBlockType.IF, "IF  NOT refresh_all_", true, 85605, 86131, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(32).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  rebuild_needed_ = 0", true, 85686, 85844, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(32).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Find last update time", true, 85852, 85876, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(32).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Set full refresh mode if no dictionary data exist", true, 85988, 86040, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(32).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  last_update_ IS NULL", true, 86047, 86120, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 33, PlsqlBlockType.IF, "IF  refresh_all_", true, 86136, 86483, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(33).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Fetch the objects to update", true, 86242, 86272, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 34, PlsqlBlockType.IF, "ELSE", true, 86487, 87516, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Spool information about what \"mode\" is used", true, 86498, 86544, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  refresh_views_ AND refresh_pkgs_", true, 86551, 86675, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF refresh_pkgs_", true, 86682, 86808, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF refresh_views_", true, 86815, 86953, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Fetch the objects to update", true, 87097, 87127, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  refresh_pkgs_", true, 87134, 87315, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(34).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  refresh_views_", true, 87323, 87505, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 35, PlsqlBlockType.COMMENT, "-- Refresh package and method information", true, 87520, 87573, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 36, PlsqlBlockType.IF, "IF  packages_.COUNT > 0", true, 87911, 91240, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Save start date for package refresh", true, 87945, 87983, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Remove old information if full refresh", true, 88020, 88061, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  refresh_all_", true, 88068, 88675, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 88098, 88132, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 88206, 88240, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 88322, 88356, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 88437, 88471, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 88551, 88585, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "i IN Nvl(packages_.FIRST,0)..Nvl(packages_.LAST,-1)", true, 88683, 90462, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "pkg_info IN get_package_info(packages_(i))", true, 88892, 89394, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Investigate module, lu name and sub type of the lu", true, 88956, 89009, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (pkg_info.gtype = 'M')", true, 89022, 89113, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF pkg_info.gtype IN ('L', 'S')", true, 89126, 89260, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF pkg_info.gtype = 'D'", true, 89273, 89375, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  pkg_lu_name_ IS NOT NULL AND pkg_module_ IS NOT NULL", true, 89404, 90225, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Insert the information into the dictionary", true, 89477, 89522, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Refresh domain or state information depending on sub type of the LU (stored in global variable)", true, 89820, 89918, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  pkg_lu_sub_type_ = 'D'", true, 89931, 90225, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Refresh domain information if this is identified as an IID package", true, 89977, 90046, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (refresh_mode_ != 'LIGHT')", true, 90062, 90205, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 90235, 90446, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Refresh methods once all packages are updated", true, 90469, 90535, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Refresh arguments for methods once all methods are updated", true, 90595, 90674, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(36).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 90738, 91229, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 37, PlsqlBlockType.COMMENT, "-- Refresh view information", true, 91244, 91283, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 38, PlsqlBlockType.IF, "IF  views_.COUNT > 0", true, 91615, 93635, 6);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Save start date for view refresh", true, 91646, 91681, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Remove old information if full refresh", true, 91718, 91759, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  refresh_all_", true, 91766, 91899, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe pemase 20060215", true, 91796, 91830, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 91906, 92078, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_view_tab", true, 91985, 92063, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "i IN Nvl(views_.FIRST,0)..Nvl(views_.LAST,-1)", true, 92086, 93491, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  view_module_ = 'IGNORE'", true, 92448, 92535, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  view_lu_name_ IS NULL", true, 92545, 92823, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  view_lu_name_ IS NULL", true, 92668, 92806, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  view_module_ IS NOT NULL AND view_lu_name_ IS NOT NULL", true, 92915, 93265, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  view_module_ != 'IGNORE'", true, 92990, 93265, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks().get(4).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 93275, 93475, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(38).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Refresh view columns once all view are updated", true, 93498, 93565, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 39, PlsqlBlockType.IF, "IF  NOT refresh_all_", true, 93640, 95104, 6);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Delete information for objects no longer in the database", true, 93671, 93748, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_package_tab p", true, 93755, 94000, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_method_tab m", true, 94009, 94211, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 3, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_view_tab v", true, 94220, 94456, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_view_column_tab c", true, 94465, 94716, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks().get(39).getChildBlocks(), 5, PlsqlBlockType.STATEMENT, "DELETE FROM dictionary_sys_tab l", true, 94725, 95092, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 40, PlsqlBlockType.COMMENT, "-- Attempt 1:", true, 95109, 95280, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 41, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_view_tab", true, 95284, 95803, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 42, PlsqlBlockType.COMMENT, "-- Attempt 2:", true, 95809, 95983, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 43, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_view_tab", true, 95987, 96219, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 44, PlsqlBlockType.COMMENT, "-- Set prompts for all Logical Units that didn't have a clearly defined view with a prompt.", true, 96224, 96379, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 45, PlsqlBlockType.STATEMENT, "UPDATE dictionary_sys_tab", true, 96383, 96527, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(4).getChildBlocks(), 46, PlsqlBlockType.COMMENT, "-- Call activity ManageApplicationServerCache.ClearDataDictionaryCache", true, 96590, 96672, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- SERVICE SPECIFIC PRIVATE METHODS ", true, 97427, 97966, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_IMPL, "Enumerate_Logical_Units__", true, 97967, 98926, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "units", true, 98197, 98315, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Init used elements", true, 98325, 98358, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Fetch all packages and views associated with a logical unit", true, 98446, 98570, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "unit IN units", true, 98574, 98751, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (length(temp_(n_)) > limit_)", true, 98665, 98738, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Return complete lists", true, 98755, 98791, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 7, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Properties__", true, 98928, 99371, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Properties2__", true, 99373, 99799, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 9, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Views__", true, 99801, 99996, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 10, PlsqlBlockType.FUNCTION_IMPL, "Get_Logical_Unit_Views__", true, 99998, 100655, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_lu_views", true, 100158, 100296, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  view_array_.count > 0", true, 100405, 100603, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(10).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(view_array_.first, 0)..Nvl(view_array_.last, -1)", true, 100441, 100592, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 11, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Packages__", true, 100657, 100864, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 12, PlsqlBlockType.FUNCTION_IMPL, "Get_Logical_Unit_Packages__", true, 100867, 101576, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_lu_packages", true, 101031, 101181, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_array_.count > 0", true, 101302, 101518, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(package_array_.first, 0)..Nvl(package_array_.last, -1)", true, 101341, 101507, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Methods__", true, 101578, 102791, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_all_lu_methods", true, 101803, 101967, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_lu_methods", true, 101972, 102160, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  all_methods_ = 'TRUE'", true, 102171, 102343, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 102347, 102493, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  method_array_.count > 0", true, 102498, 102759, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "lu_methods IN Nvl(method_array_.first, 0)..Nvl(method_array_.last, -1)", true, 102536, 102748, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Get_LU_Method_Types__", true, 102793, 103665, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_all_lu_methods", true, 102997, 103174, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  method_array_.count > 0", true, 103333, 103638, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "lu_methods IN Nvl(method_array_.first, 0)..Nvl(method_array_.last, -1)", true, 103371, 103627, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 15, PlsqlBlockType.FUNCTION_IMPL, "Get_State_Encode_Method__", true, 103667, 103868, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 16, PlsqlBlockType.FUNCTION_IMPL, "Get_State_Enumerate_Method__", true, 103870, 104074, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "-- SERVICE SPECIFIC PROTECTED METHODS ", true, 104076, 104528, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 18, PlsqlBlockType.FUNCTION_IMPL, "Dbnametoclientname_", true, 104530, 105067, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find number of trailing underscores", true, 104632, 104670, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Return client name with leading underscores", true, 104733, 104779, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (cnt_ = 1)", true, 104783, 104855, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (cnt_ = 2)", true, 104859, 104946, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 19, PlsqlBlockType.FUNCTION_IMPL, "Clientnametodbname_", true, 105070, 105977, 6);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find number of leading underscores", true, 105242, 105279, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Add intermediate underscores where needed", true, 105350, 105394, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "index_ IN cnt_+1..length(client_name_)", true, 105398, 105665, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (char_ between 'A' and 'Z')  AND (temp_ IS NOT NULL)", true, 105498, 105595, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 105602, 105652, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Return database name with trailing underscores", true, 105669, 105718, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (cnt_ = 1)", true, 105722, 105785, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (cnt_ = 2)", true, 105789, 105866, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 20, PlsqlBlockType.COMMENT, "-- Comment decoding routines for LU", true, 105979, 106181, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 21, PlsqlBlockType.FUNCTION_IMPL, "Comment_Value_", true, 106183, 106898, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find keyword name position within comment", true, 106339, 106383, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- New fix to support ambigous names in report definitions in IFS/Info Services", true, 106414, 106493, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- If found, return value from comment", true, 106555, 106593, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (from_ > 0)", true, 106597, 106839, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( to_ = 0 )", true, 106665, 106735, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- If not found, return null value", true, 106805, 106839, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 106843, 106878, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 22, PlsqlBlockType.COMMENT, "-- Prompt fetching routines, mainly used for localization", true, 106900, 107113, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 23, PlsqlBlockType.FUNCTION_IMPL, "Get_View_Prompt_", true, 107115, 107467, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_prompt", true, 107226, 107345, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 24, PlsqlBlockType.FUNCTION_IMPL, "Get_Lu_Prompt_", true, 107469, 107936, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(24).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_prompt", true, 107589, 107697, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(24).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Check that inparameters make sense before proceeding.", true, 107707, 107763, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(24).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  lu_name_ IS NULL", true, 107767, 107821, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 25, PlsqlBlockType.FUNCTION_IMPL, "Get_Item_Prompt_", true, 107938, 108579, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_prompt", true, 108187, 108373, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (view_ IS NULL)", true, 108383, 108463, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 26, PlsqlBlockType.COMMENT, "-- Property fetching routines for run", true, 108581, 108795, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 27, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Keys_", true, 108797, 110903, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- To check that the suggested base view actually contain an objid...", true, 109080, 109149, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "find_objid", true, 109153, 109383, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_keys", true, 109388, 109624, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Fetch the view name from LU", true, 109755, 109796, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Verify that this view contains an objid", true, 109837, 109879, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  find_objid%FOUND", true, 109953, 110832, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- View found, fetch the keys!", true, 110008, 110038, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "keyrec IN get_keys(view_)", true, 110045, 110167, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (objid_ IS NOT NULL)", true, 110206, 110832, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Fetch instance key information by using dynamic SQL", true, 110244, 110298, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.BEGIN_END, "", true, 110308, 110818, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe utgulk 20060105", true, 110622, 110656, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(27).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 110836, 110875, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 28, PlsqlBlockType.COMMENT, "-- Could not completely rely on cached information, since table information is not extracted to the cache", true, 110905, 111010, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 29, PlsqlBlockType.PROCEDURE_IMPL, "Get_Logical_Unit_Tables_", true, 111011, 112151, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(29).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "view_tables", true, 111169, 111809, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(29).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Check that inparameters make sense before proceeding.", true, 111819, 111875, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(29).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  lu_name_ IS NULL", true, 111879, 111928, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(29).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "t IN view_tables", true, 112023, 112121, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 30, PlsqlBlockType.COMMENT, "-- Introduced new method and implemented to use dictionary cache.", true, 112153, 112218, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 31, PlsqlBlockType.PROCEDURE_IMPL, "Enum_Modules_", true, 112219, 112520, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(31).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "modules", true, 112282, 112383, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(31).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "module IN modules", true, 112393, 112501, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 32, PlsqlBlockType.PROCEDURE_IMPL, "Enum_Module_Names_", true, 112522, 113189, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(32).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "modules", true, 112687, 112775, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(32).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  module_array_.count > 0", true, 112884, 113165, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(32).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(module_array_.first, 0)..Nvl(module_array_.last, -1)", true, 112922, 113154, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 33, PlsqlBlockType.COMMENT, "-- Modified implementation to use dictionary cache. Designtime version moved to Design_SYS", true, 113191, 113281, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 34, PlsqlBlockType.PROCEDURE_IMPL, "Enum_Module_All_Logical_Units_", true, 113282, 113875, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(34).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "units", true, 113413, 113567, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(34).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  lu_array_.count > 0", true, 113653, 113839, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(34).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(lu_array_.first, 0)..Nvl(lu_array_.last, -1)", true, 113687, 113828, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 35, PlsqlBlockType.COMMENT, "-- Modified implementation to use dictionary cache. Designtime version moved to Design_SYS", true, 113877, 113967, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 36, PlsqlBlockType.PROCEDURE_IMPL, "Enum_Module_Logical_Units_", true, 113968, 114545, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(36).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "units", true, 114095, 114241, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(36).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  lu_array_.count > 0", true, 114327, 114513, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(36).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN Nvl(lu_array_.first, 0)..Nvl(lu_array_.last, -1)", true, 114361, 114502, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 37, PlsqlBlockType.COMMENT, "-- Modified implementation using dictionary cache.", true, 114547, 114597, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 38, PlsqlBlockType.PROCEDURE_IMPL, "Enum_Module_System_Services_", true, 114598, 114987, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(38).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "units", true, 114700, 114846, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(38).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "unit IN units", true, 114856, 114953, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 39, PlsqlBlockType.COMMENT, "-- Runtime performance refreshment routines", true, 114989, 115202, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 40, PlsqlBlockType.PROCEDURE_IMPL, "Activate_Language_Refresh_", true, 115203, 115521, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 41, PlsqlBlockType.PROCEDURE_IMPL, "Rebuild_Dictionary_Storage_", true, 115523, 115781, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 42, PlsqlBlockType.PROCEDURE_IMPL, "Rebuild_Dictionary_Storage_", true, 115783, 116056, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 43, PlsqlBlockType.PROCEDURE_IMPL, "Check_Dictionary_Storage_", true, 116058, 117150, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_last_update", true, 116181, 116266, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_objects", true, 116271, 116631, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (last_update_ IS NULL)", true, 116710, 116797, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 116801, 117093, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_objects%NOTFOUND)", true, 116887, 116975, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(43).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 116982, 117057, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 44, PlsqlBlockType.COMMENT, "-- SERVICE SPECIFIC PUBLIC METHODS ", true, 117152, 117603, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 45, PlsqlBlockType.FUNCTION_IMPL, "Get_Base_View", true, 117605, 117953, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(45).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_view", true, 117708, 117844, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 46, PlsqlBlockType.FUNCTION_IMPL, "Get_Component", true, 117955, 118883, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(46).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pkg_component", true, 118088, 118287, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(46).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_view_component", true, 118292, 118486, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(46).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  upper(object_type_) = 'PACKAGE'", true, 118496, 118643, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(46).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF upper(object_type_) = 'VIEW'", true, 118647, 118797, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(46).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 118801, 118842, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 47, PlsqlBlockType.FUNCTION_IMPL, "Get_Logical_Unit", true, 118885, 119630, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(47).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pkg_lu", true, 119020, 119150, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(47).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_view_lu", true, 119155, 119280, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(47).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  upper(object_type_) = 'PACKAGE'", true, 119290, 119414, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(47).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF upper(object_type_) = 'VIEW'", true, 119418, 119545, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(47).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 119549, 119588, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 48, PlsqlBlockType.FUNCTION_IMPL, "Get_Logical_Unit_Module", true, 119632, 119973, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(48).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_module", true, 119739, 119843, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 49, PlsqlBlockType.FUNCTION_IMPL, "Package_Is_Installed", true, 119975, 120584, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pkg", true, 120077, 120199, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Reroute to Database_SYS during installation", true, 120209, 120255, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  installation_", true, 120259, 120337, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 120341, 120558, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_pkg%FOUND)", true, 120406, 120475, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(49).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 120482, 120547, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 50, PlsqlBlockType.FUNCTION_IMPL, "Method_Is_Installed", true, 120586, 121303, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_method", true, 120717, 120891, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Reroute to Database_SYS during installation", true, 120901, 120947, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  installation_", true, 120951, 121042, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 121046, 121278, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_method%FOUND)", true, 121117, 121192, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(50).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 121199, 121267, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 51, PlsqlBlockType.FUNCTION_IMPL, "View_Is_Installed", true, 121305, 121896, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_view", true, 121401, 121515, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Reroute to Database_SYS during installation", true, 121525, 121571, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  installation_", true, 121575, 121647, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 121651, 121873, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_view%FOUND)", true, 121718, 121789, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(51).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 121796, 121862, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 52, PlsqlBlockType.FUNCTION_IMPL, "Logical_Unit_Is_Installed", true, 121898, 122514, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_lu", true, 122009, 122105, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Reroute to Database_SYS during installation", true, 122115, 122161, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  installation_", true, 122165, 122267, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 122271, 122483, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_lu%FOUND)", true, 122334, 122401, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(52).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 122408, 122472, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 53, PlsqlBlockType.FUNCTION_IMPL, "Component_Is_Installed", true, 122516, 123054, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(53).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_component", true, 122657, 122815, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(53).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (get_component%FOUND)", true, 122885, 122960, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(53).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 122964, 123026, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 54, PlsqlBlockType.FUNCTION_IMPL, "Package_Is_Installed_Num", true, 123056, 123277, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(54).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Package_Is_Installed(package_name_)", true, 123149, 123210, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(54).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 123214, 123247, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 55, PlsqlBlockType.FUNCTION_IMPL, "Method_Is_Installed_Num", true, 123279, 123541, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(55).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Method_Is_Installed(package_name_, method_name_)", true, 123401, 123475, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(55).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 123479, 123512, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 56, PlsqlBlockType.FUNCTION_IMPL, "View_Is_Installed_Num", true, 123543, 123749, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(56).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  View_Is_Installed(view_name_)", true, 123630, 123685, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(56).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 123689, 123722, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 57, PlsqlBlockType.FUNCTION_IMPL, "Logical_Unit_Is_Installed_Num", true, 123751, 123977, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(57).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Logical_Unit_Is_Installed(lu_name_)", true, 123844, 123905, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(57).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 123909, 123942, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 58, PlsqlBlockType.FUNCTION_IMPL, "Component_Is_Installed_Num", true, 123979, 124250, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(58).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Component_Is_Installed(component_, version_)", true, 124111, 124181, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(58).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 124185, 124218, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 59, PlsqlBlockType.FUNCTION_IMPL, "Get_No_Overloads", true, 124252, 125156, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(59).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_no_overloads_", true, 124372, 124546, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(59).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_name_ IS NULL OR method_name_ IS NULL", true, 124600, 124818, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(59).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 124654, 124788, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(59).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  get_no_overloads_%NOTFOUND", true, 124889, 125088, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(59).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 124924, 125058, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 60, PlsqlBlockType.FUNCTION_IMPL, "Get_No_Arguments", true, 125158, 126091, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(60).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_no_args_", true, 125279, 125501, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(60).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_name_ IS NULL OR method_name_ IS NULL", true, 125555, 125773, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(60).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 125609, 125743, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(60).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  get_no_args_%NOTFOUND", true, 125834, 126028, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(60).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 125864, 125998, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 61, PlsqlBlockType.FUNCTION_IMPL, "Get_Min_No_Arguments", true, 126093, 127120, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(61).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_min_no_args_", true, 126221, 126510, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(61).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_name_ IS NULL OR method_name_ IS NULL", true, 126564, 126782, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(61).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 126618, 126752, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(61).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  get_min_no_args_%NOTFOUND", true, 126851, 127049, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(61).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 126885, 127019, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 62, PlsqlBlockType.FUNCTION_IMPL, "Get_Max_No_Arguments", true, 127122, 128149, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(62).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_max_no_args_", true, 127250, 127539, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(62).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_name_ IS NULL OR method_name_ IS NULL", true, 127593, 127811, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(62).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 127653, 127781, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(62).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  get_max_no_args_%NOTFOUND", true, 127880, 128078, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(62).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 127920, 128048, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 63, PlsqlBlockType.FUNCTION_IMPL, "Get_Argument_Type", true, 128151, 129262, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_arg_type_", true, 128324, 128536, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  package_name_ IS NULL OR method_name_ IS NULL", true, 128632, 128850, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 128692, 128820, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  Get_No_Overloads(package_name_, method_name_) > 1", true, 128854, 128941, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  get_arg_type_%NOTFOUND", true, 129003, 129198, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(63).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Error_SYS.Appl_General(service_, 'NON_EXISTING_METHOD: [:P1,:P2] method is non existing method', package_name_, method_name_);", true, 129040, 129168, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 64, PlsqlBlockType.PROCEDURE_IMPL, "Set_Installation_Mode", true, 129264, 129493, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 65, PlsqlBlockType.FUNCTION_IMPL, "Get_Installation_Mode", true, 129495, 129673, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 66, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 129675, 130139, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 67, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 130141, 130183, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.COMMENT, "COMMENT...", false, 130405, 130482, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced6() throws IOException, BadLocationException {
        System.out.println("Advanced test case 6");
        FileObject fileObject = fs.getRoot().createData("FavoriteSchedules.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "FavoriteSchedules.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 8);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: FavoriteSchedules", false, 0, 386, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 667, 900, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "FAVORITE_SCHEDULES", false, 930, 1362, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "FAVORITE_SCHEDULES", false, 1365, 1444, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "FAVORITE_SCHEDULES", false, 1447, 2009, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 2012, 2245, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.PACKAGE_BODY, "FAVORITE_SCHEDULES_API", false, 2284, 23580, 29);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 2324, 3435, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 3437, 4589, 5);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 3731, 3881, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 3885, 3973, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 4038, 4122, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 4208, 4289, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 4293, 4360, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 4591, 5421, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 4848, 5115, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 5180, 5253, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 5257, 5323, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 5423, 5830, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 5533, 5614, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 5670, 5768, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 4, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 5833, 6426, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 6066, 6310, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 6428, 7108, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 6638, 6890, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 6959, 7046, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 7110, 7753, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 7362, 7626, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 7755, 8500, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 8502, 8623, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 9, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 8626, 10038, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 8821, 9515, 6);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'IDENTITY')", true, 8898, 9018, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'SCHEDULE_TYPE')", true, 9025, 9103, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'SCHEDULE_CODE')", true, 9110, 9188, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'COMPANY_ID')", true, 9195, 9267, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'WAGE_CLASS')", true, 9274, 9417, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 9424, 9502, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 10, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 10041, 10778, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 10285, 10682, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 10780, 11364, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 11366, 12392, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 11589, 12242, 6);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'IDENTITY')", true, 11666, 11748, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'SCHEDULE_TYPE')", true, 11755, 11850, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'SCHEDULE_CODE')", true, 11857, 11952, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'COMPANY_ID')", true, 11959, 12048, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'WAGE_CLASS')", true, 12055, 12144, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 12151, 12229, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 12395, 13729, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  by_keys_", true, 12739, 13285, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE favorite_schedules_tab", true, 12762, 13284, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 13289, 13634, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(13).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE favorite_schedules_tab", true, 13300, 13622, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 13731, 14328, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 14330, 14658, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 14661, 15069, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 14984, 15053, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 15071, 17372, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 17374, 17669, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 17672, 18276, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 17945, 18006, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 18010, 18086, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 18090, 18228, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 18279, 19001, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 18585, 18712, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 18716, 18950, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 19004, 19556, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 19239, 19344, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(21).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 19348, 19505, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 22, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 19558, 20011, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 20013, 20412, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(identity_, schedule_type_, schedule_code_, company_id_, wage_class_))", true, 20249, 20401, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 20414, 21355, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 25, PlsqlBlockType.PROCEDURE_IMPL, "Add_Remove", true, 21357, 22709, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  favorite_ = 1", true, 21801, 22380, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(25).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(identity_, schedule_type_, schedule_code_, company_id_, wage_class_))", true, 21829, 22380, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(25).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 22384, 22692, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(25).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Check_Exist___(identity_, schedule_type_, schedule_code_, company_id_, wage_class_))", true, 22395, 22681, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 26, PlsqlBlockType.FUNCTION_IMPL, "Get_Favorite", true, 22712, 23058, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Check_Exist___(identity_, schedule_type_, schedule_code_, company_id_, wage_class_))", true, 22907, 23027, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 27, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 23060, 23524, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 28, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 23526, 23568, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.COMMENT, "COMMENT...", false, 23702, 23779, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced7() throws IOException, BadLocationException {
        System.out.println("Advanced test case 7");
        FileObject fileObject = fs.getRoot().createData("FndEvent.api");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "FndEvent.api");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 3);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: FndEvent", false, 0, 628, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.PACKAGE, "FND_EVENT_API", false, 772, 4523, 19);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 1037, 1270, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_DEF, "Lock__", true, 1272, 1379, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 2, PlsqlBlockType.PROCEDURE_DEF, "New__", true, 1381, 1560, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 3, PlsqlBlockType.PROCEDURE_DEF, "Modify__", true, 1562, 1744, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Remove__", true, 1746, 1884, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 1886, 2119, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_DEF, "Exist", true, 2121, 2202, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 2204, 2437, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_DEF, "Export__", true, 2439, 2557, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 2559, 3028, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 10, PlsqlBlockType.FUNCTION_DEF, "Get_Event_Description", true, 3030, 3142, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 11, PlsqlBlockType.FUNCTION_DEF, "Get_Event_Enable", true, 3202, 3309, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_DEF, "Set_Event_Enable", true, 3364, 3456, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_DEF, "Refresh", true, 3459, 3908, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_DEF, "Register_Custom_Event", true, 3910, 4038, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_DEF, "Unfresh", true, 4041, 4124, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 16, PlsqlBlockType.FUNCTION_DEF, "Get", true, 4127, 4218, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 4261, 4494, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_DEF, "Init", true, 4496, 4511, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.COMMENT, "COMMENT...", false, 4580, 4657, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced8() throws IOException, BadLocationException {
        System.out.println("Advanced test case 8");
        FileObject fileObject = fs.getRoot().createData("FndEvent.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "FndEvent.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 8);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: FndEvent", false, 0, 1577, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 1861, 2094, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "FND_EVENT", false, 2129, 3044, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "FND_EVENT", false, 3047, 3122, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "&AO", false, 3125, 4663, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 4666, 4899, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.PACKAGE_BODY, "FND_EVENT_API", false, 4943, 53148, 50);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 5227, 5460, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_DEF, "Create_Custom_Trigger___", true, 5462, 5582, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 2, PlsqlBlockType.PROCEDURE_DEF, "Create_Custom_Triggers___", true, 5584, 5656, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_DEF, "Get_Trigger_Name___", true, 5658, 5767, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Remove_Custom_Trigger___", true, 5769, 5889, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 5, PlsqlBlockType.PROCEDURE_DEF, "Remove_Custom_Triggers___", true, 5891, 5963, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 6, PlsqlBlockType.FUNCTION_DEF, "Create_Trigger_Name___", true, 5965, 6042, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS ", true, 6043, 6918, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 8, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 6920, 8072, 5);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 7214, 7364, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 7368, 7456, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 7521, 7605, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(8).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 7691, 7772, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(8).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 7776, 7843, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 9, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 8074, 8705, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 8249, 8399, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 8464, 8537, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 8541, 8607, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 10, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 8707, 9114, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 8817, 8898, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 8954, 9052, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 11, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 9117, 9511, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 9268, 9395, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 12, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 9513, 9994, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 9641, 9776, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 9845, 9932, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 9996, 10457, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 10180, 10330, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 10459, 11204, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 11206, 11890, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 11893, 14969, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 12088, 14317, 15);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'EVENT_LU_NAME')", true, 12165, 12240, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_ID')", true, 12247, 12322, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_DESCRIPTION')", true, 12329, 12415, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_ENABLE')", true, 12422, 12498, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TABLE_NAME')", true, 12505, 12589, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TYPE')", true, 12596, 12796, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 12705, 12796, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TYPE_DB')", true, 12803, 12982, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 12888, 12982, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFIED_ATTRIBUTES')", true, 12989, 13079, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'NEW_ROW')", true, 13086, 13274, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 13186, 13274, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'NEW_ROW_DB')", true, 13281, 13451, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 13360, 13451, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFY_ROW')", true, 13458, 13652, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 13564, 13652, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFY_ROW_DB')", true, 13659, 13835, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 13744, 13835, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'REMOVE_ROW')", true, 13842, 14036, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 13948, 14036, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'REMOVE_ROW_DB')", true, 14043, 14219, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 14128, 14219, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSE", true, 14226, 14304, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 17, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 14972, 16385, 6);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 15241, 15243, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (nvl(newrec_.event_enable, 'FALSE') = 'TRUE')", true, 15247, 15409, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "COMMENT...", true, 15413, 15415, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 3, PlsqlBlockType.STATEMENT, "INSERT", true, 15419, 16093, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Create Custom Defined triggers", true, 16098, 16131, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (newrec_.event_type = 'CUSTOM')", true, 16135, 16290, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(17).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.event_enable = 'TRUE')", true, 16181, 16279, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 18, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 16387, 16971, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 16973, 19888, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 17196, 19452, 15);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'EVENT_LU_NAME')", true, 17273, 17365, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_ID')", true, 17372, 17457, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_DESCRIPTION')", true, 17464, 17550, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_ENABLE')", true, 17557, 17633, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TABLE_NAME')", true, 17640, 17724, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TYPE')", true, 17731, 17931, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 17840, 17931, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'EVENT_TYPE_DB')", true, 17938, 18117, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 18023, 18117, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFIED_ATTRIBUTES')", true, 18124, 18214, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'NEW_ROW')", true, 18221, 18409, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 18321, 18409, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'NEW_ROW_DB')", true, 18416, 18586, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 18495, 18586, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFY_ROW')", true, 18593, 18787, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 18699, 18787, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'MODIFY_ROW_DB')", true, 18794, 18970, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 18879, 18970, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'REMOVE_ROW')", true, 18977, 19171, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 19083, 19171, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'REMOVE_ROW_DB')", true, 19178, 19354, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 19263, 19354, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSE", true, 19361, 19439, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 19891, 22450, 7);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_event_count", true, 20152, 20350, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (nvl(oldrec_.event_enable, 'FALSE') = 'FALSE' AND newrec_.event_enable = 'TRUE')", true, 20360, 20700, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dummy_ = 0)", true, 20554, 20689, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "COMMENT...", true, 20704, 20706, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  by_keys_", true, 20810, 21460, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE fnd_event_tab", true, 20833, 21459, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 21464, 22051, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE fnd_event_tab", true, 21475, 22039, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Create/remove Custom Defined triggers", true, 22055, 22095, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (newrec_.event_type = 'CUSTOM')", true, 22099, 22355, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.event_enable = 'TRUE')", true, 22145, 22274, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(20).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 22281, 22344, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 21, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 22452, 23049, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 22, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 23051, 23289, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 23292, 23734, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 23525, 23585, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(23).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Remove Custom Defined triggers", true, 23590, 23623, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(23).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (remrec_.event_type = 'CUSTOM')", true, 23627, 23719, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 23736, 26037, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 25, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 26039, 26334, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 26, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 26337, 26941, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 26610, 26671, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(26).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 26675, 26751, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(26).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 26755, 26893, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 27, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 26944, 27666, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 27250, 27377, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(27).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 27381, 27615, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 28, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 27669, 28221, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(28).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 27904, 28009, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(28).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 28013, 28170, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 29, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 28223, 28676, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 30, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 28678, 28953, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(30).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(event_lu_name_, event_id_))", true, 28832, 28942, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 31, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 28955, 29188, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 32, PlsqlBlockType.PROCEDURE_IMPL, "Create_Custom_Triggers___", true, 29190, 29720, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(32).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Create triggers per type (New, Modify, Remove)", true, 29355, 29404, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(32).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (rec_.new_row = 'TRUE')", true, 29408, 29495, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(32).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_.modify_row = 'TRUE')", true, 29499, 29592, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(32).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (rec_.remove_row = 'TRUE')", true, 29596, 29689, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 33, PlsqlBlockType.PROCEDURE_IMPL, "Create_Custom_Trigger___", true, 29722, 38974, 18);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 30211, 30213, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_param", true, 30217, 30363, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "COMMENT...", true, 30367, 30369, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_IMPL, "space___", true, 30373, 30539, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "COMMENT...", true, 30543, 30545, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_IMPL, "Get_Dml_Event___", true, 30549, 30884, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  trigger_type_\n         WHEN 'NEW'", true, 30654, 30727, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN 'MODIFY'", true, 30737, 30785, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.CASE, "WHEN 'REMOVE'", true, 30795, 30859, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "COMMENT...", true, 30888, 30890, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 7, PlsqlBlockType.FUNCTION_IMPL, "Get_Columns___", true, 30894, 32204, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  column_list_ IS NULL", true, 31323, 31392, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Find all attributes in Search Domain Title", true, 31399, 31444, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks(), 2, PlsqlBlockType.LOOP, "", true, 31508, 32157, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find column name", true, 31522, 31541, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  column_name_ IS NOT NULL", true, 31625, 31745, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Find new attribute", true, 31755, 31776, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  pos_ = 0", true, 31879, 32141, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Find column name", true, 31954, 31973, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "COMMENT...", true, 32208, 32210, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 9, PlsqlBlockType.FUNCTION_IMPL, "Create_If_Stmt___", true, 32214, 34491, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  column_list_ IS NULL", true, 32715, 32780, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Find all attributes in Search Domain Title", true, 32787, 32832, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (tmp_column_list_ IS NOT NULL)", true, 32918, 33004, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.LOOP, "", true, 33011, 34444, 5);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (i_ > 1)", true, 33025, 33113, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Find column name", true, 33123, 33142, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  column_name_ IS NOT NULL", true, 33226, 33623, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Find new attribute", true, 33633, 33654, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  pos_ = 0", true, 33784, 34428, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (i_ > 1 AND found_)", true, 33813, 33918, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(9).getChildBlocks().get(3).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Find column name", true, 33977, 33996, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "COMMENT...", true, 34495, 34497, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 11, PlsqlBlockType.FUNCTION_IMPL, "Replace_Parameter___", true, 34501, 35656, 5);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 34766, 34768, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_param", true, 34775, 34933, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (pos_ = 0)", true, 34994, 35052, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Replace all parameters used as parameters to PL/SQL method", true, 35059, 35120, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "par IN get_param", true, 35127, 35604, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  par.current_value = 'TRUE'", true, 35162, 35312, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  par.new_value = 'TRUE'", true, 35322, 35468, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(11).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  pos_ = 0", true, 35526, 35588, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 12, PlsqlBlockType.CASE, "CASE  trigger_type_\n      WHEN 'NEW'", true, 35763, 35881, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 13, PlsqlBlockType.CASE, "WHEN 'MODIFY'", true, 35888, 36353, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Build If statement for modify", true, 35994, 36026, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (if_stmt_start_ IS NOT NULL)", true, 36108, 36219, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(13).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 36229, 36319, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 14, PlsqlBlockType.CASE, "WHEN 'REMOVE'", true, 36360, 36469, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "-- Build PL/SQL statement", true, 36473, 36498, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 16, PlsqlBlockType.FOR_LOOP, "par_ IN get_param", true, 37005, 38309, 7);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (par_.id_type = 'DATETIME')", true, 37038, 37174, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (par_.id_type = 'DATE')", true, 37181, 37312, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (par_.id_type = 'TIME')", true, 37319, 37450, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 37457, 37543, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "COMMENT...", true, 37550, 37552, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  par_.plsql_method IS NOT NULL", true, 37559, 37803, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 37810, 38296, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  par_.current_value = 'TRUE'", true, 37824, 38050, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks().get(16).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  par_.new_value = 'TRUE'", true, 38060, 38282, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(33).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "COMMENT...", true, 38703, 38705, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 34, PlsqlBlockType.FUNCTION_IMPL, "Get_Trigger_Name___", true, 38976, 39426, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(34).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  trigger_type_\n      WHEN 'NEW'", true, 39097, 39204, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(34).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN 'MODIFY'", true, 39211, 39296, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(34).getChildBlocks(), 2, PlsqlBlockType.CASE, "WHEN 'REMOVE'", true, 39303, 39401, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 35, PlsqlBlockType.PROCEDURE_IMPL, "Remove_Custom_Triggers___", true, 39428, 39958, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(35).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Create triggers per type (New, Modify, Remove)", true, 39593, 39642, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(35).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (rec_.new_row = 'TRUE')", true, 39646, 39733, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(35).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_.modify_row = 'TRUE')", true, 39737, 39830, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(35).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (rec_.remove_row = 'TRUE')", true, 39834, 39927, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 36, PlsqlBlockType.PROCEDURE_IMPL, "Remove_Custom_Trigger___", true, 39960, 40323, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(36).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 40112, 40114, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 37, PlsqlBlockType.FUNCTION_IMPL, "Create_Trigger_Name___", true, 40325, 40707, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 38, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 40708, 40941, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 39, PlsqlBlockType.PROCEDURE_IMPL, "Export__", true, 40943, 45806, 7);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_param", true, 41203, 41391, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Fetch the event details", true, 41459, 41485, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Only allowed to export Custom Events", true, 41553, 41592, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (nvl(rec.event_type, 'APPLICATION') != 'CUSTOM')", true, 41596, 41763, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Create Export file", true, 41767, 41800, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Create Main Message", true, 43274, 43308, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(39).getChildBlocks(), 6, PlsqlBlockType.FOR_LOOP, "rec2 IN get_param", true, 44698, 45652, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 40, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 45808, 46277, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 41, PlsqlBlockType.FUNCTION_IMPL, "Get_Event_Description", true, 46279, 46699, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(41).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 46438, 46582, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 42, PlsqlBlockType.FUNCTION_IMPL, "Get_Event_Enable", true, 46702, 47171, 3);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(42).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 46851, 46990, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(42).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  temp_ IS NULL", true, 47067, 47110, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(42).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 47114, 47149, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 43, PlsqlBlockType.PROCEDURE_IMPL, "Set_Event_Enable", true, 47174, 48557, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(43).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (event_id_ <> upper(event_id_))", true, 47534, 47695, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(43).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "SELECT COUNT(*)", true, 47699, 47870, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(43).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (temp_ > 0)", true, 47954, 48244, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(43).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 48248, 48535, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 44, PlsqlBlockType.PROCEDURE_IMPL, "Refresh", true, 48560, 50005, 4);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (event_id_ <> upper(event_id_))", true, 49095, 49256, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "SELECT COUNT(*)", true, 49260, 49383, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (temp_ = 0)", true, 49388, 49818, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO fnd_event_tab", true, 49414, 49817, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 49822, 49992, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(44).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE fnd_event_tab", true, 49833, 49980, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 45, PlsqlBlockType.PROCEDURE_IMPL, "Register_Custom_Event", true, 50007, 51787, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(45).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Check_Exist___(event_lu_name_, event_id_))", true, 51447, 51709, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(45).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM fnd_event_tab WHERE event_lu_name = event_lu_name_ AND event_id = event_id_", true, 51505, 51592, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(45).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "DELETE FROM fnd_event_parameter_tab WHERE event_lu_name = event_lu_name_ AND event_id = event_id_", true, 51600, 51697, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 46, PlsqlBlockType.PROCEDURE_IMPL, "Unfresh", true, 51789, 52246, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(46).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT COUNT(*)", true, 51958, 52083, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(46).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (temp_ > 0)", true, 52088, 52233, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM fnd_event_tab", true, 52114, 52221, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 47, PlsqlBlockType.FUNCTION_IMPL, "Get", true, 52249, 52624, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(47).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 52367, 52525, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 48, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 52628, 53092, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 49, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 53094, 53136, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.COMMENT, "COMMENT...", false, 53270, 53347, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced9() throws IOException, BadLocationException {
        System.out.println("Advanced test case 9");
        FileObject fileObject = fs.getRoot().createData("IdentityPayInfo.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "IdentityPayInfo.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 52);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: IdentityPayInfo", false, 0, 9418, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 10475, 10708, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO", false, 10738, 12658, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO", false, 12661, 12739, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO", false, 12742, 16182, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.COMMENT, "-- Bug 77136, begin, Table join with supplier_info_tab, in order to get name and association no directly.", false, 16185, 16290, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_SU_QRY", false, 16325, 20258, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_SU_QRY", false, 20261, 20346, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_SU_QRY", false, 20349, 21761, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.COMMENT, "-- Bug 77136, end", false, 21763, 21996, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_CU_QRY", false, 22031, 27474, 0);
            assertBlock(lstBlockFac, 11, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_CU_QRY", false, 27477, 27562, 0);
            assertBlock(lstBlockFac, 12, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_CU_QRY", false, 27565, 30549, 0);
            assertBlock(lstBlockFac, 13, PlsqlBlockType.COMMENT, "-- Bug 69035, End;", false, 30551, 30587, 0);
            assertBlock(lstBlockFac, 14, PlsqlBlockType.COMMENT, "-- Bug 68653, Begin, Added new columns address and city", false, 30622, 30677, 0);
            assertBlock(lstBlockFac, 15, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_SUPP", false, 30678, 32224, 0);
            assertBlock(lstBlockFac, 16, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_SUPP", false, 32227, 32310, 0);
            assertBlock(lstBlockFac, 17, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_SUPP", false, 32313, 33373, 0);
            assertBlock(lstBlockFac, 18, PlsqlBlockType.COMMENT, "-- Bug 68653, End", false, 33375, 33392, 0);
            assertBlock(lstBlockFac, 19, PlsqlBlockType.COMMENT, "-- Bug 68653, Begin, Added new columns address and city", false, 33428, 33483, 0);
            assertBlock(lstBlockFac, 20, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_CUST", false, 33484, 34962, 0);
            assertBlock(lstBlockFac, 21, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_CUST", false, 34965, 35048, 0);
            assertBlock(lstBlockFac, 22, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_CUST", false, 35051, 36106, 0);
            assertBlock(lstBlockFac, 23, PlsqlBlockType.COMMENT, "-- Bug 68653, End", false, 36108, 36125, 0);
            assertBlock(lstBlockFac, 24, PlsqlBlockType.COMMENT, "-- Bug 68653, Begin, Added new columns address and city", false, 36159, 36214, 0);
            assertBlock(lstBlockFac, 25, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_LOV", false, 36215, 37137, 0);
            assertBlock(lstBlockFac, 26, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_LOV", false, 37140, 37231, 0);
            assertBlock(lstBlockFac, 27, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_LOV", false, 37234, 37844, 0);
            assertBlock(lstBlockFac, 28, PlsqlBlockType.COMMENT, "-- Bug 68653, End", false, 37846, 37863, 0);
            assertBlock(lstBlockFac, 29, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_ALL", false, 37898, 38508, 0);
            assertBlock(lstBlockFac, 30, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_ALL", false, 38511, 38593, 0);
            assertBlock(lstBlockFac, 31, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_ALL", false, 38596, 39033, 0);
            assertBlock(lstBlockFac, 32, PlsqlBlockType.VIEW, "IDENTITY_PAY_INFO_PCT", false, 39067, 40386, 0);
            assertBlock(lstBlockFac, 33, PlsqlBlockType.TABLE_COMMENT, "IDENTITY_PAY_INFO_PCT", false, 40389, 40470, 0);
            assertBlock(lstBlockFac, 34, PlsqlBlockType.COLUMN_COMMENT, "IDENTITY_PAY_INFO_PCT", false, 40473, 43144, 0);
            assertBlock(lstBlockFac, 35, PlsqlBlockType.COMMENT, "-- Bug 69035, Begin, Added reminder_template_id,interest_template_id and their descriptions   ", false, 43185, 43279, 0);
            assertBlock(lstBlockFac, 36, PlsqlBlockType.VIEW, "PAYER_INFO_QRY", false, 43280, 45980, 0);
            assertBlock(lstBlockFac, 37, PlsqlBlockType.TABLE_COMMENT, "PAYER_INFO_QRY", false, 45983, 46071, 0);
            assertBlock(lstBlockFac, 38, PlsqlBlockType.COLUMN_COMMENT, "PAYER_INFO_QRY", false, 46074, 47822, 0);
            assertBlock(lstBlockFac, 39, PlsqlBlockType.COMMENT, "-- Bug 69035, End", false, 47824, 47841, 0);
            assertBlock(lstBlockFac, 40, PlsqlBlockType.VIEW, "MULTI_CUS_DETAILS_QRY", false, 47881, 48808, 0);
            assertBlock(lstBlockFac, 41, PlsqlBlockType.TABLE_COMMENT, "MULTI_CUS_DETAILS_QRY", false, 48811, 48901, 0);
            assertBlock(lstBlockFac, 42, PlsqlBlockType.COLUMN_COMMENT, "MULTI_CUS_DETAILS_QRY", false, 48904, 49453, 0);
            assertBlock(lstBlockFac, 43, PlsqlBlockType.VIEW, "MULTI_SUP_DETAILS_QRY", false, 49498, 50374, 0);
            assertBlock(lstBlockFac, 44, PlsqlBlockType.TABLE_COMMENT, "MULTI_SUP_DETAILS_QRY", false, 50377, 50467, 0);
            assertBlock(lstBlockFac, 45, PlsqlBlockType.COLUMN_COMMENT, "MULTI_SUP_DETAILS_QRY", false, 50470, 50913, 0);
            assertBlock(lstBlockFac, 46, PlsqlBlockType.VIEW, "MULTI_SUP_ADDRESS_QRY", false, 50954, 51642, 0);
            assertBlock(lstBlockFac, 47, PlsqlBlockType.TABLE_COMMENT, "MULTI_SUP_ADDRESS_QRY", false, 51645, 51735, 0);
            assertBlock(lstBlockFac, 48, PlsqlBlockType.COLUMN_COMMENT, "MULTI_SUP_ADDRESS_QRY", false, 51738, 52176, 0);
            assertBlock(lstBlockFac, 49, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 52179, 52412, 0);
            assertBlock(lstBlockFac, 50, PlsqlBlockType.PACKAGE_BODY, "IDENTITY_PAY_INFO_API", false, 52451, 146515, 93);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 52491, 52724, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_DEF, "Save_Identity_Notes___", true, 52725, 52823, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_DEF, "Get_Next_Format_No___", true, 52825, 52904, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 3, PlsqlBlockType.PROCEDURE_DEF, "Check_Cascade___", true, 52906, 53029, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Import___", true, 53031, 53125, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 5, PlsqlBlockType.PROCEDURE_DEF, "Copy___", true, 53127, 53221, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_DEF, "Export___", true, 53223, 53319, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 7, PlsqlBlockType.PROCEDURE_DEF, "User_Allowed___", true, 53321, 53375, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS ", true, 53381, 54256, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 9, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 54258, 55408, 5);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 54550, 54700, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 54704, 54792, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 54857, 54941, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 55027, 55108, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(9).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 55112, 55179, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 10, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 55410, 56100, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 55616, 55794, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 55859, 55932, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(10).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 55936, 56002, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 11, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 56102, 56509, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 56212, 56293, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(11).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 56349, 56447, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 12, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 56511, 56964, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 56693, 56848, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 13, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 56966, 57506, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 57125, 57288, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 57357, 57444, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 57508, 58032, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 57727, 57905, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 58034, 58779, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 58781, 60476, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Default value 'No Advice'", true, 59354, 59391, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (party_type_ = Party_Type_API.Decode('CUSTOMER'))", true, 59479, 59904, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(16).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (party_type_ = Party_Type_API.Decode('SUPPLIER') )", true, 59908, 60142, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 17, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 60479, 68330, 6);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 60674, 66347, 30);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'COMPANY')", true, 60751, 60896, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'IDENTITY')", true, 60903, 60971, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'PARTY_TYPE')", true, 60978, 61318, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.party_type <> 'COMPANY')", true, 61172, 61318, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'PARTY_TYPE_DB')", true, 61325, 61706, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.party_type <> Party_Type_API.Decode('COMPANY'))", true, 61534, 61706, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'PRIORITY')", true, 61713, 61814, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'BLOCKED_FOR_PAYMENT')", true, 61821, 62054, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL AND newrec_.blocked_for_payment NOT IN ('TRUE', 'FALSE'))", true, 61921, 62054, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'OTHER_PAYEE_IDENTITY')", true, 62061, 62339, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 62163, 62339, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'INTEREST_TEMPLATE')", true, 62346, 62572, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 62442, 62572, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'REMINDER_TEMPLATE')", true, 62579, 62805, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 62675, 62805, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_DELAY')", true, 62812, 63133, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (TRUNC(newrec_.payment_delay) <> newrec_.payment_delay)", true, 62933, 63133, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'AMOUNT_TOLERANCE')", true, 63140, 63257, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'PERCENT_TOLERANCE')", true, 63264, 63383, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'DISC_DAYS_TOLERANCE')", true, 63390, 63513, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'NETTING_ALLOWED')", true, 63520, 63718, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.netting_allowed NOT IN ('TRUE', 'FALSE'))", true, 63612, 63718, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF (name_ = 'FORMAT_NO')", true, 63725, 63828, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 15, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_ADVICE')", true, 63835, 64043, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 63952, 64043, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 16, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_ADVICE_DB')", true, 64050, 64237, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 64143, 64237, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF (name_ = 'DEDUCTION_GROUP')", true, 64244, 64462, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 64336, 64462, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 18, PlsqlBlockType.IF, "ELSIF (name_ = 'CORPORATION_ID')", true, 64469, 64549, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 19, PlsqlBlockType.IF, "ELSIF (name_ = 'MEMBER_ID')", true, 64556, 64626, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 20, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_REMINDER_TO_PAYER')", true, 64633, 64729, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 21, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_INTEREST_INV_TO_PAYER')", true, 64736, 64840, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 22, PlsqlBlockType.IF, "ELSIF (name_ = 'RULE_ID')", true, 64847, 65041, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(22).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 64923, 65041, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 23, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_RECEIPT_TYPE')", true, 65048, 65280, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 65183, 65280, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 24, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_RECEIPT_TYPE_DB')", true, 65287, 65492, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(24).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 65392, 65492, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 25, PlsqlBlockType.IF, "ELSIF (name_ = 'TEMPLATE_ID')", true, 65499, 65714, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 65583, 65714, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 26, PlsqlBlockType.IF, "ELSIF (name_ = 'CHECK_RECIPIENT')", true, 65721, 65933, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 65841, 65933, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 27, PlsqlBlockType.IF, "ELSIF (name_ = 'CHECK_RECIPIENT_DB')", true, 65940, 66130, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 66035, 66130, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 28, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_STATEMENT_OF_ACC_TO_PAYER')", true, 66137, 66249, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(0).getChildBlocks(), 29, PlsqlBlockType.IF, "ELSE", true, 66256, 66334, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (newrec_.amount_tolerance < 0) OR (newrec_.percent_tolerance < 0) OR (newrec_.disc_days_tolerance < 0)", true, 66353, 66567, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (newrec_.interest_template IS NULL)", true, 66900, 67050, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'SUPPLIER')", true, 67055, 67359, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'CUSTOMER')", true, 67363, 67977, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Company_Invoice_Info_API.Get_Use_Tax_Invoice(newrec_.company)='TRUE' AND newrec_.payment_receipt_type != 'AT_MATCHING'", true, 67687, 67966, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(17).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (newrec_.identity = newrec_.other_payee_identity)", true, 68052, 68212, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 68333, 70734, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_objid", true, 68496, 68677, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT", true, 68827, 70521, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 19, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 70736, 71320, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 71322, 78419, 6);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 71545, 76719, 32);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'COMPANY')", true, 71622, 71702, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'IDENTITY')", true, 71709, 71794, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'PARTY_TYPE')", true, 71801, 71890, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'PARTY_TYPE_DB')", true, 71897, 71989, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'PRIORITY')", true, 71996, 72097, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'BLOCKED_FOR_PAYMENT')", true, 72104, 72337, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL AND newrec_.blocked_for_payment NOT IN ('TRUE', 'FALSE'))", true, 72204, 72337, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'OTHER_PAYEE_IDENTITY')", true, 72344, 72622, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 72446, 72622, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'INTEREST_TEMPLATE')", true, 72629, 72855, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 72725, 72855, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'REMINDER_TEMPLATE')", true, 72862, 73088, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 72958, 73088, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_DELAY')", true, 73095, 73416, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (TRUNC(newrec_.payment_delay) <> newrec_.payment_delay)", true, 73216, 73416, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'AMOUNT_TOLERANCE')", true, 73423, 73540, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'PERCENT_TOLERANCE')", true, 73547, 73666, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'DISC_DAYS_TOLERANCE')", true, 73673, 73796, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'NETTING_ALLOWED')", true, 73803, 74001, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.netting_allowed NOT IN ('TRUE', 'FALSE'))", true, 73895, 74001, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF (name_ = 'FORMAT_NO')", true, 74008, 74095, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 15, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_ADVICE')", true, 74102, 74310, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 74219, 74310, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 16, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_ADVICE_DB')", true, 74317, 74504, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 74410, 74504, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF (name_ = 'DEDUCTION_GROUP')", true, 74511, 74729, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 74603, 74729, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 18, PlsqlBlockType.IF, "ELSIF (name_ = 'CORPORATION_ID')", true, 74736, 74816, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 19, PlsqlBlockType.IF, "ELSIF (name_ = 'MEMBER_ID')", true, 74823, 74893, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 20, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_REMINDER_TO_PAYER')", true, 74900, 74996, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 21, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_INTEREST_INV_TO_PAYER')", true, 75003, 75107, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 22, PlsqlBlockType.IF, "ELSIF (name_ = 'NOTE')", true, 75114, 75156, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 23, PlsqlBlockType.IF, "ELSIF (name_ = 'NOTE_UPDATE')", true, 75163, 75212, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 24, PlsqlBlockType.IF, "ELSIF (name_ = 'RULE_ID')", true, 75219, 75413, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(24).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 75295, 75413, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 25, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_RECEIPT_TYPE')", true, 75420, 75652, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 75555, 75652, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 26, PlsqlBlockType.IF, "ELSIF (name_ = 'PAYMENT_RECEIPT_TYPE_DB')", true, 75659, 75864, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 75764, 75864, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 27, PlsqlBlockType.IF, "ELSIF (name_ = 'TEMPLATE_ID')", true, 75871, 76086, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 75955, 76086, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 28, PlsqlBlockType.IF, "ELSIF (name_ = 'CHECK_RECIPIENT')", true, 76093, 76305, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(28).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 76213, 76305, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 29, PlsqlBlockType.IF, "ELSIF (name_ = 'CHECK_RECIPIENT_DB')", true, 76312, 76502, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks().get(29).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 76407, 76502, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 30, PlsqlBlockType.IF, "ELSIF (name_ = 'SEND_STATEMENT_OF_ACC_TO_PAYER')", true, 76509, 76621, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 31, PlsqlBlockType.IF, "ELSE", true, 76628, 76706, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (newrec_.amount_tolerance < 0) OR (newrec_.percent_tolerance < 0) OR (newrec_.disc_days_tolerance < 0)", true, 76725, 76939, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (newrec_.interest_template IS NULL)", true, 77061, 77211, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'SUPPLIER')", true, 77216, 77520, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'CUSTOMER')", true, 77524, 78138, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Company_Invoice_Info_API.Get_Use_Tax_Invoice(newrec_.company)='TRUE' AND newrec_.payment_receipt_type != 'AT_MATCHING'", true, 77848, 78127, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(20).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (newrec_.identity = newrec_.other_payee_identity)", true, 78142, 78302, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 78422, 82036, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  by_keys_", true, 78770, 80404, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(21).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE identity_pay_info_tab", true, 78793, 80403, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(21).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 80408, 81941, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(21).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE identity_pay_info_tab", true, 80419, 81929, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 22, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 82038, 82635, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 82637, 82921, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 24, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 82924, 83287, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(24).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 83203, 83271, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 25, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 83289, 85590, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 26, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 85592, 85887, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 27, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 85890, 86494, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 86163, 86224, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(27).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 86228, 86304, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(27).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 86308, 86446, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 28, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 86496, 87267, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(28).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 86802, 86929, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(28).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 86933, 87216, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 29, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 87270, 87822, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(29).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 87505, 87610, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(29).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 87614, 87771, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 30, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 87824, 88277, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 31, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 88279, 89266, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(company_, identity_, Party_Type_API.Encode(party_type_)))", true, 88455, 89255, 4);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 72612, Begin, Modified IF condition", true, 88547, 88589, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  Party_Type_API.Encode(party_type_) IN ('CUSTOMER', 'SUPPLIER')", true, 88596, 88947, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 72612, End.", true, 88830, 88947, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (Party_Type_API.Encode(party_type_) = 'COMPANY')", true, 88957, 89172, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 72612, End.", true, 89154, 89172, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(31).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 89179, 89244, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 32, PlsqlBlockType.PROCEDURE_IMPL, "Exist_Db", true, 89269, 89871, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(32).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(company_, identity_, party_type_db_))", true, 89457, 89857, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(32).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  party_type_db_ IN ('CUSTOMER', 'SUPPLIER', 'COMPANY')", true, 89529, 89774, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(32).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 89781, 89846, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 33, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 89873, 90106, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 34, PlsqlBlockType.PROCEDURE_IMPL, "Save_Identity_Notes___", true, 90107, 90747, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(34).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ((note_ IS NULL) AND (note_update_ IS NULL))", true, 90398, 90475, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 35, PlsqlBlockType.FUNCTION_IMPL, "Get_Next_Format_No___", true, 90749, 91157, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(35).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "rec", true, 90834, 90929, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(35).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ( rec%NOTFOUND )", true, 91009, 91077, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 36, PlsqlBlockType.PROCEDURE_IMPL, "Check_Cascade___", true, 91159, 93974, 6);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_ledger_item1", true, 91288, 91518, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_ledger_item2", true, 91523, 91765, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_ledger_item3", true, 91770, 92012, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "ledger_item_ IN get_ledger_item1", true, 92022, 92662, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (ledger_item_.rowtype = 'InvoiceLedgerItem')", true, 92070, 92260, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (ledger_item_.rowtype = 'OnAccountLedgerItem')", true, 92267, 92479, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 92486, 92649, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "ledger_item_ IN get_ledger_item2", true, 92667, 93307, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (ledger_item_.rowtype = 'InvoiceLedgerItem')", true, 92715, 92905, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (ledger_item_.rowtype = 'OnAccountLedgerItem')", true, 92912, 93124, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 93131, 93294, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks(), 5, PlsqlBlockType.FOR_LOOP, "ledger_item_ IN get_ledger_item3", true, 93312, 93952, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (ledger_item_.rowtype = 'InvoiceLedgerItem')", true, 93360, 93550, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (ledger_item_.rowtype = 'OnAccountLedgerItem')", true, 93557, 93769, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(36).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 93776, 93939, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 37, PlsqlBlockType.PROCEDURE_IMPL, "Import___", true, 93976, 101666, 8);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_data", true, 94076, 94635, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 74138, Begin, Added condition to fetch data when party_type = 'COMPANY'  ", true, 94640, 94720, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "exist_company", true, 94724, 94865, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Bug 74138, End", true, 94869, 94886, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (NOT update_by_key_)", true, 95366, 95609, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( exist_company%NOTFOUND )", true, 95492, 95598, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  ( update_by_key_ OR empty_lu_ )", true, 95614, 101074, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN get_data", true, 95660, 100514, 12);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (newrec_.blocked_for_payment IS NOT NULL AND newrec_.blocked_for_payment NOT IN ('TRUE', 'FALSE'))", true, 97341, 97565, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (newrec_.other_payee_identity IS NOT NULL)", true, 97578, 97782, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (newrec_.interest_template IS NOT NULL)", true, 97795, 97950, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (newrec_.reminder_template IS NOT NULL)", true, 97963, 98118, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (TRUNC(newrec_.payment_delay) <> newrec_.payment_delay)", true, 98131, 98337, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (newrec_.netting_allowed NOT IN ('TRUE', 'FALSE'))", true, 98350, 98526, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (newrec_.payment_advice IS NOT NULL)", true, 98539, 98671, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (newrec_.deduction_group IS NOT NULL)", true, 98684, 98833, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (newrec_.payment_receipt_type IS NOT NULL)", true, 98846, 98996, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'SUPPLIER')", true, 99339, 99584, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (newrec_.party_type = 'CUSTOMER')", true, 99597, 99961, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (newrec_.identity = newrec_.other_payee_identity)", true, 100054, 100232, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ( i_ = 0 )", true, 100521, 100747, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 100754, 101063, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  msg_ IS NULL", true, 100768, 100904, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 100914, 101049, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- This statement is to add to the log that the Create company process for LUs is finished if", true, 101078, 101215, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(37).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  ( NOT update_by_key_ AND NOT empty_lu_ )", true, 101219, 101388, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 38, PlsqlBlockType.PROCEDURE_IMPL, "Copy___", true, 101669, 105604, 6);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_company", true, 101912, 102017, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_data", true, 102022, 102462, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (NOT update_by_key_)", true, 102630, 102873, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( exist_company%NOTFOUND )", true, 102756, 102862, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  ( update_by_key_ OR empty_lu_ )", true, 102878, 105014, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN get_data", true, 102924, 104893, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 102977, 104862, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- This statement is to add to the log that the Create company process for LUs is finished if", true, 105018, 105155, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(38).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  ( NOT update_by_key_ AND NOT empty_lu_ )", true, 105159, 105328, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 39, PlsqlBlockType.PROCEDURE_IMPL, "Export___", true, 105608, 107379, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(39).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_data", true, 105805, 105944, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(39).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "pctrec_ IN get_data", true, 106019, 107364, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 40, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 107381, 107614, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 41, PlsqlBlockType.PROCEDURE_IMPL, "Check_Cascade_Customer__", true, 107616, 108337, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(41).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "customer_in_company", true, 107682, 107919, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(41).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "comp_ IN customer_in_company (identity_, party_type_db_)", true, 108163, 108307, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 42, PlsqlBlockType.PROCEDURE_IMPL, "Check_Cascade_Supplier__", true, 108339, 109060, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(42).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "supplier_in_company", true, 108405, 108642, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(42).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "comp_ IN supplier_in_company (identity_, party_type_db_)", true, 108886, 109030, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 43, PlsqlBlockType.PROCEDURE_IMPL, "Cascade_Delete_Customer__", true, 109062, 109903, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(43).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "customer_in_company", true, 109234, 109520, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(43).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "comp_ IN customer_in_company (identity_, party_type_db_)", true, 109733, 109871, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 44, PlsqlBlockType.PROCEDURE_IMPL, "Cascade_Delete_Supplier__", true, 109905, 110746, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(44).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "supplier_in_company", true, 110077, 110363, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(44).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "comp_ IN supplier_in_company (identity_, party_type_db_)", true, 110576, 110714, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 45, PlsqlBlockType.FUNCTION_IMPL, "Create_Other_Payee_Attr__", true, 110748, 111408, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(45).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_supplier", true, 110893, 111096, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(45).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "supplier_info_ IN get_supplier", true, 111211, 111353, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 46, PlsqlBlockType.FUNCTION_IMPL, "Create_Cus_Other_Payee_Attr__", true, 111410, 112059, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(46).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_customer", true, 111559, 111739, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(46).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "customer_info_ IN get_customer", true, 111858, 112000, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 47, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 112060, 112529, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 48, PlsqlBlockType.FUNCTION_IMPL, "Get_Priority", true, 112531, 112802, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 49, PlsqlBlockType.FUNCTION_IMPL, "Get_Blocked_For_Payment", true, 112804, 113109, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 50, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Delay", true, 113111, 113404, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 51, PlsqlBlockType.FUNCTION_IMPL, "Get_Amount_Tolerance", true, 113406, 113700, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 52, PlsqlBlockType.FUNCTION_IMPL, "Get_Percent_Tolerance", true, 113702, 113999, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 53, PlsqlBlockType.FUNCTION_IMPL, "Get_Disc_Days_Tolerance", true, 114001, 114469, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(53).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 114179, 114350, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 54, PlsqlBlockType.FUNCTION_IMPL, "Get_Netting_Allowed", true, 114471, 115095, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(54).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 114648, 114847, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(54).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 114857, 114950, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 55, PlsqlBlockType.FUNCTION_IMPL, "Get_Check_Recipient", true, 115097, 115647, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(55).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 115269, 115468, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 56, PlsqlBlockType.FUNCTION_IMPL, "Get_Check_Recipient_Db", true, 115649, 116182, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(56).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 115829, 116028, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 57, PlsqlBlockType.FUNCTION_IMPL, "Get_Next_Pay_Matching_Id", true, 116184, 116803, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(57).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE identity_pay_info_tab", true, 116583, 116752, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 58, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Matching_Id", true, 116805, 117363, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(58).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_matching_id", true, 116947, 117124, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 59, PlsqlBlockType.FUNCTION_IMPL, "Get_Format_No", true, 117365, 117963, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(59).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 117528, 117721, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(59).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 117731, 117824, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 60, PlsqlBlockType.FUNCTION_IMPL, "Get_Other_Payee_Ded_Group_Desc", true, 117965, 118526, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(60).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (deduction_group_ IS NULL)", true, 118351, 118415, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 61, PlsqlBlockType.FUNCTION_IMPL, "Get_Deduction_Group", true, 118528, 119152, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(61).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 118705, 118904, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(61).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 118914, 119007, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 62, PlsqlBlockType.FUNCTION_IMPL, "Get_Template_Id", true, 119154, 119597, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(62).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 119323, 119486, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 63, PlsqlBlockType.FUNCTION_IMPL, "Get_Corporation_Id", true, 119599, 120219, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(63).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 119774, 119972, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(63).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 119982, 120075, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 64, PlsqlBlockType.FUNCTION_IMPL, "Get_Member_Id", true, 120221, 120821, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(64).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 120386, 120579, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(64).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 120589, 120682, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 65, PlsqlBlockType.FUNCTION_IMPL, "Get_Send_Reminder_To_Payer", true, 120823, 121475, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(65).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 121014, 121220, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(65).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 121230, 121323, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 66, PlsqlBlockType.FUNCTION_IMPL, "Get_Send_Interest_Inv_To_Payer", true, 121477, 122145, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(66).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 121676, 121886, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(66).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 121896, 121989, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 67, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Advice", true, 122147, 122789, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(67).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 122317, 122515, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(67).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 122525, 122618, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 68, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Advice_Db", true, 122791, 123412, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(68).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 122964, 123162, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(68).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 123172, 123265, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 69, PlsqlBlockType.FUNCTION_IMPL, "Get_Other_Payee_Identity", true, 123415, 123724, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 70, PlsqlBlockType.FUNCTION_IMPL, "Get_Interest_Template", true, 123726, 124024, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 71, PlsqlBlockType.FUNCTION_IMPL, "Get_Reminder_Template", true, 124026, 124325, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 72, PlsqlBlockType.FUNCTION_IMPL, "Get_Rule_Id", true, 124327, 124919, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(72).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 124488, 124679, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(72).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 124689, 124782, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 73, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Receipt_Type", true, 124921, 125501, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(73).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 125108, 125312, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 74, PlsqlBlockType.FUNCTION_IMPL, "Get_Payment_Receipt_Type_Db", true, 125503, 126056, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(74).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 125693, 125897, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 75, PlsqlBlockType.PROCEDURE_IMPL, "Instance_Exists", true, 126058, 126714, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(75).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 126209, 126404, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(75).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%FOUND)", true, 126588, 126633, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(75).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 126637, 126676, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 76, PlsqlBlockType.PROCEDURE_IMPL, "Create_Party_Type_Id", true, 126716, 127001, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 77, PlsqlBlockType.PROCEDURE_IMPL, "Create_Identity_Pay_Info", true, 127003, 129220, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (party_type_db_ = 'SUPPLIER')", true, 127803, 128026, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (party_type_db_ = 'CUSTOMER')", true, 128030, 128847, 6);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (def_template_ IS NULL)", true, 128154, 128219, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 128226, 128320, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (def_template_ IS NULL)", true, 128404, 128469, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 128476, 128570, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  Company_Invoice_Info_API.Get_Use_Tax_Invoice(company_) = 'TRUE'", true, 128577, 128730, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(77).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 128737, 128836, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 78, PlsqlBlockType.FUNCTION_IMPL, "Validate_Identity", true, 129222, 129847, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(78).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_identity", true, 129376, 129578, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(78).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_identity %FOUND)", true, 129685, 129778, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 79, PlsqlBlockType.PROCEDURE_IMPL, "Fetch_Tolerance", true, 129849, 132997, 8);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_identity_tolerance_", true, 130480, 130690, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_company_tolerance_", true, 130695, 130843, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  party_type_db_ = 'CUSTOMER'", true, 130978, 131477, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- general payment tolerance", true, 131185, 131213, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  percent_tolerance_ IS NULL AND amount_tolerance_acc_curr_ IS NULL", true, 131220, 131477, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF party_type_db_ = 'SUPPLIER'", true, 131482, 131733, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- general payment tolerance", true, 131524, 131552, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  action_ = 'NOCALCULATE'", true, 131738, 131849, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  acc_currency_ = currency_", true, 131924, 132037, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  ( (div_factor_ IS NULL) OR (currency_rate_ IS NULL))", true, 132105, 132443, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(79).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (date_ IS NOT NULL) AND ((div_factor_ IS NULL) OR (currency_rate_ IS NULL))", true, 132447, 132795, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 80, PlsqlBlockType.PROCEDURE_IMPL, "Copy_Payway_Per_Identity___", true, 132999, 133806, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(80).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pay_way", true, 133202, 133393, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(80).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "pay_way_ IN get_pay_way", true, 133403, 133773, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(80).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO PAYMENT_WAY_PER_IDENTITY_TAB (company, identity, party_type,", true, 133444, 133759, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 81, PlsqlBlockType.PROCEDURE_IMPL, "Copy_Payment_Address___", true, 133808, 135730, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(81).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pay_addr", true, 134007, 134190, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(81).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "pay_addr_ IN get_pay_addr", true, 134200, 135701, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(81).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 72177, Begin, Added bic_code", true, 134241, 134276, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(81).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT INTO PAYMENT_ADDRESS_TAB (company, identity, party_type, way_id,", true, 134283, 135662, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(81).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 72177, End", true, 135670, 135687, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 82, PlsqlBlockType.PROCEDURE_IMPL, "Copy_Customer", true, 135732, 139718, 4);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_customer", true, 135882, 136076, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_credit_info", true, 136081, 136239, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "customer_ IN get_customer", true, 136335, 138536, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 73125, Begin, Added template_id ", true, 136430, 136469, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT INTO IDENTITY_PAY_INFO_TAB (company, identity, party_type,", true, 136476, 138070, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 73125, End", true, 138078, 138095, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "credit_ IN get_credit_info", true, 138541, 139699, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(82).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO CUSTOMER_CREDIT_INFO_TAB (company, identity, last4q_sales,", true, 138583, 139685, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 83, PlsqlBlockType.PROCEDURE_IMPL, "Copy_Supplier", true, 139720, 141928, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(83).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_supplier", true, 139870, 140064, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(83).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "supplier_ IN get_supplier", true, 140285, 141909, 3);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(83).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 73125, Begin, Added template_id ", true, 140380, 140419, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(83).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT INTO IDENTITY_PAY_INFO_TAB (company, identity, party_type,", true, 140426, 141445, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(83).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 73125, End", true, 141453, 141470, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 84, PlsqlBlockType.FUNCTION_IMPL, "Get", true, 141930, 142856, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(84).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 142084, 142659, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(84).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 142669, 142762, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 85, PlsqlBlockType.PROCEDURE_IMPL, "User_Allowed___", true, 142858, 143216, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(85).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT (company_finance_api.Is_User_Authorized(company_))", true, 143000, 143194, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 86, PlsqlBlockType.COMMENT, "-- Server", true, 143219, 143437, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 87, PlsqlBlockType.FUNCTION_IMPL, "Get_Group_For_Identity", true, 143438, 144049, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(87).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_group", true, 143612, 143800, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(87).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (get_group%NOTFOUND)", true, 143898, 143979, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 88, PlsqlBlockType.PROCEDURE_IMPL, "Make_Company", true, 144051, 144608, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(88).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (rec_.make_company = 'EXPORT')", true, 144328, 144389, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(88).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (rec_.make_company = 'IMPORT')", true, 144393, 144590, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(88).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (rec_.action = 'NEW')", true, 144441, 144496, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(88).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (rec_.action = 'DUPLICATE')", true, 144503, 144579, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 89, PlsqlBlockType.FUNCTION_IMPL, "Cust_Open_Items_Exist", true, 144610, 145567, 2);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(89).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 144737, 145266, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(89).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 145407, 145496, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 90, PlsqlBlockType.FUNCTION_IMPL, "Get_Send_Stmt_Of_Acc_To_Payer", true, 145569, 145994, 1);
            assertBlock(lstBlockFac.get(50).getChildBlocks().get(90).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Company_Finance_API.Is_User_Authorized(company_))", true, 145745, 145837, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 91, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 145995, 146459, 0);
            assertBlock(lstBlockFac.get(50).getChildBlocks(), 92, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 146461, 146503, 0);
            assertBlock(lstBlockFac, 51, PlsqlBlockType.COMMENT, "-- <UNDEFINE_SECTION>", false, 146530, 147081, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced10() throws IOException, BadLocationException {
        System.out.println("Advanced test case 10");
        FileObject fileObject = fs.getRoot().createData("InstallationSite.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "InstallationSite.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 11);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: InstallationSite", false, 0, 914, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 1271, 1504, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "USER_DB_LINKS_LOV", false, 1538, 1663, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "USER_DB_LINKS_LOV", false, 1666, 1748, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "USER_DB_LINKS_LOV", false, 1751, 1854, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.VIEW, "INSTALLATION_SITE", false, 1886, 2397, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.TABLE_COMMENT, "INSTALLATION_SITE", false, 2400, 2478, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.COLUMN_COMMENT, "INSTALLATION_SITE", false, 2481, 3004, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 3007, 3240, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.PACKAGE_BODY, "INSTALLATION_SITE_API", false, 3279, 25102, 30);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 3319, 4430, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 4432, 5584, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 4726, 4876, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 4880, 4968, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 5033, 5117, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 5203, 5284, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 5288, 5355, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 5586, 6135, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 5724, 5829, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 5894, 5967, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 5971, 6037, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 6137, 6544, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 6247, 6328, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 6384, 6482, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 4, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 6546, 6858, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 6660, 6742, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 6860, 7259, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 6951, 7041, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 7110, 7197, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 7261, 7623, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 7394, 7496, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 7625, 8370, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 8372, 8609, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 9, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 8612, 10236, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( (UPPER(NVL(value_, 'FALSE')) = 'TRUE') AND This_Site_Exist__ )", true, 8981, 9094, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 9115, 9726, 6);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'SITE_ID')", true, 9192, 9255, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'TIMEZONE_DIFFERENCE')", true, 9262, 9385, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'DESCRIPTION')", true, 9392, 9466, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'THIS_SITE')", true, 9473, 9543, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'DATABASE_LINK')", true, 9550, 9628, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 9635, 9713, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 10, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 10239, 11678, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( newrec_.timezone_difference IS NULL )", true, 10408, 10506, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ( NVL(newrec_.this_site,'FALSE') NOT IN ('TRUE','FALSE') )", true, 10510, 10623, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "INSERT", true, 10727, 11101, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 3, PlsqlBlockType.STATEMENT, "SELECT &OBJID", true, 11106, 11195, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Insert into the translation database", true, 11200, 11239, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 11680, 12264, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 12266, 13836, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( (UPPER(NVL(value_, 'FALSE')) = 'TRUE') AND (newrec_.this_site = 'FALSE') AND This_Site_Exist__ )", true, 12597, 12744, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 12765, 13393, 6);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'SITE_ID')", true, 12842, 12922, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'TIMEZONE_DIFFERENCE')", true, 12929, 13052, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'DESCRIPTION')", true, 13059, 13133, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'THIS_SITE')", true, 13140, 13210, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'DATABASE_LINK')", true, 13217, 13295, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 13302, 13380, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 13839, 15623, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( newrec_.timezone_difference IS NULL )", true, 14087, 14185, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ( NVL(newrec_.this_site,'FALSE') NOT IN ('TRUE','FALSE') )", true, 14189, 14302, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  by_keys_", true, 14406, 14771, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE installation_site_tab", true, 14429, 14770, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 14775, 15129, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE installation_site_tab", true, 14786, 15117, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Update the translation database if necessary", true, 15133, 15180, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 15625, 16222, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 16224, 16429, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 16432, 16862, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 16632, 16700, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Delete all existing translations for this record.", true, 16705, 16757, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 16864, 19165, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 19167, 19462, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 19465, 20069, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 19738, 19799, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 19803, 19879, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 19883, 20021, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 20072, 20794, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 20378, 20505, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 20509, 20743, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 20797, 21349, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 21032, 21137, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(21).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 21141, 21298, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 22, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 21351, 21804, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 21806, 22027, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(site_id_))", true, 21923, 22016, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 22029, 22498, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 25, PlsqlBlockType.FUNCTION_IMPL, "This_Site_Exist__", true, 22500, 22907, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "this_site_exist", true, 22569, 22662, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(25).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ( this_site_exist%FOUND )", true, 22735, 22816, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(25).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 22820, 22884, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 26, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 22909, 23142, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 27, PlsqlBlockType.FUNCTION_IMPL, "Get_Timezone_Difference_", true, 23144, 24344, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "local", true, 23344, 23445, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "remote", true, 23449, 23551, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  ( site_id_ IS NULL )", true, 23635, 23828, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( local%NOTFOUND )", true, 23733, 23809, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 23832, 24016, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ( remote%NOTFOUND )", true, 23908, 23985, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(27).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  ( ABS(timezone_difference_) > 24 )", true, 24020, 24113, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 28, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PUBLIC METHODS ", true, 24346, 25046, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 29, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 25048, 25090, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.COMMENT, "COMMENT...", false, 25117, 25194, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced11() throws IOException, BadLocationException {
        System.out.println("Advanced test case 11");
        FileObject fileObject = fs.getRoot().createData("OpPersDiaryCalculation.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "OpPersDiaryCalculation.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 4);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: OpPersDiaryCalculation", false, 0, 631, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 764, 997, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.PACKAGE_BODY, "OP_PERS_DIARY_CALCULATION_API", false, 1036, 36964, 30);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Private types", true, 1196, 1362, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Global variables", true, 1521, 1690, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 1957, 2190, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 3, PlsqlBlockType.PROCEDURE_DEF, "Calculate_Op_Hours___", true, 2192, 2379, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Convert_Group_Operations___", true, 2382, 2472, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 5, PlsqlBlockType.PROCEDURE_DEF, "Do_Wage_Rounding___", true, 2475, 2625, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_DEF, "Get_Diary___", true, 2628, 2703, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 7, PlsqlBlockType.PROCEDURE_DEF, "Get_Op_Data___", true, 2706, 2893, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_DEF, "Remove_Result___", true, 2896, 2964, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 9, PlsqlBlockType.PROCEDURE_DEF, "Save_Result___", true, 2967, 3033, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 10, PlsqlBlockType.PROCEDURE_DEF, "Set_Op_Error___", true, 3036, 3103, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 11, PlsqlBlockType.PROCEDURE_DEF, "Set_Op_Error_Labor___", true, 3108, 3181, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_DEF, "Update_Diary___", true, 3184, 3295, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 3299, 3532, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Calculate_Op_Hours___", true, 3534, 10949, 9);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 4303, 4378, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 4382, 4457, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 4461, 4536, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  op_diary_.reg_status = reg_status_.done", true, 4596, 4885, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (time_pers_diary_api.Reporting_Complete(op_diary_.company_id,  op_diary_.emp_no, \n            op_diary_.account_date, op_diary_.reg_status) = 'TRUE')", true, 4650, 4874, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. op_diary_.clocking.row_count", true, 4889, 5244, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.clocking.org_code(i_) IS NULL", true, 5107, 5231, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 5248, 5323, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 5327, 5402, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 5406, 5481, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks(), 8, PlsqlBlockType.WHILE_LOOP, "min_in_time_ < max_out_time_", true, 5521, 10922, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. op_diary_.clocking.row_count", true, 5604, 5836, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  min_in_time_ < op_diary_.clocking.stop_stamp(i_)", true, 5662, 5820, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. op_diary_.clocking.row_count", true, 5907, 6383, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  min_in_time_ < op_diary_.clocking.stop_stamp(i_)", true, 5965, 6367, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  cur_in_time_ = op_diary_.clocking.start_stamp(i_)", true, 6034, 6223, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 6236, 6350, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. op_diary_.clocking.row_count", true, 6427, 10872, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  cur_in_time_ = op_diary_.clocking.start_stamp(i_) AND\n            cur_in_time_ < op_diary_.clocking.stop_stamp(i_)", true, 6485, 10856, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. pers_diary_.result.row_count", true, 6854, 10774, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  wage_grp_ IN (wage_group_.normal, wage_group_.overtime, wage_group_.extra, wage_group_.increment, wage_group_.balance_accrual, wage_group_.info)", true, 7322, 7764, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT pers_diary_.result.wage_hol(j_)", true, 7493, 7764, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  in_time_ < out_time_", true, 7558, 7738, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF wage_grp_ = wage_group_.balance_withdrawal", true, 7780, 8930, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 64820, Begin", true, 7852, 7871, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  in_time_ < out_time_", true, 7890, 8871, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "k_ IN 1 .. pers_diary_.result.row_count", true, 7940, 8845, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  pers_wage_grp_ = wage_group_.normal AND\n                           in_time_  < pers_diary_.result.wage_ttime(k_) AND\n                           out_time_ > pers_diary_.result.wage_ftime(k_) AND\n                           pers_diary_.result.wage_hours(k_) > 0.005", true, 8088, 8814, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 64820, End", true, 8890, 8907, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  wage_hours_ > 0.005 OR wage_hours_ < -0.005", true, 8946, 10752, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "k_ IN 1 .. op_diary_.result.row_count", true, 9044, 9639, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_id_     = op_diary_.result.op_id(k_) AND\n                        info_code_ = op_diary_.result.info_code(k_) AND\n                        mch_code_  = op_diary_.result.mch_code(k_) AND\n                        org_code_  = op_diary_.result.org_code(k_) AND\n                        wage_grp_  = op_diary_.result.wage_group(k_) AND\n                        wage_code_ = op_diary_.result.wage_code(k_)", true, 9112, 9611, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(14).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  w_ < 0", true, 9658, 10615, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Convert_Group_Operations___", true, 10952, 13524, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Get_Operations", true, 11287, 11575, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. cnt_", true, 11624, 13491, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  grp_count_ > 0", true, 11953, 13478, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. grp_count_", true, 12013, 12122, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  sum_hours_ < 0.005", true, 12132, 12395, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 12171, 12221, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. grp_count_", true, 12234, 12329, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. grp_count_", true, 12405, 13415, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Do_Wage_Rounding___", true, 13527, 18839, 5);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT op_diary_.do_update", true, 13951, 14075, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 14079, 14154, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 14158, 14233, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 14237, 14312, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. pers_diary_.result.row_count", true, 14316, 18814, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  pers_diary_.result.wage_hours(i_) != 0 AND\n         NOT pers_diary_.result.wage_hol(i_)", true, 14371, 18801, 15);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. pers_diary_.result.row_count", true, 14622, 14981, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  pers_diary_.result.wage_grp(j_)  = wage_grp_ AND\n               pers_diary_.result.wage_code(j_) = wage_code_ AND\n               NOT pers_diary_.result.wage_hol(j_)", true, 14683, 14962, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. op_diary_.result.row_count", true, 15022, 15316, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(j_) = wage_grp_ AND\n               op_diary_.result.wage_code(j_)  = wage_code_", true, 15081, 15297, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 15326, 15401, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 15411, 15486, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 15496, 15571, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  pers_sum_hours_ - op_sum_hours_ < 0.011", true, 15619, 16150, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. op_diary_.result.row_count", true, 15710, 16133, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(j_) = wage_grp_ AND\n                  op_diary_.result.wage_code(j_)  = wage_code_", true, 15772, 16111, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 16208, 16283, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 16293, 16368, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 16378, 16453, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. op_diary_.result.row_count", true, 16491, 16995, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(j_) = wage_grp_ AND\n               op_diary_.result.wage_code(j_)  = wage_code_", true, 16550, 16976, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 17057, 17132, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 17142, 17217, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 17227, 17302, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.WHILE_LOOP, "diff_hours_ < -0.001", true, 17312, 18045, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. op_diary_.result.row_count", true, 17377, 17839, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(j_) = wage_grp_ AND\n                  op_diary_.result.wage_code(j_)  = wage_code_", true, 17439, 17817, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  w_ = 0", true, 17576, 17621, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 17640, 17794, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  wage_diff_(j_) < wage_diff_(w_)", true, 17666, 17768, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.WHILE_LOOP, "diff_hours_ > 0.001", true, 18055, 18787, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "j_ IN 1 .. op_diary_.result.row_count", true, 18119, 18581, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(14).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(j_) = wage_grp_ AND\n                  op_diary_.result.wage_code(j_)  = wage_code_", true, 18181, 18559, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(14).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  w_ = 0", true, 18318, 18363, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(14).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 18382, 18536, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(4).getChildBlocks().get(0).getChildBlocks().get(14).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  wage_diff_(j_) > wage_diff_(w_)", true, 18408, 18510, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 17, PlsqlBlockType.PROCEDURE_IMPL, "Get_Diary___", true, 18842, 24867, 24);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Get_Diary", true, 19013, 19333, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "Get_Clockings", true, 19337, 19925, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- FOR UPDATE OF rowversion NOWAIT;", true, 19932, 19966, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "Get_Result", true, 19970, 20220, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 20230, 20305, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 20309, 20384, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 20388, 20463, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  NOT found_", true, 20825, 20939, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  op_diary_.auth_id = 1", true, 20943, 21005, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  op_diary_.reg_status = reg_status_.OPEN", true, 21009, 21088, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  op_diary_.reg_status = reg_status_.ready", true, 21092, 21186, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  op_diary_.reg_status = reg_status_.modified", true, 21190, 21274, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 12, PlsqlBlockType.COMMENT, "COMMENT...", true, 21278, 21280, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "COMMENT...", true, 21832, 21834, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 22137, 22212, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 22216, 22291, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 16, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 22295, 22370, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 22374, 22449, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 18, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. op_diary_.clocking.row_count", true, 22479, 24358, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.clocking.start_stamp(i_) - op_diary_.clocking.stop_stamp(i_) > 0.001 AND\n         test_active_(Time_Reg_Error_API.CD_OVERLAP)", true, 22534, 22778, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "j_ IN  i_+1 .. op_diary_.clocking.row_count", true, 22785, 24124, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ((op_diary_.clocking.op_id(i_) = op_diary_.clocking.op_id(j_)) AND\n            (op_diary_.clocking.info_code(i_) = op_diary_.clocking.info_code(j_)) AND\n            (op_diary_.clocking.mch_code(i_)  = op_diary_.clocking.mch_code(j_)) )", true, 22847, 24108, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (op_diary_.clocking.labor_class_no(i_) != op_diary_.clocking.labor_class_no(j_))", true, 23103, 23402, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (op_diary_.clocking.work_center_no(i_) != op_diary_.clocking.work_center_no(j_))", true, 23415, 24090, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 61149, start", true, 23519, 23537, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (Op_Machine_Api.Work_Center_Exists(op_diary_.clocking.contract(i_), op_diary_.clocking.work_center_no(i_))='TRUE') AND \n                  (Op_Machine_Api.Work_Center_Exists(op_diary_.clocking.contract(j_), op_diary_.clocking.work_center_no(j_))='TRUE')", true, 23553, 24038, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 61149, end", true, 24054, 24070, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (NOT (error_exist_))", true, 24131, 24253, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(18).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (op_diary_.clocking.error_no(i_) != 0)", true, 24260, 24345, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 19, PlsqlBlockType.IF, "IF  block_ AND op_diary_.do_update", true, 24362, 24511, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 20, PlsqlBlockType.IF, "IF  skip_", true, 24515, 24580, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 21, PlsqlBlockType.IF, "IF  block_", true, 24584, 24686, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 22, PlsqlBlockType.IF, "IF  op_diary_.clocking.row_count > 0", true, 24690, 24776, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 23, PlsqlBlockType.IF, "IF  op_diary_.clocking.row_count = 0", true, 24780, 24849, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Get_Op_Data___", true, 24870, 27367, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Get_Calc_Param", true, 25307, 25548, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  work_sched_.rule_type IS NOT NULL", true, 25941, 26114, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  calc_param_type_ IS NOT NULL", true, 26182, 26563, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "p_ IN Get_Calc_Param", true, 26225, 26552, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.CASE, "CASE  p_.param_label\n         WHEN time_param_label_.min_op_diff", true, 26264, 26384, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.CASE, "WHEN time_param_label_.max_op_diff", true, 26394, 26485, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.CASE, "ELSE", true, 26495, 26536, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 3, PlsqlBlockType.FOR_LOOP, "i_ IN 1 .. pers_diary_.result.row_count", true, 26602, 27282, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  wage_hours_ > 0.001 OR wage_hours_ < -0.001", true, 26713, 27269, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  wage_grp_ IN (wage_group_.normal, wage_group_.overtime, wage_group_.extra, wage_group_.balance_accrual)", true, 26829, 27097, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  NOT pers_diary_.result.wage_hol(i_)", true, 26953, 27097, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF wage_grp_ = wage_group_.balance_withdrawal", true, 27107, 27255, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "Remove_Result___", true, 27370, 27700, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.row_count_read > 0 AND op_diary_.do_update", true, 27450, 27678, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(19).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 27580, 27666, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Save_Result___", true, 27703, 29051, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.row_count > 0", true, 27781, 29031, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(20).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 27877, 29019, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Set_Op_Error___", true, 29054, 29738, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.clocking.row_count > 0", true, 29167, 29671, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 61149, start", true, 29214, 29232, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  op_diary_.error_no IS NOT NULL", true, 29239, 29637, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE op_clocking_tab", true, 29346, 29605, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(21).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 61149, end", true, 29644, 29660, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 22, PlsqlBlockType.PROCEDURE_IMPL, "Set_Op_Error_Labor___", true, 29740, 30401, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(22).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.clocking.row_count > 0", true, 29859, 30328, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(22).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 61149, start", true, 29906, 29924, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(22).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  op_diary_.error_no IS NOT NULL", true, 29931, 30294, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(22).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE op_clocking_tab", true, 30038, 30262, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(22).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 61149, end", true, 30301, 30317, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Update_Diary___", true, 30404, 31869, 7);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "w_ IN 1 .. op_diary_.result.row_count", true, 30801, 31083, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  op_diary_.result.wage_group(w_) IN (wage_group_.normal, wage_group_.overtime, wage_group_.balance_accrual, wage_group_.extra)", true, 30854, 31070, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  op_diary_.clocking.row_count > 0", true, 31132, 31337, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE op_pers_diary_tab", true, 31179, 31325, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 31341, 31416, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 31420, 31495, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 31499, 31574, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 31578, 31653, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(23).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  op_diary_.error_no != 0 AND op_diary_.clocking.row_count_read > 0", true, 31657, 31848, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 31873, 32106, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 25, PlsqlBlockType.PROCEDURE_IMPL, "Calculate_Op__", true, 32108, 35044, 21);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32346, 32421, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32425, 32500, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32504, 32579, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32837, 32912, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32916, 32991, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 32995, 33070, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33155, 33230, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33234, 33309, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33313, 33388, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33543, 33618, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33622, 33697, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33701, 33776, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 12, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33883, 33958, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 33962, 34037, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 34041, 34116, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 15, PlsqlBlockType.IF, "IF  history_enabled_", true, 34120, 34194, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 16, PlsqlBlockType.IF, "IF  history_enabled_", true, 34266, 34346, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 17, PlsqlBlockType.IF, "IF  history_enabled_", true, 34413, 34493, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 18, PlsqlBlockType.IF, "IF  history_enabled_", true, 34594, 34674, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 19, PlsqlBlockType.IF, "IF  test_active_(Time_Reg_Error_API.CD_ORACLE)", true, 34775, 34937, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(25).getChildBlocks(), 20, PlsqlBlockType.IF, "IF  history_enabled_", true, 34944, 35024, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 26, PlsqlBlockType.FUNCTION_IMPL, "Get_Op_Clocking_Count__", true, 35047, 35503, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 27, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 35507, 36443, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 28, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 36445, 36487, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 29, PlsqlBlockType.COMMENT, "-- Initialize", true, 36488, 36649, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.COMMENT, "COMMENT...", false, 37022, 37099, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced12() throws IOException, BadLocationException {
        System.out.println("Advanced test case 12");
        FileObject fileObject = fs.getRoot().createData("ScorecardInputValue.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "ScorecardInputValue.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 22);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: ScorecardInputValue", false, 0, 9500, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 10185, 10418, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "SCORECARD_INPUT_VALUE", false, 10448, 12414, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "SCORECARD_INPUT_VALUE", false, 12417, 12499, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "SCORECARD_INPUT_VALUE", false, 12502, 15678, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.VIEW, "SCORECARD_INPUT_VALUE2", false, 15711, 19054, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.TABLE_COMMENT, "SCORECARD_INPUT_VALUE2", false, 19057, 19140, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.COLUMN_COMMENT, "SCORECARD_INPUT_VALUE2", false, 19143, 22130, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.VIEW, "SCORECARD_INPUT_VALUE3", false, 22164, 26175, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.TABLE_COMMENT, "SCORECARD_INPUT_VALUE3", false, 26178, 26261, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.COLUMN_COMMENT, "SCORECARD_INPUT_VALUE3", false, 26264, 29576, 0);
            assertBlock(lstBlockFac, 11, PlsqlBlockType.COMMENT, "-- THIS VIEW IS USED AS A BASE FOR THE VIEW5 WHICH IS USED TO DISPLAY BUDGET REQUIREMENTS VS. TARGETS.", false, 29579, 29680, 0);
            assertBlock(lstBlockFac, 12, PlsqlBlockType.VIEW, "SCORECARD_INPUT_VALUE_BUDPRO1", false, 29710, 34571, 0);
            assertBlock(lstBlockFac, 13, PlsqlBlockType.TABLE_COMMENT, "SCORECARD_INPUT_VALUE_BUDPRO1", false, 34574, 34674, 0);
            assertBlock(lstBlockFac, 14, PlsqlBlockType.COMMENT, "-- THIS VIEW IS USED TO DISPLAY BUDGET REQUIREMENTS VS. TARGETS.[Client is BudgetRequirementsTargets.java]", false, 34678, 34783, 0);
            assertBlock(lstBlockFac, 15, PlsqlBlockType.COMMENT, "-- Bug 63415, begin, Added another condition to where clause of the view", false, 34812, 34884, 0);
            assertBlock(lstBlockFac, 16, PlsqlBlockType.VIEW, "SCORECARD_INPUT_VALUE_BUDPRO2", false, 34885, 37863, 0);
            assertBlock(lstBlockFac, 17, PlsqlBlockType.TABLE_COMMENT, "SCORECARD_INPUT_VALUE_BUDPRO2", false, 37866, 37960, 0);
            assertBlock(lstBlockFac, 18, PlsqlBlockType.COLUMN_COMMENT, "SCORECARD_INPUT_VALUE_BUDPRO2", false, 37963, 38707, 0);
            assertBlock(lstBlockFac, 19, PlsqlBlockType.COMMENT, "-- Bug 63415, end", false, 38710, 38983, 0);
            assertBlock(lstBlockFac, 20, PlsqlBlockType.PACKAGE_BODY, "SCORECARD_INPUT_VALUE_API", false, 39022, 275644, 102);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- FINITE STATE DECLARATIONS ", true, 39062, 39295, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 39690, 39923, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 2, PlsqlBlockType.PROCEDURE_DEF, "Distribute_Input_Values___", true, 39926, 40160, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- PROCHEAD.Start_Publish_Environments___", true, 40161, 40201, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Object_Planned_Date___", true, 40204, 40298, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_DEF, "Find_Column___", true, 40300, 40545, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS ", true, 40546, 41421, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 7, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 41423, 42575, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 41717, 41867, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 41871, 41959, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(7).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 42024, 42108, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(7).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 42194, 42275, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(7).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 42279, 42346, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 8, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 42577, 43386, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 42827, 43080, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 43145, 43218, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 43222, 43288, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 9, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 43388, 43795, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 43498, 43579, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 43635, 43733, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 10, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 43798, 44370, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 44024, 44254, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 11, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 44372, 45031, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 44575, 44813, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(11).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 44882, 44969, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 45033, 45655, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 45278, 45528, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION FINITE STATE MACHINE ", true, 45657, 46731, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Finite_State_Set___", true, 46732, 47274, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 46869, 47220, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Finite_State_Machine___", true, 47275, 48252, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (state_ IS NULL)", true, 47463, 47670, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (event_ IS NULL)", true, 47494, 47552, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 47559, 47670, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (state_ = 'Open')", true, 47674, 47899, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (event_ = 'Plan')", true, 47709, 47781, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 47788, 47899, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (state_ = 'Planned')", true, 47903, 48130, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (event_ = 'Plan')", true, 47941, 48012, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 48019, 48130, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(15).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 48134, 48223, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Finite_State_Add_To_Attr___", true, 48253, 48657, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 17, PlsqlBlockType.PROCEDURE_IMPL, "Finite_State_Init___", true, 48658, 48900, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 18, PlsqlBlockType.COMMENT, "-- PRIVATE FINITE STATE MACHINE ", true, 48901, 49774, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 19, PlsqlBlockType.FUNCTION_IMPL, "Finite_State_Decode__", true, 49775, 49964, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 20, PlsqlBlockType.FUNCTION_IMPL, "Finite_State_Encode__", true, 49965, 50162, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Enumerate_States__", true, 50163, 50322, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 22, PlsqlBlockType.FUNCTION_IMPL, "Finite_State_Events__", true, 50323, 50639, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(22).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (db_state_ IS NULL)", true, 50411, 50457, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(22).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (db_state_ = 'Open')", true, 50461, 50514, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(22).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (db_state_ = 'Planned')", true, 50518, 50574, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(22).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 50578, 50612, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Enumerate_Events__", true, 50640, 50758, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 50759, 51504, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 25, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 51506, 51627, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 26, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 51630, 57006, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 51857, 55259, 35);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'ENVIRONMENT')", true, 51934, 52068, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'SCORECARD')", true, 52075, 52215, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'YEAR')", true, 52222, 52354, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'VERSION')", true, 52361, 52427, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'SCORECARD_OBJECT')", true, 52434, 52518, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'OBJECT_TYPE')", true, 52525, 52599, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'YEAR_VALUE')", true, 52606, 52711, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'P1_KEY')", true, 52718, 52782, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'P1_VALUE')", true, 52789, 52890, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'P2_KEY')", true, 52897, 52961, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'P2_VALUE')", true, 52968, 53069, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'P3_KEY')", true, 53076, 53140, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'P3_VALUE')", true, 53147, 53248, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'P4_KEY')", true, 53255, 53319, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF (name_ = 'P4_VALUE')", true, 53326, 53427, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 15, PlsqlBlockType.IF, "ELSIF (name_ = 'P5_KEY')", true, 53434, 53498, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 16, PlsqlBlockType.IF, "ELSIF (name_ = 'P5_VALUE')", true, 53505, 53606, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF (name_ = 'P6_KEY')", true, 53613, 53677, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 18, PlsqlBlockType.IF, "ELSIF (name_ = 'P6_VALUE')", true, 53684, 53785, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 19, PlsqlBlockType.IF, "ELSIF (name_ = 'P7_KEY')", true, 53792, 53856, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 20, PlsqlBlockType.IF, "ELSIF (name_ = 'P7_VALUE')", true, 53863, 53964, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 21, PlsqlBlockType.IF, "ELSIF (name_ = 'P8_KEY')", true, 53971, 54035, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 22, PlsqlBlockType.IF, "ELSIF (name_ = 'P8_VALUE')", true, 54042, 54143, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 23, PlsqlBlockType.IF, "ELSIF (name_ = 'P9_KEY')", true, 54150, 54214, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 24, PlsqlBlockType.IF, "ELSIF (name_ = 'P9_VALUE')", true, 54221, 54322, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 25, PlsqlBlockType.IF, "ELSIF (name_ = 'P10_KEY')", true, 54329, 54395, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 26, PlsqlBlockType.IF, "ELSIF (name_ = 'P10_VALUE')", true, 54402, 54505, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 27, PlsqlBlockType.IF, "ELSIF (name_ = 'P11_KEY')", true, 54512, 54578, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 28, PlsqlBlockType.IF, "ELSIF (name_ = 'P11_VALUE')", true, 54585, 54688, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 29, PlsqlBlockType.IF, "ELSIF (name_ = 'P12_KEY')", true, 54695, 54761, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 30, PlsqlBlockType.IF, "ELSIF (name_ = 'P12_VALUE')", true, 54768, 54871, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 31, PlsqlBlockType.IF, "ELSIF (name_ = 'ACTION')", true, 54878, 54942, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 32, PlsqlBlockType.IF, "ELSIF (name_ = 'MEA_STATE_CHANGE_DATE')", true, 54949, 55074, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 33, PlsqlBlockType.IF, "ELSIF (name_ = 'BUDGET_VERSION')", true, 55081, 55161, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks().get(0).getChildBlocks(), 34, PlsqlBlockType.IF, "ELSE", true, 55168, 55246, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(26).getChildBlocks(), 1, PlsqlBlockType.IF, "IF ( newrec_.scorecard_object IS NOT NULL)", true, 55265, 56356, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 27, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 57009, 59227, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(27).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 57323, 59090, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 28, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 59229, 59813, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 29, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 59815, 66405, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 60196, 63689, 36);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'ENVIRONMENT')", true, 60273, 60407, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'SCORECARD')", true, 60414, 60554, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'YEAR')", true, 60561, 60693, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'VERSION')", true, 60700, 60783, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'SCORECARD_OBJECT')", true, 60790, 60874, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'OBJECT_TYPE')", true, 60881, 60955, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'YEAR_VALUE')", true, 60962, 61067, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'P1_KEY')", true, 61074, 61138, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (name_ = 'P1_VALUE')", true, 61145, 61246, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (name_ = 'P2_KEY')", true, 61253, 61317, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (name_ = 'P2_VALUE')", true, 61324, 61425, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (name_ = 'P3_KEY')", true, 61432, 61496, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (name_ = 'P3_VALUE')", true, 61503, 61604, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (name_ = 'P4_KEY')", true, 61611, 61675, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF (name_ = 'P4_VALUE')", true, 61682, 61783, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 15, PlsqlBlockType.IF, "ELSIF (name_ = 'P5_KEY')", true, 61790, 61854, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 16, PlsqlBlockType.IF, "ELSIF (name_ = 'P5_VALUE')", true, 61861, 61962, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF (name_ = 'P6_KEY')", true, 61969, 62033, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 18, PlsqlBlockType.IF, "ELSIF (name_ = 'P6_VALUE')", true, 62040, 62141, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 19, PlsqlBlockType.IF, "ELSIF (name_ = 'P7_KEY')", true, 62148, 62212, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 20, PlsqlBlockType.IF, "ELSIF (name_ = 'P7_VALUE')", true, 62219, 62320, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 21, PlsqlBlockType.IF, "ELSIF (name_ = 'P8_KEY')", true, 62327, 62391, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 22, PlsqlBlockType.IF, "ELSIF (name_ = 'P8_VALUE')", true, 62398, 62499, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 23, PlsqlBlockType.IF, "ELSIF (name_ = 'P9_KEY')", true, 62506, 62570, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 24, PlsqlBlockType.IF, "ELSIF (name_ = 'P9_VALUE')", true, 62577, 62678, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 25, PlsqlBlockType.IF, "ELSIF (name_ = 'P10_KEY')", true, 62685, 62751, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 26, PlsqlBlockType.IF, "ELSIF (name_ = 'P10_VALUE')", true, 62758, 62861, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 27, PlsqlBlockType.IF, "ELSIF (name_ = 'P11_KEY')", true, 62868, 62934, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 28, PlsqlBlockType.IF, "ELSIF (name_ = 'P11_VALUE')", true, 62941, 63044, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 29, PlsqlBlockType.IF, "ELSIF (name_ = 'P12_KEY')", true, 63051, 63117, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 30, PlsqlBlockType.IF, "ELSIF (name_ = 'P12_VALUE')", true, 63124, 63227, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 31, PlsqlBlockType.IF, "ELSIF (name_ = 'ACTION')", true, 63234, 63298, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 32, PlsqlBlockType.IF, "ELSIF (name_ = 'MEA_STATE_CHANGE_DATE')", true, 63305, 63430, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 33, PlsqlBlockType.IF, "ELSIF (name_ = 'BUDGET_VERSION')", true, 63437, 63517, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 34, PlsqlBlockType.IF, "ELSIF (name_ = 'FROM_BUDPRO')", true, 63524, 63591, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(0).getChildBlocks(), 35, PlsqlBlockType.IF, "ELSE", true, 63598, 63676, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks(), 1, PlsqlBlockType.IF, "IF ( newrec_.scorecard_object IS NOT NULL AND from_budpro_ = 'FALSE')", true, 63695, 65823, 13);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF ( newrec_.year_value != NVL(oldrec_.year_value,0))", true, 63885, 64029, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF ( newrec_.p1_value != NVL(oldrec_.p1_value,0))", true, 64036, 64177, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF ( newrec_.p2_value != NVL(oldrec_.p2_value,0))", true, 64184, 64325, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF ( newrec_.p3_value != NVL(oldrec_.p3_value,0))", true, 64332, 64473, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "IF ( newrec_.p4_value != NVL(oldrec_.p4_value,0))", true, 64480, 64621, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "IF ( newrec_.p5_value != NVL(oldrec_.p5_value,0))", true, 64628, 64769, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 6, PlsqlBlockType.IF, "IF ( newrec_.p6_value != NVL(oldrec_.p6_value,0))", true, 64776, 64917, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 7, PlsqlBlockType.IF, "IF ( newrec_.p7_value != NVL(oldrec_.p7_value,0))", true, 64924, 65065, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 8, PlsqlBlockType.IF, "IF ( newrec_.p8_value != NVL(oldrec_.p8_value,0))", true, 65072, 65213, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 9, PlsqlBlockType.IF, "IF ( newrec_.p9_value != NVL(oldrec_.p9_value,0))", true, 65220, 65361, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 10, PlsqlBlockType.IF, "IF ( newrec_.p10_value != NVL(oldrec_.p10_value,0))", true, 65368, 65511, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 11, PlsqlBlockType.IF, "IF ( newrec_.p11_value != NVL(oldrec_.p11_value,0))", true, 65518, 65661, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(29).getChildBlocks().get(1).getChildBlocks(), 12, PlsqlBlockType.IF, "IF ( newrec_.p12_value != NVL(oldrec_.p12_value,0))", true, 65668, 65811, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 30, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 66408, 69988, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(30).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  by_keys_", true, 66756, 68416, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(30).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 66779, 68415, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(30).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 68420, 69893, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(30).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 68431, 69881, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 31, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 69990, 70587, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 32, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 70589, 70910, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 33, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 70913, 71317, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(33).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 71229, 71301, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 34, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 71319, 73620, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 35, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 73622, 73917, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 36, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 73920, 74524, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(36).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 74193, 74254, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(36).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 74258, 74334, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(36).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 74338, 74476, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 37, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 74527, 75249, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(37).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 74833, 74960, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(37).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 74964, 75198, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 38, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 75252, 75804, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(38).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 75487, 75592, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(38).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 75596, 75753, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 39, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 75806, 76259, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 40, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 76261, 76646, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(40).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(environment_, scorecard_, year_, version_, scorecard_object_))", true, 76490, 76635, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 41, PlsqlBlockType.COMMENT, "-- PUBLIC TRANSLATION METHODS ", true, 76648, 76881, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 42, PlsqlBlockType.PROCEDURE_IMPL, "Language_Refreshed", true, 76882, 77029, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 43, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 77030, 77263, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 44, PlsqlBlockType.PROCEDURE_IMPL, "Distribute_Input_Values___", true, 77266, 93408, 9);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_child_scorecards", true, 77559, 77716, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_open_child_scr", true, 77721, 77889, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_input_values", true, 77894, 78348, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_attribute_value_sum", true, 78353, 78709, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 80236, 80259, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  value_distribution_type_ IS NULL", true, 80724, 81173, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 80771, 80968, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 80975, 81162, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- END IF;", true, 82098, 82107, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 7, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 82113, 82390, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.IF, "IF   parent_val_arr_(temp_period_count_) IS NULL", true, 82168, 82376, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "child_scorecards_ IN get_child_scorecards", true, 82471, 93376, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (temp_val_ = '1')", true, 82742, 82922, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT Check_Exist___(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_)", true, 82930, 83184, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 83192, 93363, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  value_distribution_type_ = 'PERCENTAGE'", true, 83901, 88188, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  hierachical_dist_logic_ IS NULL", true, 83961, 84255, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 84015, 84255, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF hierachical_dist_logic_='VERSION'", true, 84269, 85607, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  distribution_version_ IS NULL", true, 84328, 84834, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 84383, 84588, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 84606, 84812, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 85159, 85607, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF hierachical_dist_logic_='ATTRIBUTE'", true, 85620, 88135, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  distribution_attribute_ IS NULL", true, 85681, 86195, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 85738, 85946, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 85964, 86173, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  attribute_val_str_ IS NULL", true, 86415, 86613, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 86628, 87029, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 86650, 87007, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.BEGIN_END, "", true, 87044, 87751, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  attribute_value_sum_=0", true, 87262, 87480, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 87767, 88115, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF value_distribution_type_ = 'VALUE'", true, 88198, 92475, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  hierachical_dist_logic_ IS NULL", true, 88256, 88567, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 88311, 88567, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF hierachical_dist_logic_='VERSION'", true, 88580, 89916, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  distribution_version_ IS NULL", true, 88640, 89154, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 88696, 88903, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 88923, 89131, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 89481, 89916, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF hierachical_dist_logic_='ATTRIBUTE'", true, 89929, 92458, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  distribution_attribute_ IS NULL", true, 89991, 90511, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 90049, 90258, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 90277, 90488, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  attribute_val_str_ IS NULL", true, 90732, 90931, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 90947, 91352, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.BEGIN_END, "", true, 90970, 91329, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.BEGIN_END, "", true, 91368, 92084, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  attribute_value_sum_=0", true, 91590, 91809, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(44).getChildBlocks().get(8).getChildBlocks().get(2).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 92101, 92438, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 45, PlsqlBlockType.PROCEDURE_IMPL, "Object_Planned_Date___", true, 93409, 93630, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 46, PlsqlBlockType.FUNCTION_IMPL, "Find_Column___", true, 93632, 95238, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_record", true, 93883, 94265, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "rec_ IN get_record", true, 94301, 95198, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (rec_.p1_key = key_)", true, 94335, 94395, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (rec_.p2_key = key_)", true, 94402, 94465, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (rec_.p3_key = key_)", true, 94472, 94535, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (rec_.p4_key = key_)", true, 94542, 94605, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (rec_.p5_key = key_)", true, 94612, 94675, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (rec_.p6_key = key_)", true, 94682, 94745, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (rec_.p7_key = key_)", true, 94752, 94815, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (rec_.p8_key = key_)", true, 94822, 94885, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (rec_.p9_key = key_)", true, 94892, 94955, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (rec_.p10_key = key_)", true, 94962, 95027, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (rec_.p11_key = key_)", true, 95034, 95099, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(46).getChildBlocks().get(1).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (rec_.p12_key = key_)", true, 95106, 95185, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 47, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 95239, 95472, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 48, PlsqlBlockType.PROCEDURE_IMPL, "Update_Versions__", true, 95475, 96735, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(48).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  version_ = 'TAR'", true, 96010, 96102, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(48).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF version_ = 'ACT'", true, 96105, 96200, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(48).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 96203, 96289, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(48).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  data_mart_='TRUE'", true, 96292, 96508, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(48).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 96511, 96712, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 49, PlsqlBlockType.PROCEDURE_IMPL, "Publish__", true, 96737, 98923, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  data_mart_enabled_='TRUE'", true, 97361, 98021, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Bp_Scorecard_Fact_API.Check_Exist_By_Object(environment_,scorecard_,period_,object_type_,measure_)='FALSE'", true, 97401, 98021, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  value_ IS NOT NULL", true, 97525, 97940, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 97950, 98005, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 98027, 98685, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  Scorecard_Value_API.Check_Exist_By_Object(environment_,scorecard_,period_,object_type_,measure_)='FALSE'", true, 98040, 98672, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  value_ IS NOT NULL", true, 98164, 98589, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 98601, 98656, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(49).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (flag_ = 'TRUE' AND value_ IS NOT NULL)", true, 98692, 98888, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 50, PlsqlBlockType.PROCEDURE_IMPL, "Publish_Score__", true, 98924, 103003, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- get measures and components for a specific environment_, scorecard_", true, 99124, 99193, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_measure", true, 99196, 99373, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- get Id, version of a scorecard record by keys", true, 99377, 99425, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_objid", true, 99428, 99568, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks(), 4, PlsqlBlockType.FOR_LOOP, "get_rec_ in get_measure", true, 99808, 102807, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "if  publish_type_ = 'ENV'", true, 99986, 100144, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 100150, 100262, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks(), 2, PlsqlBlockType.IF, "if  (isScorecardPlan = 'TRUE' or isEnvPlan = 'TRUE' )", true, 100269, 102795, 13);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "if  get_rec_.p1_key is not null", true, 100336, 100528, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "if  get_rec_.p2_key is not null", true, 100537, 100728, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "if  get_rec_.p3_key is not null", true, 100737, 100928, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "if  get_rec_.p4_key is not null", true, 100937, 101129, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.IF, "if  get_rec_.p5_key is not null", true, 101137, 101329, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 5, PlsqlBlockType.IF, "if  get_rec_.p6_key is not null", true, 101338, 101531, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 6, PlsqlBlockType.IF, "if  get_rec_.p7_key is not null", true, 101540, 101733, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 7, PlsqlBlockType.IF, "if  get_rec_.p8_key is not null", true, 101742, 101934, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 8, PlsqlBlockType.IF, "if  get_rec_.p9_key is not null", true, 101943, 102136, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 9, PlsqlBlockType.IF, "if  get_rec_.p10_key is not null", true, 102145, 102341, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- Call Id ", true, 102350, 102372, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 11, PlsqlBlockType.IF, "if  get_rec_.p11_key is not null", true, 102381, 102577, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(50).getChildBlocks().get(4).getChildBlocks().get(2).getChildBlocks(), 12, PlsqlBlockType.IF, "if  get_rec_.p12_key is not null", true, 102586, 102782, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 51, PlsqlBlockType.PROCEDURE_IMPL, "Start_Publish_Environments__", true, 103004, 103459, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 52, PlsqlBlockType.PROCEDURE_IMPL, "Set_Publish_Environments__", true, 103460, 103746, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 53, PlsqlBlockType.PROCEDURE_IMPL, "Start_Publish_Scorecards__", true, 103747, 104196, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 54, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Scorecard_Publish__", true, 104197, 104576, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 55, PlsqlBlockType.PROCEDURE_IMPL, "Plan__", true, 104577, 105195, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(55).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 104849, 104888, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(55).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 104892, 105146, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 56, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PROTECTED METHODS ", true, 105196, 105665, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 57, PlsqlBlockType.FUNCTION_IMPL, "Get_Year", true, 105668, 106214, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(57).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 105876, 106110, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 58, PlsqlBlockType.FUNCTION_IMPL, "Get_Distributed_Attr", true, 106215, 107799, 6);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- distribute_str_       VARCHAR2(20);", true, 106631, 106668, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "version_cur_", true, 106673, 106882, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "total_cur_", true, 106890, 107095, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  total_val_ IS NULL", true, 107255, 107378, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- distribute_string_ := \"\";", true, 107382, 107409, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(58).getChildBlocks(), 5, PlsqlBlockType.FOR_LOOP, "temp_ IN version_cur_", true, 107413, 107744, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 59, PlsqlBlockType.FUNCTION_IMPL, "Get_Action", true, 107800, 108354, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(59).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 108012, 108248, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 60, PlsqlBlockType.FUNCTION_IMPL, "Get_Mea_State_Change_Date", true, 108355, 108965, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(60).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 108593, 108844, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 61, PlsqlBlockType.FUNCTION_IMPL, "Get_Budget_Version", true, 108966, 109552, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(61).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 109194, 109438, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 62, PlsqlBlockType.PROCEDURE_IMPL, "Update_Sales_Values", true, 109553, 127635, 23);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 110844, 110867, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "total_index_cur_", true, 110953, 111109, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_period", true, 111114, 111273, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Bug 65540, begin", true, 111278, 111297, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 65540, end", true, 111369, 111386, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- val_arr_  Val_Array_Type;", true, 111562, 111589, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (from_where_ = 'FROM_COMPONENT')", true, 111594, 112151, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (from_where_ = 'FROM_MEASURE')", true, 112156, 112708, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (dist_logic_ = 'INDEX')", true, 112713, 114046, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (total_index_ IS NULL)", true, 112863, 113011, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.LOOP, "", true, 113136, 114022, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (index_value_ IS NULL)", true, 113366, 113556, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dist_type_ = 'PERCENTAGE')", true, 113566, 113747, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(8).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (dist_type_ = 'VALUE')", true, 113757, 113885, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (dist_logic_ != 'INDEX')", true, 114050, 118620, 18);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dist_ver_ = 'ACT')", true, 114092, 114162, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'TAR')", true, 114169, 114242, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V1')", true, 114249, 114317, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V2')", true, 114324, 114392, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V3')", true, 114399, 114467, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V4')", true, 114474, 114542, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V5')", true, 114549, 114617, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V6')", true, 114624, 114692, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V7')", true, 114699, 114767, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V8')", true, 114774, 114842, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V9')", true, 114849, 114917, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (dist_ver_ = 'V10')", true, 114924, 115008, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 12, PlsqlBlockType.IF, "IF ( from_where_= 'FROM_COMPONENT')", true, 115016, 115714, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 13, PlsqlBlockType.IF, "IF ( from_where_= 'FROM_MEASURE')", true, 115722, 116412, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 116420, 116454, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 15, PlsqlBlockType.IF, "IF  (total_val_ IS NULL)", true, 116610, 116767, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 16, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 116828, 116862, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks(), 17, PlsqlBlockType.FOR_LOOP, "temp1_ USING environment_,scorecard_,component_,year_;", true, 116887, 118583, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (version_val_ IS NULL)", true, 117095, 117278, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 117288, 118457, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dist_logic_ = 'SYB')", true, 117305, 118034, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (index_value_ IS NULL)", true, 117448, 117671, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dist_type_ = 'PERCENTAGE')", true, 117687, 117873, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (dist_type_ = 'VALUE')", true, 117889, 118034, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (dist_logic_ = 'VERSION')", true, 118047, 118440, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dist_type_ = 'PERCENTAGE')", true, 118099, 118272, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(9).getChildBlocks().get(17).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (dist_type_ = 'VALUE')", true, 118288, 118420, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (dist_logic_ != 'VERSION')", true, 118778, 119134, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dist_type_ = 'PERCENTAGE')", true, 118820, 118921, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (year_value_ != total_dist_val_)", true, 118929, 119123, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(10).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN 1..count_", true, 118979, 119109, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (count_= 1)", true, 119139, 119608, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 119164, 119607, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 12, PlsqlBlockType.IF, "ELSIF (count_= 2)", true, 119612, 120125, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 119640, 120124, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 13, PlsqlBlockType.IF, "ELSIF (count_= 3)", true, 120129, 120686, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 120157, 120685, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF (count_= 4)", true, 120690, 121288, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 120718, 121287, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 15, PlsqlBlockType.IF, "ELSIF (count_= 5)", true, 121292, 121929, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 121320, 121928, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 16, PlsqlBlockType.IF, "ELSIF (count_= 6)", true, 121933, 122613, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 121961, 122612, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF (count_= 7)", true, 122617, 123338, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 122645, 123337, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 18, PlsqlBlockType.IF, "ELSIF (count_= 8)", true, 123342, 124104, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 123370, 124103, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 19, PlsqlBlockType.IF, "ELSIF (count_= 9)", true, 124108, 124911, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 124136, 124910, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 20, PlsqlBlockType.IF, "ELSIF (count_= 10)", true, 124915, 125762, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 124944, 125761, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 21, PlsqlBlockType.IF, "ELSIF (count_= 11)", true, 125766, 126657, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 125796, 126656, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks(), 22, PlsqlBlockType.IF, "ELSIF (count_= 12)", true, 126661, 127609, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(62).getChildBlocks().get(22).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 126691, 127594, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 63, PlsqlBlockType.PROCEDURE_IMPL, "Update_Distributed_Values", true, 127636, 151802, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_value_ = 'TRUE')", true, 128411, 151438, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF (from_where_ = 'FROM_COMPONENT')", true, 128546, 128772, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF (from_where_ = 'FROM_MEASURE')", true, 128780, 128861, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  NOT(ref_type_ = 'REFERENCE')", true, 128869, 151438, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (from_where_ = 'FROM_COMPONENT')", true, 128916, 129190, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (from_where_ = 'FROM_MEASURE')", true, 129201, 129471, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (year_value_ IS NULL)", true, 129543, 129971, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 129585, 129970, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 129981, 151424, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dist_type_ = 'PERCENTAGE' AND dist_logic_ IS NULL)", true, 129998, 140747, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (period_count_ = 1)", true, 130073, 130652, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 130120, 130651, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (period_count_ = 2)", true, 130668, 131302, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 130718, 131301, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (period_count_ = 3)", true, 131318, 132005, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 131368, 132004, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (period_count_ = 4)", true, 132021, 132761, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 132071, 132760, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (period_count_ = 5)", true, 132777, 133570, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 132827, 133569, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (period_count_ = 6)", true, 133586, 134432, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 133636, 134431, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (period_count_ = 7)", true, 134448, 135347, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 134498, 135346, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (period_count_ = 8)", true, 135363, 136315, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 135413, 136314, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (period_count_ = 9)", true, 136331, 137336, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 136381, 137335, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (period_count_ = 10)", true, 137352, 138412, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 137403, 138411, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (period_count_ = 11)", true, 138426, 139540, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 138477, 139539, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (period_count_ = 12)", true, 139556, 140747, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 139607, 140723, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (dist_type_ = 'VALUE' AND dist_logic_ IS NULL)", true, 140762, 151120, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (period_count_ = 1)", true, 140912, 141484, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 140959, 141483, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (period_count_ = 2)", true, 141500, 142122, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 141550, 142121, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (period_count_ = 3)", true, 142138, 142807, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 142188, 142806, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (period_count_ = 4)", true, 142823, 143539, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 142873, 143538, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (period_count_ = 5)", true, 143555, 144318, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 143605, 144317, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (period_count_ = 6)", true, 144334, 145144, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 144384, 145143, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (period_count_ = 7)", true, 145160, 146017, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 145210, 146016, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (period_count_ = 8)", true, 146033, 146937, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 146083, 146936, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (period_count_ = 9)", true, 146953, 147904, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 147003, 147903, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (period_count_ = 10)", true, 147920, 148920, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 147971, 148919, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (period_count_ = 11)", true, 148936, 149984, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 148987, 149983, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (period_count_ = 12)", true, 150000, 151120, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 150051, 151095, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF ((dist_logic_ = 'SYB' OR dist_logic_ = 'VERSION' OR dist_logic_ = 'INDEX') AND (dist_type_ IS NOT NULL))", true, 151133, 151407, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_value_ = 'FALSE')", true, 151442, 151771, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(63).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 151485, 151759, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 64, PlsqlBlockType.PROCEDURE_IMPL, "Publish_Scorecard", true, 151803, 152215, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(64).getChildBlocks(), 0, PlsqlBlockType.IF, "if  can_modify_ = 'TRUE'", true, 152091, 152192, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 65, PlsqlBlockType.PROCEDURE_IMPL, "Publish_Environment", true, 152216, 153414, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(65).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_scorecard", true, 152335, 152526, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(65).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "get_rec in get_scorecard", true, 152635, 153389, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(65).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_rec.objstate = 'Open')", true, 152676, 152951, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(65).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 152958, 153376, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(65).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "if  can_modify_ = 'TRUE'", true, 153072, 153362, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 66, PlsqlBlockType.PROCEDURE_IMPL, "Calculate_Measures", true, 153417, 170886, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "measure_components_", true, 155976, 156206, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "version_value_", true, 156210, 156570, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "measure_value_", true, 156574, 156933, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  plan_formula_ IS NOT NULL", true, 157772, 170604, 16);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "measure_comp_ IN measure_components_", true, 158468, 161462, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  byteOffSet_ > 0", true, 158635, 161446, 13);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (year_value_ IS NULL)", true, 158912, 159006, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (p1_value_ IS NULL)", true, 159019, 159109, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (p2_value_ IS NULL)", true, 159122, 159212, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (p3_value_ IS NULL)", true, 159225, 159315, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (p4_value_ IS NULL)", true, 159328, 159418, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (p5_value_ IS NULL)", true, 159431, 159521, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (p6_value_ IS NULL)", true, 159534, 159624, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (p7_value_ IS NULL)", true, 159637, 159727, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (p8_value_ IS NULL)", true, 159740, 159830, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (p9_value_ IS NULL)", true, 159843, 159933, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (p10_value_ IS NULL)", true, 159946, 160038, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (p11_value_ IS NULL)", true, 160051, 160143, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (p12_value_ IS NULL)", true, 160156, 160248, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (period_count_ = 1)", true, 162313, 162874, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 162350, 162382, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (period_count_ = 2)", true, 162881, 163447, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 162918, 162950, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (period_count_ = 3)", true, 163454, 164035, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 163491, 163523, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (period_count_ = 4)", true, 164042, 164628, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 164079, 164111, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (period_count_ = 5)", true, 164635, 165226, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 164672, 164704, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (period_count_ = 6)", true, 165233, 165829, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 165270, 165302, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (period_count_ = 7)", true, 165836, 166447, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 165873, 165905, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (period_count_ = 8)", true, 166454, 167080, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 166491, 166523, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (period_count_ = 9)", true, 167087, 167718, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 167124, 167156, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (period_count_ = 10)", true, 167725, 168363, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 167763, 167795, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (period_count_ = 11)", true, 168370, 169024, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 168408, 168440, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (period_count_ = 12)", true, 169031, 169690, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe samwlk 070515", true, 169069, 169101, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 13, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 169697, 170446, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- Bug 76573 Begin. Set the measure to planned state", true, 170454, 170506, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks().get(3).getChildBlocks(), 15, PlsqlBlockType.COMMENT, "-- Bug 76573 End", true, 170588, 170604, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(66).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 170615, 170861, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 67, PlsqlBlockType.PROCEDURE_IMPL, "Update_Referred_Component", true, 170887, 173569, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(67).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "value_cur", true, 171156, 171526, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(67).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "component_cur", true, 171530, 171811, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(67).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "component_cur_ IN component_cur", true, 171933, 173538, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(67).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "value_cur_ IN value_cur", true, 172109, 173438, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(67).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE scorecard_input_value_tab", true, 172262, 173420, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 68, PlsqlBlockType.PROCEDURE_IMPL, "Delete_By_Passed_Value", true, 173570, 174182, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(68).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- objversion_ VARCHAR2(2000);", true, 173732, 173761, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(68).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "Get_rows", true, 173765, 173900, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(68).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "get_rec in Get_rows", true, 174003, 174154, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(68).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Delete___(get_rec.objid,get_rec);", true, 174038, 174075, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 69, PlsqlBlockType.PROCEDURE_IMPL, "Delete_Version_Passed", true, 174183, 174687, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(69).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Get_rows", true, 174304, 174449, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(69).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "get_rec in Get_rows", true, 174552, 174660, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 70, PlsqlBlockType.PROCEDURE_IMPL, "Delete_Scorecard_Passed", true, 174688, 175204, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(70).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "Get_rows", true, 174814, 174963, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(70).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "get_rec in Get_rows", true, 175067, 175175, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 71, PlsqlBlockType.PROCEDURE_IMPL, "Insert_Data", true, 175205, 176460, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 72, PlsqlBlockType.PROCEDURE_IMPL, "Modify_Data", true, 176461, 177849, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 73, PlsqlBlockType.PROCEDURE_IMPL, "Delete_Data", true, 177850, 178313, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 74, PlsqlBlockType.PROCEDURE_IMPL, "Scorecard_Inputs_By_Batch", true, 178314, 179189, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(74).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (execution_ != 'NOW')", true, 179021, 179103, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(74).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 179107, 179158, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 75, PlsqlBlockType.PROCEDURE_IMPL, "Input_Scorecard_Data", true, 179190, 190918, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_year_conn", true, 180690, 180849, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_mea", true, 180854, 181056, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_comp", true, 181061, 181308, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "chk_exist", true, 181313, 181609, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  scorecard_ IS null", true, 182611, 182812, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 182818, 182981, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 6, PlsqlBlockType.IF, "if  version_ IS null", true, 182988, 183260, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSE", true, 183266, 183430, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 8, PlsqlBlockType.IF, "if  years_ IS null", true, 183437, 183592, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSE", true, 183598, 183755, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 183762, 183796, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks(), 11, PlsqlBlockType.FOR_LOOP, "ssql_;", true, 183813, 190872, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "meaNo IN get_mea(env, tempscr_)", true, 183941, 187181, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 183993, 184027, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "ssql2_;", true, 184050, 187134, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 184173, 184207, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "ssql3_;", true, 184234, 187083, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (tempver_ != 'ASS')", true, 184567, 187057, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_year_conn%FOUND)", true, 184729, 184802, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 184824, 184901, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_not_exist = 1)", true, 184966, 186362, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (chk_exist%FOUND)", true, 185214, 185283, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 185308, 185388, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_exists = 1)", true, 185455, 185761, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 185786, 186111, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 186385, 187030, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (chk_exist%FOUND)", true, 186560, 186633, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 186658, 186741, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_exists_del = 1)", true, 186808, 187001, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "meaNo IN get_mea(env, tempscr_)", true, 187192, 190855, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "compNo IN get_comp(env, tempscr_, meaNo.level_id)", true, 187245, 190836, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 187351, 187385, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "ssql2_;", true, 187412, 190784, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 187590, 187624, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "ssql3_;", true, 187655, 190727, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (tempver_ != 'ASS')", true, 188053, 190699, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (get_year_conn%FOUND)", true, 188224, 188301, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 188326, 188410, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_not_exist2 = 1)", true, 188481, 189951, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (chk_exist%FOUND)", true, 188744, 188817, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 188845, 188932, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_exists2 = 1)", true, 189005, 189319, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 189347, 189687, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 189977, 190669, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (chk_exist%FOUND)", true, 190162, 190239, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 190267, 190358, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(75).getChildBlocks().get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_exists_del2 = 1)", true, 190431, 190637, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 76, PlsqlBlockType.PROCEDURE_IMPL, "Start_Inputing_Scorecards", true, 190920, 191375, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 77, PlsqlBlockType.PROCEDURE_IMPL, "Hierachical_Distribution", true, 191376, 196033, 7);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_scorecard_objects", true, 191618, 191868, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_components", true, 191873, 192136, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_child_scorecards", true, 192141, 192298, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "check_component_selected", true, 192303, 192597, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 192698, 192721, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  object_type_ = 'COMPONENT'", true, 193192, 195709, 7);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Get measure components in parent", true, 193233, 193268, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "components_ IN get_components(scorecard_)", true, 193313, 193786, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  check_component_selected%FOUND", true, 193570, 193729, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  index_>0", true, 193794, 194916, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "child_scorecards_ IN get_child_scorecards", true, 193862, 194916, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "components_ IN get_components(child_scorecards_.scorecard)", true, 193964, 194650, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "index_ IN 1 .. parent_component_count_", true, 194087, 194327, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  component_arr_(index_)=components_.level_id", true, 194153, 194302, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT component_exist_", true, 194343, 194563, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  child_component_count_!=parent_component_count_", true, 194663, 194897, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 194923, 195050, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  sel_index_>0", true, 195058, 195273, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "index_ IN 1..sel_index_", true, 195088, 195273, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 195280, 195412, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks(), 6, PlsqlBlockType.FOR_LOOP, "child_scorecards_ IN get_child_scorecards", true, 195419, 195709, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(5).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 76573 Removed the call to Set_To_Planned() since it is called inside Calculate_Measures() method", true, 195590, 195693, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 195713, 196002, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(77).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "scorecard_objects_ IN get_scorecard_objects", true, 195724, 195991, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 78, PlsqlBlockType.PROCEDURE_IMPL, "Publish_Environment_Batch", true, 196035, 196725, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(78).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Start_Publish_Environments___(attr_);", true, 196416, 196455, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(78).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (schedule_ != 'NOW')", true, 196552, 196632, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(78).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 196636, 196694, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 79, PlsqlBlockType.PROCEDURE_IMPL, "Set_Publish_Scorecards", true, 196726, 197262, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 80, PlsqlBlockType.PROCEDURE_IMPL, "Publish_Scorecard_Batch", true, 197263, 198029, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(80).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Start_Publish_Environments___(attr_);", true, 197725, 197764, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(80).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (schedule_ != 'NOW')", true, 197859, 197939, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(80).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 197943, 197999, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 81, PlsqlBlockType.PROCEDURE_IMPL, "Hierarchical_Consolidation", true, 198030, 203117, 9);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_scorecard_objects", true, 198261, 198511, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_components", true, 198516, 198779, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_child_scorecards", true, 198784, 198941, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "check_child_scorecards", true, 198946, 199097, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 4, PlsqlBlockType.CURSOR, "check_component_selected", true, 199102, 199396, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 5, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 199497, 199520, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (check_child_scorecards%NOTFOUND)", true, 200127, 200337, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  object_type_ = 'COMPONENT'", true, 200376, 202795, 6);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Get measure components in parent", true, 200417, 200452, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "components_ IN get_components(scorecard_)", true, 200497, 200970, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  check_component_selected%FOUND", true, 200754, 200913, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  index_>0", true, 200978, 202100, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "child_scorecards_ IN get_child_scorecards", true, 201046, 202100, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "components_ IN get_components(child_scorecards_.scorecard)", true, 201148, 201834, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "index_ IN 1 .. parent_component_count_", true, 201271, 201511, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  component_arr_(index_)=components_.level_id", true, 201337, 201486, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT component_exist_", true, 201527, 201747, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  child_component_count_!=parent_component_count_", true, 201847, 202081, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 202107, 202234, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  sel_index_>0", true, 202242, 202656, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "index_ IN 1..sel_index_", true, 202272, 202449, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 76573 Removed the call to Set_To_Planned() since it is called inside Calculate_Measures() method", true, 202553, 202656, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(7).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 202663, 202795, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSE", true, 202801, 203084, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(81).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "scorecard_objects_ IN get_scorecard_objects", true, 202813, 203072, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 82, PlsqlBlockType.PROCEDURE_IMPL, "Consolidate_Values", true, 203118, 212627, 11);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 203834, 203857, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_child_scorecards", true, 204206, 204375, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_open_child_scr", true, 204380, 204562, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_total_period_val_", true, 204568, 206389, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 4, PlsqlBlockType.CURSOR, "get_period_val_", true, 206395, 208204, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- value_distribution_type_ := scorecard_Structure_api.Get_Value_Dist_Type_Db(scorecard_,scorecard_object_,environment_,object_type_);", true, 208305, 208438, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  value_distribution_type_ IS NULL", true, 208558, 209007, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  object_type_='MEASURE'", true, 208605, 208802, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(6).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 208809, 208996, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 7, PlsqlBlockType.FOR_LOOP, "child_scorecards_ IN get_child_scorecards", true, 209013, 209733, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (temp_val_ = '1')", true, 209262, 209443, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT Check_Exist___(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_)", true, 209451, 209719, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 8, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 209738, 210210, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.LOOP, "", true, 209841, 210168, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(8).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (temp_period_value_ IS NULL)", true, 209963, 210152, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (value_distribution_type_ = 'PERCENTAGE')", true, 210859, 211452, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 210993, 211405, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (value_distribution_type_ = 'VALUE')", true, 211457, 211836, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(82).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "temp_period_count_ IN 1..period_count_", true, 211512, 211824, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 83, PlsqlBlockType.PROCEDURE_IMPL, "All_Hierarchical_Logic", true, 212628, 217991, 8);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_scorecard_objects", true, 213291, 213535, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_period_count", true, 213540, 213679, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_scorecard_measures", true, 213684, 213906, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_childs", true, 213911, 214086, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 4, PlsqlBlockType.CURSOR, "get_childs_for_cons", true, 214091, 214406, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (get_childs%NOTFOUND)", true, 214575, 214660, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSE", true, 214664, 214703, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (child_exists_ = 'TRUE')", true, 214708, 217963, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_scorecard_objects_ IN get_scorecard_objects(scorecard_)", true, 214748, 215118, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (action_ = 'DISTRIBUTION')", true, 215344, 216008, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (comp_level_ = 'TRUE')", true, 215388, 215705, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_scorecard_measures_ IN get_scorecard_measures(scorecard_)", true, 215431, 215705, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 215715, 215849, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "get_childs_ IN get_childs", true, 215859, 216008, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'CONSOLIDATION')", true, 216016, 217952, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_childs_for_cons_ IN  get_childs_for_cons", true, 216064, 217307, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_scorecard_objects_ IN get_scorecard_objects(get_childs_for_cons_.scorecard)", true, 216130, 216586, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (Scorecard_API.Get_Child_Count(get_childs_for_cons_.scorecard,environment_) >=1)", true, 216599, 217288, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (comp_level_ = 'TRUE')", true, 216703, 217084, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_scorecard_measures_ IN get_scorecard_measures(get_childs_for_cons_.scorecard)", true, 216752, 217084, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 217100, 217268, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- for the selected scorecard", true, 217317, 217346, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (Scorecard_API.Get_Child_Count(scorecard_,environment_) >=1)", true, 217356, 217938, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (comp_level_ = 'TRUE')", true, 217437, 217766, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_scorecard_measures_ IN get_scorecard_measures(scorecard_)", true, 217483, 217766, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(83).getChildBlocks().get(7).getChildBlocks().get(2).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 217779, 217921, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 84, PlsqlBlockType.PROCEDURE_IMPL, "Call_Hierarchical_Logic", true, 217992, 218913, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 85, PlsqlBlockType.PROCEDURE_IMPL, "Start_Hierarchical_Logic", true, 218914, 219428, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 86, PlsqlBlockType.PROCEDURE_IMPL, "Background_Hierarchical_Logic", true, 219429, 220430, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(86).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (execution_plan_ != 'NOW')", true, 220245, 220337, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(86).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 220341, 220395, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 87, PlsqlBlockType.PROCEDURE_IMPL, "Set_To_Planned", true, 220431, 221614, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(87).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 220766, 220995, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(87).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- rec2_:=Lock_By_Keys___(environment_,scorecard_,year_,version_,scorecard_object_);", true, 221311, 221505, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 88, PlsqlBlockType.FUNCTION_IMPL, "Get_Sco_Obj_State_Date", true, 221615, 222103, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(88).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 221794, 221985, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 89, PlsqlBlockType.PROCEDURE_IMPL, "Budget_And_Calculate", true, 222104, 233629, 9);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INDEX BY BINARY_INTEGER", true, 223409, 223432, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_comp_details", true, 224030, 224139, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_period_details", true, 224141, 224315, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_code_part", true, 224317, 224438, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  NOT scr_code_part_ IS NULL", true, 225344, 225684, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 225691, 225740, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 6, PlsqlBlockType.COMMENT, "-- since table_name_ is hardcoded we can set asserted", true, 225748, 225842, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 7, PlsqlBlockType.FOR_LOOP, "input_value_tab_stmt_;\n\n      OPEN get_period_details;", true, 225875, 226165, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks(), 8, PlsqlBlockType.LOOP, "", true, 226242, 233463, 18);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- check amount type", true, 226564, 226646, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  component_rec_.amount_type = 'AMTBAL'", true, 226656, 226921, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF component_rec_.amount_type = 'CURBAL'", true, 226931, 227244, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF component_rec_.amount_type = 'QTYBAL'", true, 227254, 227528, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF component_rec_.amount_type = 'PROJBAL'", true, 227538, 227807, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF component_rec_.amount_type = 'PRJCURBAL'", true, 227817, 228133, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF component_rec_.amount_type = 'PROJQTY'", true, 228143, 228435, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- Add ledger Id", true, 228746, 228762, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "-- Add account list", true, 228848, 228867, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  NOT account_list_ IS null", true, 228985, 229234, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- check amount type", true, 229245, 229265, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  component_rec_.amount_type = 'PROJBAL'  OR component_rec_.amount_type = 'PROJQTY' OR component_rec_.amount_type ='PRJCURBAL'", true, 229275, 229498, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 12, PlsqlBlockType.COMMENT, "-- Initialize field values", true, 229745, 229771, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "-- ifs_assert_safe shsalk 20060117", true, 230238, 230272, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 14, PlsqlBlockType.FOR_LOOP, "source_stmt_ USING company_,budget_version_,year_,component_rec_.ledger_id;\n         count_period_ :=1;\n         is_visited_:=false;", true, 230306, 231846, 14);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN 1..count_", true, 230598, 230796, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  budget_year_ = per_match_identity_type_(i)", true, 230638, 230774, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 1, PlsqlBlockType.CASE, "CASE  count_period_\n                   WHEN 1", true, 230810, 230898, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 2, PlsqlBlockType.CASE, "WHEN 2", true, 230918, 230968, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 3, PlsqlBlockType.CASE, "WHEN 3", true, 230988, 231038, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 4, PlsqlBlockType.CASE, "WHEN 4", true, 231058, 231108, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 5, PlsqlBlockType.CASE, "WHEN 5", true, 231128, 231178, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 6, PlsqlBlockType.CASE, "WHEN 6", true, 231198, 231248, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 7, PlsqlBlockType.CASE, "WHEN 7", true, 231268, 231318, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 8, PlsqlBlockType.CASE, "WHEN 8", true, 231338, 231388, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 9, PlsqlBlockType.CASE, "WHEN 9", true, 231408, 231458, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 10, PlsqlBlockType.CASE, "WHEN 10", true, 231478, 231528, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 11, PlsqlBlockType.CASE, "WHEN 11", true, 231548, 231598, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 12, PlsqlBlockType.CASE, "WHEN 12", true, 231618, 231668, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks().get(14).getChildBlocks(), 13, PlsqlBlockType.CASE, "ELSE", true, 231688, 231794, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 15, PlsqlBlockType.IF, "IF  NOT is_visited_", true, 231892, 232086, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 16, PlsqlBlockType.IF, "IF  mea_type_ = 'PERCENTAGE'", true, 233124, 233249, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(89).getChildBlocks().get(8).getChildBlocks(), 17, PlsqlBlockType.IF, "ELSIF mea_type_ = 'VALUE'", true, 233259, 233354, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 90, PlsqlBlockType.PROCEDURE_IMPL, "Get_Error_Msg_For_Comp", true, 233631, 234162, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(90).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_value_ = 'TRUE')", true, 233838, 233900, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(90).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 233904, 234134, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(90).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  invalid_comp_ <> 0", true, 233973, 234123, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 91, PlsqlBlockType.PROCEDURE_IMPL, "Return_Periods", true, 234163, 236217, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_period", true, 234598, 234755, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_periodCount", true, 234760, 234901, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "i IN 1..per_no", true, 235350, 236175, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (i = 1)", true, 235420, 235468, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (i = 2)", true, 235478, 235529, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (i = 3)", true, 235539, 235590, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (i = 4)", true, 235600, 235651, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (i = 5)", true, 235661, 235712, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (i = 6)", true, 235722, 235773, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (i = 7)", true, 235783, 235834, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (i = 8)", true, 235844, 235895, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSIF (i = 9)", true, 235905, 235956, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 9, PlsqlBlockType.IF, "ELSIF (i = 10)", true, 235966, 236019, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 10, PlsqlBlockType.IF, "ELSIF (i = 11)", true, 236029, 236082, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(91).getChildBlocks().get(2).getChildBlocks(), 11, PlsqlBlockType.IF, "ELSIF (i = 12)", true, 236092, 236162, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 92, PlsqlBlockType.PROCEDURE_IMPL, "Import_Planned_Values", true, 236218, 238930, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_update_record", true, 236818, 237113, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks(), 1, PlsqlBlockType.LOOP, "", true, 237212, 238902, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "( Client_SYS.Get_Next_From_Attr(key_value_attr_, ptr_, name_, value_) )", true, 237224, 237618, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'KEY')", true, 237317, 237492, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'VALUE')", true, 237502, 237601, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  ((get_update_record%FOUND) AND (column_ IS NOT NULL))", true, 237975, 238765, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(92).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 238522, 238751, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 93, PlsqlBlockType.PROCEDURE_IMPL, "Calculate_Year_Value", true, 238932, 242594, 16);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "measure_value", true, 239923, 240318, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (formula_p1_ IS NOT NULL)", true, 240756, 240866, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (formula_p2_ IS NOT NULL)", true, 240871, 240981, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (formula_p3_ IS NOT NULL)", true, 240986, 241096, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (formula_p4_ IS NOT NULL)", true, 241101, 241211, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (formula_p5_ IS NOT NULL)", true, 241216, 241326, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (formula_p6_ IS NOT NULL)", true, 241331, 241441, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (formula_p7_ IS NOT NULL)", true, 241446, 241556, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (formula_p8_ IS NOT NULL)", true, 241561, 241671, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (formula_p9_ IS NOT NULL)", true, 241676, 241786, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (formula_p10_ IS NOT NULL)", true, 241791, 241903, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (formula_p11_ IS NOT NULL)", true, 241908, 242020, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (formula_p12_ IS NOT NULL)", true, 242025, 242137, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 13, PlsqlBlockType.IF, "IF  (measure_type_ = 'PERCENTAGE' AND count_ > 0)", true, 242142, 242228, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 14, PlsqlBlockType.IF, "ELSIF NOT(measure_type_ = 'VALUE')", true, 242232, 242304, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(93).getChildBlocks(), 15, PlsqlBlockType.IF, "IF  (total_ IS NOT NULL)", true, 242309, 242567, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 94, PlsqlBlockType.PROCEDURE_IMPL, "Aggregate_Planned_Values", true, 242595, 244073, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(94).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_update_record", true, 242893, 243172, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(94).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (get_update_record%FOUND)", true, 243323, 244014, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(94).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "BLOCK COMMENT", true, 243789, 244003, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 95, PlsqlBlockType.PROCEDURE_IMPL, "Load_Planned_Values", true, 244075, 251638, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 66984 Begin", true, 244483, 244500, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 66984 End", true, 244545, 244560, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_keys", true, 245134, 245355, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  ( bp_installed_ )", true, 245435, 251606, 17);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (rec_.p1_key IS NOT NULL)", true, 245634, 245744, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (rec_.p2_key IS NOT NULL)", true, 245752, 245862, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_.p3_key IS NOT NULL)", true, 245870, 245980, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (rec_.p4_key IS NOT NULL)", true, 245988, 246098, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (rec_.p5_key IS NOT NULL)", true, 246106, 246216, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (rec_.p6_key IS NOT NULL)", true, 246224, 246334, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (rec_.p7_key IS NOT NULL)", true, 246342, 246452, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (rec_.p8_key IS NOT NULL)", true, 246460, 246570, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (rec_.p9_key IS NOT NULL)", true, 246578, 246688, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (rec_.p10_key IS NOT NULL)", true, 246696, 246809, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (rec_.p11_key IS NOT NULL)", true, 246817, 246930, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (rec_.p12_key IS NOT NULL)", true, 246938, 247051, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (attr_ IS NOT NULL)", true, 247059, 247146, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 13, PlsqlBlockType.COMMENT, "-- Bug 66984 Begin,Added the line for Budget_Template_API.Is_Period_Matching() method call to stop loading values from templates which don't have matching periods", true, 247153, 247399, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060111", true, 247833, 247865, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 15, PlsqlBlockType.FOR_LOOP, "stmt_bp_call_ USING scorecard_, environment_,'TRUE';", true, 247889, 251573, 4);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 66984 Begin,Added the if condition line and the else part", true, 248013, 248076, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks(), 1, PlsqlBlockType.IF, "IF   get_budpro%FOUND", true, 248086, 251453, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  ((template_rec_.company IS NULL) AND (attr_ IS NOT NULL))", true, 248124, 250274, 3);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060111", true, 248622, 248654, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (node_rec_.company IS NOT NULL)", true, 248850, 250077, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Load the value from Budget Node", true, 248908, 248941, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060111", true, 249595, 249627, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 250093, 250274, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (attr_ IS NOT NULL)", true, 250287, 251165, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Load the value from Budget Template", true, 250330, 250367, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060111", true, 250806, 250838, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (attr_ IS NOT NULL)", true, 251178, 251453, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 251463, 251532, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks().get(15).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Bug 66984 End", true, 251542, 251557, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(95).getChildBlocks().get(3).getChildBlocks(), 16, PlsqlBlockType.COMMENT, "-- Bug 66984 End", true, 251580, 251595, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 96, PlsqlBlockType.FUNCTION_IMPL, "Get_No_Of_Periods", true, 251640, 253416, 13);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_record", true, 251895, 252168, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (rec_.p1_key IS NOT NULL)", true, 252252, 252340, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (rec_.p2_key IS NOT NULL)", true, 252345, 252433, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (rec_.p3_key IS NOT NULL)", true, 252438, 252526, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (rec_.p4_key IS NOT NULL)", true, 252531, 252619, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (rec_.p5_key IS NOT NULL)", true, 252624, 252712, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (rec_.p6_key IS NOT NULL)", true, 252717, 252805, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (rec_.p7_key IS NOT NULL)", true, 252810, 252898, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (rec_.p8_key IS NOT NULL)", true, 252903, 252991, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (rec_.p9_key IS NOT NULL)", true, 252996, 253084, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (rec_.p10_key IS NOT NULL)", true, 253089, 253178, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (rec_.p11_key IS NOT NULL)", true, 253183, 253272, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(96).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (rec_.p12_key IS NOT NULL)", true, 253277, 253366, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 97, PlsqlBlockType.PROCEDURE_IMPL, "Import_Fin_Values", true, 253418, 271245, 10);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 71089, Begin", true, 253670, 253689, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 71089, End", true, 253740, 253757, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 71089, Begin", true, 254548, 254567, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Bug 71089, End", true, 254610, 254627, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 68118, Begin", true, 255079, 255098, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Bug 68118, End", true, 255288, 255305, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 6, PlsqlBlockType.CURSOR, "get_keys", true, 255310, 255629, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 7, PlsqlBlockType.CURSOR, "get_measure_accounts", true, 255633, 255754, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 8, PlsqlBlockType.COMMENT, "-- Bug 68118, Begin", true, 255764, 255894, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  ( bp_installed_ )", true, 255976, 271222, 15);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 71089, Begin", true, 256045, 256064, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- ifs_assert_safe makrlk 080205", true, 256459, 256515, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (temp_rec_.p1_key IS NOT NULL)", true, 256605, 256974, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (temp_rec_.p2_key IS NOT NULL)", true, 256982, 257351, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (temp_rec_.p3_key IS NOT NULL)", true, 257359, 257728, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (temp_rec_.p4_key IS NOT NULL)", true, 257736, 258105, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (temp_rec_.p5_key IS NOT NULL)", true, 258113, 258482, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (temp_rec_.p6_key IS NOT NULL)", true, 258490, 258859, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (temp_rec_.p7_key IS NOT NULL)", true, 258867, 259236, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (temp_rec_.p8_key IS NOT NULL)", true, 259244, 259613, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (temp_rec_.p9_key IS NOT NULL)", true, 259621, 259990, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (temp_rec_.p10_key IS NOT NULL)", true, 259998, 260373, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 12, PlsqlBlockType.IF, "IF  (temp_rec_.p11_key IS NOT NULL)", true, 260381, 260756, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 13, PlsqlBlockType.IF, "IF  (temp_rec_.p12_key IS NOT NULL)", true, 260764, 261139, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks(), 14, PlsqlBlockType.IF, "IF  (attr_ IS NOT NULL)", true, 261147, 271210, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060220", true, 261561, 261593, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (template_rec_.company IS NOT NULL)", true, 261802, 271195, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN get_keys", true, 261859, 271101, 6);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "i IN 0..11", true, 261954, 262036, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- the call has been made from busper side which means only selected measures should be updated", true, 262214, 262308, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(scorecard_object_, mea_ptr_, mea_name_, mea_value_))", true, 262324, 265132, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (current_ = mea_value_)", true, 262438, 265106, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- get the list of accounts connected to the current measure...", true, 262491, 262553, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "acc_rec_ IN get_measure_accounts", true, 262575, 265080, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 68118, Begin", true, 262639, 262658, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 71089, Begin. change the OPEN line", true, 263003, 263103, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 71089, End", true, 263405, 263528, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (temp_measure_ = acc_rec_.account)", true, 263554, 264988, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060220", true, 264313, 264345, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(2).getChildBlocks().get(0).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 68118, End the IF condition  ", true, 265013, 265049, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- the call has been made from budpro side which means all measures should be updated", true, 265149, 265233, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (scorecard_object_ IS NULL)", true, 265249, 267816, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- get the list of accounts connected to the current measure...", true, 265303, 265365, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "acc_rec_ IN get_measure_accounts", true, 265384, 267793, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 68118, Begin", true, 265447, 265466, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 71089, Begin. change the OPEN line", true, 265796, 265893, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 71089, End", true, 266183, 266300, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (temp_measure_ = acc_rec_.account)", true, 266322, 267708, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- ifs_assert_safe iswalk 060220", true, 267057, 267089, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 68118, End the IF condition", true, 267730, 267764, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (cum_val_attr_ IS NOT NULL)", true, 267833, 271078, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(cum_val_attr_, ptr_, name_, value_))", true, 267921, 270243, 12);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (temp_rec_.p1_key = name_)", true, 268022, 268183, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (temp_rec_.p2_key = name_)", true, 268206, 268367, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (temp_rec_.p3_key = name_)", true, 268390, 268551, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (temp_rec_.p4_key = name_)", true, 268574, 268735, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (temp_rec_.p5_key = name_)", true, 268758, 268919, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "IF  (temp_rec_.p6_key = name_)", true, 268942, 269103, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (temp_rec_.p7_key = name_)", true, 269126, 269287, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "IF  (temp_rec_.p8_key = name_)", true, 269310, 269471, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "IF  (temp_rec_.p9_key = name_)", true, 269494, 269655, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 9, PlsqlBlockType.IF, "IF  (temp_rec_.p10_key = name_)", true, 269678, 269840, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 10, PlsqlBlockType.IF, "IF  (temp_rec_.p11_key = name_)", true, 269863, 270027, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(0).getChildBlocks(), 11, PlsqlBlockType.IF, "IF  (temp_rec_.p12_key = name_)", true, 270050, 270214, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "i IN 0..11", true, 270320, 270580, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Bug 68118, Begin remove the the IF condition", true, 270363, 270410, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(97).getChildBlocks().get(9).getChildBlocks().get(14).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(5).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Bug 68118, End", true, 270534, 270551, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 98, PlsqlBlockType.PROCEDURE_IMPL, "Calc_Measure_From_Budpro", true, 271246, 274564, 5);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_level_type", true, 271886, 272115, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_measures_planform", true, 272120, 272370, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks(), 2, PlsqlBlockType.CURSOR, "get_years", true, 272375, 272503, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks(), 3, PlsqlBlockType.CURSOR, "get_period_count", true, 272508, 272683, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks(), 4, PlsqlBlockType.WHILE_LOOP, "( Client_SYS.Get_Next_From_Attr(comp_attr_, ptr_, name_, value_) )", true, 272904, 274534, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'OBJECT_ID')", true, 272988, 273062, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks(), 1, PlsqlBlockType.IF, "IF (level_type_ = 'COMPONENT')", true, 273172, 274521, 2);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_measures_planform_ IN get_measures_planform", true, 273238, 273492, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF ( INSTR(get_measures_planform_.measure_calc_formula,object_id_) > 0)", true, 273307, 273473, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF ( measures_tab.COUNT > 0 )", true, 273591, 274507, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "x IN measures_tab.FIRST..measures_tab.LAST", true, 273638, 274490, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "get_years_ IN get_years", true, 273705, 274468, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(98).getChildBlocks().get(4).getChildBlocks().get(1).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF ( Check_Exist___ (environment_,scorecard_,year_,budget_version_,measures_tab(x)))", true, 273950, 274443, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 99, PlsqlBlockType.FUNCTION_IMPL, "Get", true, 274567, 275123, 1);
            assertBlock(lstBlockFac.get(20).getChildBlocks().get(99).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 274765, 275024, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 100, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 275124, 275588, 0);
            assertBlock(lstBlockFac.get(20).getChildBlocks(), 101, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 275590, 275632, 0);
            assertBlock(lstBlockFac, 21, PlsqlBlockType.COMMENT, "COMMENT...", false, 275876, 275953, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced13() throws IOException, BadLocationException {
        System.out.println("Advanced test case 13");
        FileObject fileObject = fs.getRoot().createData("Trainer.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "Trainer.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 11);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: Trainer", false, 0, 601, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- VIEWS FOR SELECTS ", false, 933, 1166, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.VIEW, "TRAINER", false, 1196, 1939, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.TABLE_COMMENT, "TRAINER", false, 1942, 2010, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.COLUMN_COMMENT, "TRAINER", false, 2013, 2956, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.VIEW, "TRAINER_LOV1", false, 2993, 3251, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.TABLE_COMMENT, "TRAINER_LOV1", false, 3254, 3342, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.COLUMN_COMMENT, "TRAINER_LOV1", false, 3345, 3658, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 3661, 3894, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.PACKAGE_BODY, "TRAINER_API", false, 3933, 28781, 34);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 3973, 5083, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Id___", true, 5084, 6240, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 5378, 5530, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "exist_control", true, 5534, 5624, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 5689, 5773, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 5859, 5940, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSE", true, 5944, 6011, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_IMPL, "Lock_By_Keys___", true, 6242, 6797, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "lock_control", true, 6382, 6491, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (lock_control%FOUND)", true, 6556, 6629, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 6633, 6699, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Id___", true, 6799, 7208, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 6909, 6992, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (getrec%NOTFOUND)", true, 7048, 7146, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 4, PlsqlBlockType.FUNCTION_IMPL, "Get_Object_By_Keys___", true, 7210, 7528, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "getrec", true, 7326, 7412, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 5, PlsqlBlockType.FUNCTION_IMPL, "Check_Exist___", true, 7530, 7935, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 7623, 7717, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(5).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (exist_control%FOUND)", true, 7786, 7873, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_IMPL, "Get_Id_Version_By_Keys___", true, 7937, 8307, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_version", true, 8072, 8180, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 7, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR INSERT ", true, 8308, 9053, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_IMPL, "Prepare_Insert___", true, 9055, 9176, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 9, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Insert___", true, 9179, 12003, 6);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 9496, 10607, 9);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'PERSON_ID')", true, 9573, 9640, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'INTERNAL')", true, 9647, 9715, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'FNAME')", true, 9722, 9787, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'LNAME')", true, 9794, 9859, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'TRAINING_INSTITUTION_NAME')", true, 9866, 10131, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 10009, 10131, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'DATE_OF_BIRTH')", true, 10138, 10250, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'SEX')", true, 10257, 10438, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 10351, 10438, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'REMARK')", true, 10445, 10509, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSE", true, 10516, 10594, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dummy_rec_.name1 IS NULL) OR (dummy_rec_.name4 IS NULL)", true, 10715, 11035, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dummy_rec_.name1 IS NULL)", true, 10847, 10932, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dummy_rec_.name4 IS NULL)", true, 10939, 11024, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (dummy_rec_.date_of_birth IS NULL)", true, 11106, 11240, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (dummy_rec_.sex IS NULL)", true, 11244, 11371, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (newrec_.internal = '1')", true, 11444, 11671, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Trainer_API.Check_Person_Internal(newrec_.person_id) = 0)", true, 11483, 11671, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 11675, 11885, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(9).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Trainer_API.Check_Person_Internal(newrec_.person_id) = 1)", true, 11686, 11874, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 10, PlsqlBlockType.PROCEDURE_IMPL, "Insert___", true, 12006, 13457, 4);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_objid", true, 12270, 12373, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT", true, 12458, 12766, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- update person register", true, 12768, 12799, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(10).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (get_objid_)", true, 13248, 13359, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 11, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR UPDATE ", true, 13459, 14043, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_IMPL, "Unpack_Check_Update___", true, 14045, 16803, 6);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.WHILE_LOOP, "(Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_))", true, 14351, 15479, 9);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (name_ = 'PERSON_ID')", true, 14428, 14512, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (name_ = 'INTERNAL')", true, 14519, 14587, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (name_ = 'FNAME')", true, 14594, 14659, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSIF (name_ = 'LNAME')", true, 14666, 14731, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 4, PlsqlBlockType.IF, "ELSIF (name_ = 'TRAINING_INSTITUTION_NAME')", true, 14738, 15003, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 14881, 15003, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSIF (name_ = 'DATE_OF_BIRTH')", true, 15010, 15122, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 6, PlsqlBlockType.IF, "ELSIF (name_ = 'SEX')", true, 15129, 15310, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (value_ IS NOT NULL)", true, 15223, 15310, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 7, PlsqlBlockType.IF, "ELSIF (name_ = 'REMARK')", true, 15317, 15381, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(0).getChildBlocks(), 8, PlsqlBlockType.IF, "ELSE", true, 15388, 15466, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dummy_rec_.name1 IS NULL) OR (dummy_rec_.name4 IS NULL)", true, 15516, 15836, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (dummy_rec_.name1 IS NULL)", true, 15648, 15733, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (dummy_rec_.name4 IS NULL)", true, 15740, 15825, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (dummy_rec_.date_of_birth IS NULL)", true, 15907, 16041, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (dummy_rec_.sex IS NULL)", true, 16045, 16172, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (newrec_.internal = '1')", true, 16245, 16472, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(4).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Trainer_API.Check_Person_Internal(newrec_.person_id) = 0)", true, 16284, 16472, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks(), 5, PlsqlBlockType.IF, "ELSE", true, 16476, 16686, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(12).getChildBlocks().get(5).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (Trainer_API.Check_Person_Internal(newrec_.person_id) = 1)", true, 16487, 16675, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Update___", true, 16806, 18487, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  by_keys_", true, 17217, 17547, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE trainer_tab t", true, 17240, 17546, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 17551, 17866, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE trainer_tab t", true, 17562, 17854, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(13).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- update person register", true, 17874, 17917, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 14, PlsqlBlockType.COMMENT, "-- IMPLEMENTATION BASE METHODS FOR DELETE ", true, 18489, 19086, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Check_Delete___", true, 19088, 19295, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Delete___", true, 19298, 19788, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (by_keys_)", true, 19565, 19680, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE FROM &TABLE", true, 19616, 19679, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 19684, 19773, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(16).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "DELETE", true, 19695, 19761, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 17, PlsqlBlockType.COMMENT, "-- PRIVATE BASE METHODS ", true, 19790, 22085, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Lock__", true, 22087, 22382, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 19, PlsqlBlockType.PROCEDURE_IMPL, "New__", true, 22385, 23047, 3);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'PREPARE')", true, 22683, 22744, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'CHECK')", true, 22748, 22835, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(19).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 22839, 22999, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Modify__", true, 23050, 23830, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(20).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 23381, 23519, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(20).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 23523, 23779, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 21, PlsqlBlockType.PROCEDURE_IMPL, "Remove__", true, 23833, 24385, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(21).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (action_ = 'CHECK')", true, 24068, 24173, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(21).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (action_ = 'DO')", true, 24177, 24334, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 22, PlsqlBlockType.COMMENT, "-- PUBLIC BASE METHODS ", true, 24387, 24840, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 23, PlsqlBlockType.PROCEDURE_IMPL, "Exist", true, 24842, 25067, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(23).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (NOT Check_Exist___(person_id_))", true, 24961, 25056, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 24, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 25069, 26009, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 25, PlsqlBlockType.FUNCTION_IMPL, "Get_Training_Institution_Name", true, 26011, 26416, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(25).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_attr", true, 26149, 26258, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 26, PlsqlBlockType.FUNCTION_IMPL, "Get_Fname", true, 26419, 26549, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 27, PlsqlBlockType.FUNCTION_IMPL, "Get_Lname", true, 26552, 26682, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 28, PlsqlBlockType.FUNCTION_IMPL, "Get_Name", true, 26684, 26819, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 29, PlsqlBlockType.FUNCTION_IMPL, "Check_Person_Internal", true, 26821, 26997, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 30, PlsqlBlockType.FUNCTION_IMPL, "Get_Internal_External", true, 26999, 27309, 2);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(30).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (internal_ = '0')", true, 27086, 27169, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(30).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSIF (internal_ = '1')", true, 27173, 27266, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 31, PlsqlBlockType.FUNCTION_IMPL, "Replace_Person_Id", true, 27311, 28260, 4);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(31).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_pers", true, 27425, 27536, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(31).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (new_person_id_ = old_person_id_)", true, 27704, 27777, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(31).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (Check_Exist___(new_person_id_) = TRUE)", true, 27781, 27861, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(31).getChildBlocks(), 3, PlsqlBlockType.WHILE_LOOP, "(get_pers%FOUND)", true, 27927, 28199, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks().get(31).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "UPDATE trainer_tab t", true, 28014, 28138, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 32, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 28261, 28725, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 33, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 28727, 28769, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.COMMENT, "COMMENT...", false, 28796, 28873, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced14() throws IOException, BadLocationException {
        System.out.println("Advanced test case 14");
        FileObject fileObject = fs.getRoot().createData("fndbas_ora.cre");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "fndbas_ora.cre");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 12);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- File : fndbas_ora.cre", false, 0, 232, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.STATEMENT, "TABLE &AO..X_ACTIVITY_GRANT_FILTER_TAB", false, 234, 556, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.STATEMENT, "TABLE &AO..X_ACTIVITY_GRANT_FILTER_TAB", false, 558, 770, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.STATEMENT, "TABLE &AO..X_FNDDR_ACTIVITY_ENT_USAGE_TAB", false, 773, 1079, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.STATEMENT, "TABLE &AO..X_FNDDR_ACTIVITY_ENT_USAGE_TAB", false, 1081, 1291, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.STATEMENT, "INDEX &AO..X_FNDDR_ACTIVITY_ENT_USEAGE_FK", false, 1293, 1435, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.COMMENT, "-- CREATE sequence", false, 1438, 1456, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.STATEMENT, "SEQUENCE &AO..X_Ext_File_Batch_Param_Seq", false, 1458, 1505, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.COMMENT, "-- CREATE trigger", false, 1508, 1525, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.TRIGGER, "x_vmogss_base_usermap_change", false, 1527, 1958, 1);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "insert into &AO..vmo_base_gss_scope(gss_id, created, source_tbl, source_info) values(:newrec.gss_id, sysdate, 'VMO_BASE_GSS_USERMAP_CHANGE', :newrec.gss_id)", true, 1757, 1913, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.COMMENT, "-- CREATE trigger dynamically", false, 1962, 1991, 0);
            assertBlock(lstBlockFac, 11, PlsqlBlockType.BEGIN_END, "", false, 1993, 2612, 3);
            assertBlock(lstBlockFac.get(11).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- OK if ORA ", true, 2430, 2479, 0);
            assertBlock(lstBlockFac.get(11).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  INSTR(SQLERRM,'-00942') != 0", true, 2488, 2530, 0);
            assertBlock(lstBlockFac.get(11).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 2539, 2605, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced15() throws IOException, BadLocationException {
        System.out.println("Advanced test case 15");
        FileObject fileObject = fs.getRoot().createData("person.ins");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "person.ins");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 23);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Module: PERSON", false, 0, 1680, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.BEGIN_END, "", false, 1683, 1814, 1);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 1689, 1808, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.DECLARE_END, "", false, 1817, 2105, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (val_ is NULL or val_='Yes,No')", true, 1939, 2100, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.COMMENT, "-- Transfer companies from finance to hr", false, 2108, 2148, 0);
            assertBlock(lstBlockFac, 4, PlsqlBlockType.BEGIN_END, "", false, 2375, 2664, 1);
            assertBlock(lstBlockFac.get(4).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO person_company_tab (", true, 2381, 2658, 0);
            assertBlock(lstBlockFac, 5, PlsqlBlockType.DECLARE_END, "", false, 2667, 3275, 2);
            assertBlock(lstBlockFac.get(5).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 2678, 2860, 0);
            assertBlock(lstBlockFac.get(5).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "rec_ IN ( * FROM company_emp_tab)", true, 2887, 3270, 1);
            assertBlock(lstBlockFac.get(5).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 3024, 3232, 1);
            assertBlock(lstBlockFac.get(5).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO company_person_tab(company_id,emp_no,master_employment,operator,rowversion)", true, 3061, 3218, 0);
            assertBlock(lstBlockFac, 6, PlsqlBlockType.DECLARE_END, "", false, 3278, 3823, 2);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 3289, 3415, 0);
            assertBlock(lstBlockFac.get(6).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "rec_ IN ( * FROM  person_info_tab)", true, 3446, 3818, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 3578, 3767, 1);
            assertBlock(lstBlockFac.get(6).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO pers_tab(person_id,have_child,external_display_name,rowversion)", true, 3621, 3748, 0);
            assertBlock(lstBlockFac, 7, PlsqlBlockType.BEGIN_END, "", false, 3826, 4088, 1);
            assertBlock(lstBlockFac.get(7).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO employee_name_configurator_tab", true, 3832, 4082, 0);
            assertBlock(lstBlockFac, 8, PlsqlBlockType.DECLARE_END, "", false, 4100, 5981, 5);
            assertBlock(lstBlockFac.get(8).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 4142, 4145, 0);
            assertBlock(lstBlockFac.get(8).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "COMMENT...", true, 4807, 4810, 0);
            assertBlock(lstBlockFac.get(8).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.", true, 5053, 5165, 0);
            assertBlock(lstBlockFac.get(8).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "COMMENT...", true, 5390, 5393, 0);
            assertBlock(lstBlockFac.get(8).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.", true, 5641, 5753, 0);
            assertBlock(lstBlockFac, 9, PlsqlBlockType.DECLARE_END, "", false, 5993, 7846, 5);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 6035, 6038, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "COMMENT...", true, 6700, 6703, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.", true, 6934, 7046, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "COMMENT...", true, 7271, 7274, 0);
            assertBlock(lstBlockFac.get(9).getChildBlocks(), 4, PlsqlBlockType.COMMENT, "-- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.", true, 7506, 7618, 0);
            assertBlock(lstBlockFac, 10, PlsqlBlockType.DECLARE_END, "", false, 7858, 8561, 1);
            assertBlock(lstBlockFac.get(10).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 7900, 7903, 0);
            assertBlock(lstBlockFac, 11, PlsqlBlockType.DECLARE_END, "", false, 8574, 9270, 2);
            assertBlock(lstBlockFac.get(11).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_comp_exist", true, 8585, 8757, 0);
            assertBlock(lstBlockFac.get(11).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "get_company_ IN ( DISTINCT company_id FROM person_company_tab)", true, 8794, 9265, 1);
            assertBlock(lstBlockFac.get(11).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (check_comp_exist%NOTFOUND)", true, 8983, 9219, 1);
            assertBlock(lstBlockFac.get(11).getChildBlocks().get(1).getChildBlocks().get(0).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO EMPLOYEE_STATUS_TAB(company_id, seq_no, employee_status, active, status_obsolete, rowversion)", true, 9028, 9203, 0);
            assertBlock(lstBlockFac, 12, PlsqlBlockType.BEGIN_END, "", false, 9273, 9978, 0);
            assertBlock(lstBlockFac, 13, PlsqlBlockType.PROCEDURE_IMPL, "Temp_Person_Document_Default", false, 10084, 11481, 2);
            assertBlock(lstBlockFac.get(13).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "existdoc", true, 10416, 10546, 0);
            assertBlock(lstBlockFac.get(13).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  existdoc%NOTFOUND", true, 10635, 11428, 1);
            assertBlock(lstBlockFac.get(13).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT", true, 10667, 11116, 0);
            assertBlock(lstBlockFac, 14, PlsqlBlockType.DECLARE_END, "", false, 11484, 11672, 0);
            assertBlock(lstBlockFac, 15, PlsqlBlockType.STATEMENT, "DROP PROCEDURE Temp_Person_Document_Default", false, 11722, 11765, 0);
            assertBlock(lstBlockFac, 16, PlsqlBlockType.BEGIN_END, "", false, 11769, 11973, 0);
            assertBlock(lstBlockFac, 17, PlsqlBlockType.DECLARE_END, "", false, 12190, 14461, 2);
            assertBlock(lstBlockFac.get(17).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 12201, 12307, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 12475, 14428, 6);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "SELECT MARITAL_STATUS_ID.NEXTVAL INTO married_seq_ FROM dual", true, 12512, 12572, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT", true, 12581, 12835, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "SELECT MARITAL_STATUS_ID.NEXTVAL INTO unmarried_seq_ FROM dual", true, 13113, 13175, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.STATEMENT, "INSERT", true, 13187, 13475, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "SELECT MARITAL_STATUS_ID.NEXTVAL INTO widower_seq_ FROM dual", true, 13775, 13835, 0);
            assertBlock(lstBlockFac.get(17).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.STATEMENT, "INSERT", true, 13847, 14133, 0);
            assertBlock(lstBlockFac, 18, PlsqlBlockType.BEGIN_END, "", false, 14497, 14715, 0);
            assertBlock(lstBlockFac, 19, PlsqlBlockType.DECLARE_END, "", false, 14939, 16749, 2);
            assertBlock(lstBlockFac.get(19).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exits", true, 14950, 15100, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  (check_exits%NOTFOUND)", true, 15185, 16719, 11);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15226, 15355, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15362, 15482, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15490, 15633, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15640, 15767, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 4, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15776, 15904, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 5, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 15911, 16035, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 6, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 16044, 16170, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 7, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 16177, 16297, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 8, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 16306, 16430, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 9, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 16438, 16566, 0);
            assertBlock(lstBlockFac.get(19).getChildBlocks().get(1).getChildBlocks(), 10, PlsqlBlockType.STATEMENT, "INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)", true, 16574, 16701, 0);
            assertBlock(lstBlockFac, 20, PlsqlBlockType.COMMENT, "-- Bug 73297, Start", false, 16761, 16779, 0);
            assertBlock(lstBlockFac, 21, PlsqlBlockType.DECLARE_END, "", false, 17024, 18309, 2);
            assertBlock(lstBlockFac.get(21).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "COMMENT...", true, 17066, 17069, 0);
            assertBlock(lstBlockFac.get(21).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "COMMENT...", true, 17686, 17689, 0);
            assertBlock(lstBlockFac, 22, PlsqlBlockType.COMMENT, "-- Bug 73297, End", false, 18320, 18336, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced16() throws IOException, BadLocationException {
        System.out.println("Advanced test case 16");
        FileObject fileObject = fs.getRoot().createData("sys_IalObjectSlave.api");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "sys_IalObjectSlave.api");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 3);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: IalObjectSlave", false, 0, 513, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.PACKAGE, "IAL_OBJECT_SLAVE_API", false, 679, 2462, 11);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 814, 1519, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 1, PlsqlBlockType.PROCEDURE_DEF, "Exec_Ddl_Statement", true, 1521, 1582, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 2, PlsqlBlockType.PROCEDURE_DEF, "Enumerate_Column_Info", true, 1584, 1665, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 3, PlsqlBlockType.PROCEDURE_DEF, "Enumerate_Index_Info", true, 1667, 1759, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 4, PlsqlBlockType.PROCEDURE_DEF, "Add_Index", true, 1761, 1842, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 5, PlsqlBlockType.PROCEDURE_DEF, "Remove_Index", true, 1844, 1928, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 6, PlsqlBlockType.PROCEDURE_DEF, "Get_Object_Info", true, 1930, 2011, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 7, PlsqlBlockType.FUNCTION_DEF, "Check_Index", true, 2013, 2111, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 8, PlsqlBlockType.PROCEDURE_DEF, "Get_Table_Info", true, 2113, 2199, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 9, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 2201, 2434, 0);
            assertBlock(lstBlockFac.get(1).getChildBlocks(), 10, PlsqlBlockType.PROCEDURE_DEF, "Init", true, 2436, 2451, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.COMMENT, "COMMENT...", false, 2477, 2554, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced17() throws IOException, BadLocationException {
        System.out.println("Advanced test case 17");
        FileObject fileObject = fs.getRoot().createData("sys_IalObjectSlave.apy");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "sys_IalObjectSlave.apy");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 4);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- Logical unit: IalObjectSlave", false, 0, 1094, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.COMMENT, "-- PACKAGES FOR METHODS ", false, 1209, 1442, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.PACKAGE_BODY, "IAL_OBJECT_SLAVE_API", false, 1494, 13066, 21);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ", true, 1547, 1780, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 1, PlsqlBlockType.FUNCTION_DEF, "Is_Locally_Managed___", true, 1782, 1859, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 2, PlsqlBlockType.FUNCTION_DEF, "Is_Column_Indexed___", true, 1861, 1968, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 3, PlsqlBlockType.FUNCTION_DEF, "Get_Column_Id___", true, 1970, 2073, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 4, PlsqlBlockType.FUNCTION_DEF, "Table_Exist___", true, 2075, 2145, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- LU SPECIFIC IMPLEMENTATION METHODS ", true, 2147, 2380, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 6, PlsqlBlockType.FUNCTION_IMPL, "Is_Locally_Managed___", true, 2382, 2830, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(6).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_extent_management", true, 2502, 2638, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 7, PlsqlBlockType.FUNCTION_IMPL, "Is_Column_Indexed___", true, 2832, 3438, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(7).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_index", true, 3075, 3196, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(7).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  get_index%FOUND", true, 3283, 3330, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(7).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 3334, 3374, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 8, PlsqlBlockType.FUNCTION_IMPL, "Get_Column_Id___", true, 3440, 3824, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(8).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_id", true, 3565, 3713, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 9, PlsqlBlockType.FUNCTION_IMPL, "Table_Exist___", true, 3826, 4230, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(9).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "exist_control", true, 3922, 4012, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(9).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  exist_control%FOUND", true, 4081, 4167, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 10, PlsqlBlockType.COMMENT, "-- LU SPECIFIC PRIVATE METHODS ", true, 4232, 4937, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 11, PlsqlBlockType.PROCEDURE_IMPL, "Exec_Ddl_Statement", true, 4939, 5143, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(11).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Safe as package is in IAL Owner schema", true, 5012, 5091, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 12, PlsqlBlockType.PROCEDURE_IMPL, "Enumerate_Column_Info", true, 5145, 6488, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_column_info", true, 5389, 5531, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  Table_Exist___(table_name_)", true, 5541, 6017, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN get_column_info(table_name_)", true, 5583, 6017, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 6021, 6438, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(12).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.FOR_LOOP, "rec_ IN get_column_info(view_name_)", true, 6032, 6427, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 13, PlsqlBlockType.PROCEDURE_IMPL, "Enumerate_Index_Info", true, 6490, 8726, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_index_info", true, 6793, 6896, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "get_columns", true, 6901, 7071, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "ind_ IN get_index_info", true, 7081, 8672, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  (ind_.uniqueness = 'UNIQUE')", true, 7119, 7253, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks(), 1, PlsqlBlockType.IF, "ELSE", true, 7260, 7369, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "col_ IN get_columns(ind_.index_name)", true, 7423, 7571, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks(), 3, PlsqlBlockType.IF, "IF  (col_list_ IS NOT NULL)", true, 7578, 8659, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Statements only necessary if not locally managed tablespace", true, 7765, 7827, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  NOT Is_Locally_Managed___(ind_.tablespace_name)", true, 7837, 8538, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(13).getChildBlocks().get(2).getChildBlocks().get(3).getChildBlocks(), 2, PlsqlBlockType.COMMENT, "-- Add this index to the list for all indexes", true, 8548, 8593, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 14, PlsqlBlockType.PROCEDURE_IMPL, "Add_Index", true, 8728, 9019, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 15, PlsqlBlockType.PROCEDURE_IMPL, "Remove_Index", true, 9021, 9272, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 16, PlsqlBlockType.PROCEDURE_IMPL, "Get_Object_Info", true, 9274, 10356, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "find_objdate_column", true, 9469, 9615, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 1, PlsqlBlockType.IF, "IF  Table_Exist___(table_name_)", true, 9625, 10145, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Add table name", true, 9667, 9684, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Add info about objdate column", true, 9781, 9813, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  find_objdate_column%FOUND", true, 9897, 10008, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.IF, "ELSE", true, 10015, 10112, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks(), 2, PlsqlBlockType.IF, "ELSE", true, 10149, 10312, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(16).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- If no table exist, then no objdate column will exist either...", true, 10160, 10225, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 17, PlsqlBlockType.FUNCTION_IMPL, "Check_Index", true, 10358, 11197, 3);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_indexes", true, 10534, 10641, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 1, PlsqlBlockType.CURSOR, "find_index_column", true, 10646, 10816, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks(), 2, PlsqlBlockType.FOR_LOOP, "rec_ IN get_indexes", true, 10826, 11160, 1);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(17).getChildBlocks().get(2).getChildBlocks(), 0, PlsqlBlockType.IF, "IF  find_index_column%FOUND", true, 10951, 11116, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 18, PlsqlBlockType.PROCEDURE_IMPL, "Get_Table_Info", true, 11199, 12544, 2);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "get_table_information", true, 11330, 11463, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks(), 1, PlsqlBlockType.FOR_LOOP, "tab_ IN get_table_information(name_ || '_TAB')", true, 11473, 12498, 4);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 0, PlsqlBlockType.COMMENT, "-- Initial statement", true, 11535, 11555, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Statements only necessary if not locally managed tablespace", true, 11680, 11742, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  NOT Is_Locally_Managed___(tab_.tablespace_name)", true, 11749, 12391, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks().get(18).getChildBlocks().get(1).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Final statement", true, 12398, 12416, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 19, PlsqlBlockType.COMMENT, "-- FOUNDATION1 METHODS ", true, 12546, 13010, 0);
            assertBlock(lstBlockFac.get(2).getChildBlocks(), 20, PlsqlBlockType.PROCEDURE_IMPL, "Init", true, 13012, 13054, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.COMMENT, "COMMENT...", false, 13081, 13158, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    @Test
    public void testAdvanced18() throws IOException, BadLocationException {
        System.out.println("Advanced test case 18");
        FileObject fileObject = fs.getRoot().createData("txtser.ins");
        assertNotNull(fileObject);
        try {
            PlsqlBlockFactory blockFac = loadAsTmpFile(fileObject, "txtser.ins");
            assertNotNull(blockFac);

            List<PlsqlBlock> lstBlockFac = blockFac.getBlockHierarchy();
//         printHierarchy(lstBlockFac, "");
//         generateAssert(lstBlockFac, "lstBlockFac", "false");
            assertTrue(lstBlockFac.size() == 4);
            assertBlock(lstBlockFac, 0, PlsqlBlockType.COMMENT, "-- File: txtser.ins", false, 0, 977, 0);
            assertBlock(lstBlockFac, 1, PlsqlBlockType.JAVA_SOURCE, "", false, 995, 6190, 0);
            assertBlock(lstBlockFac, 2, PlsqlBlockType.COMMENT, "-- Creation of Schedules", false, 6194, 6218, 0);
            assertBlock(lstBlockFac, 3, PlsqlBlockType.DECLARE_END, "", false, 6289, 9815, 7);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 0, PlsqlBlockType.CURSOR, "check_exist", true, 6654, 6753, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 1, PlsqlBlockType.COMMENT, "-- Sync Index", true, 6773, 6799, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 2, PlsqlBlockType.IF, "IF  (check_exist%NOTFOUND)", true, 6999, 7666, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 3, PlsqlBlockType.COMMENT, "-- Optimize Index", true, 7698, 7728, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 4, PlsqlBlockType.IF, "IF  (check_exist%NOTFOUND)", true, 7971, 8639, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 5, PlsqlBlockType.COMMENT, "-- Delete old Search Results         ", true, 8669, 8881, 0);
            assertBlock(lstBlockFac.get(3).getChildBlocks(), 6, PlsqlBlockType.IF, "IF  (check_exist%NOTFOUND)", true, 9117, 9786, 0);
        } finally {
            if (fileObject != null) {
                fileObject.delete();
            }
        }
    }

    private PlsqlBlockFactory loadAsTmpFile(FileObject fileObj, String fileName) throws IOException, BadLocationException {
        InputStream inputStream = PlsqlBlockFactoryTest.class.getResourceAsStream(fileName);
        InputStreamReader indexReader = new InputStreamReader(inputStream);
        BufferedReader input = new BufferedReader(indexReader);
        String content = "";
        while (input.ready()) {
            content = content + input.readLine() + "\n";
        }
        input.close();
        inputStream.close();
        indexReader.close();
        writeFile(content, fileObj);

        DataObject dataObj = DataFolder.find(fileObj);
        EditorCookie ec = dataObj.getLookup().lookup(EditorCookie.class);
        assertNotNull(ec);
        Task task = ec.prepareDocument();
        task.waitFinished();
        PlsqlBlockFactory blockFac = dataObj.getLookup().lookup(PlsqlBlockFactory.class);
        assertNotNull(blockFac);
        Document doc = ec.getDocument();
        assertNotNull(doc);
        doc.putProperty(Language.class, PlsqlTokenId.language());

        TokenHierarchy tokenHier = TokenHierarchy.get(doc);
        assertNotNull(tokenHier);
        TokenSequence<PlsqlTokenId> ts = tokenHier.tokenSequence(PlsqlTokenId.language());
        assertNotNull(ts);
        blockFac.initHierarchy(doc);

        return blockFac;
    }

    private void writeFile(String content, FileObject file) throws IOException {
        OutputStream os = file.getOutputStream();
        os.write(content.getBytes("UTF-8"));
        os.close();
    }

    private void printHierarchy(List<PlsqlBlock> lstBlockFac, String txt) {
        for (PlsqlBlock block : lstBlockFac) {
            System.out.println(txt + "Block Name:" + block.getName() + " Type:" + block.getType() + " Start:" + block.getStartOffset() + " End:" + block.getEndOffset() + " Children:" + block.getChildBlocks().size());
            printHierarchy(block.getChildBlocks(), txt + "\t");
        }
    }

    private void assertBlock(List<PlsqlBlock> lstBlock, int index, PlsqlBlockType type, String name, boolean parentExisting, int startOffset, int endOffset, int childCount) {
        PlsqlBlock block = lstBlock.get(index);
        assertNotNull(block);
        assertTrue(block.getType() == type);
        assertTrue(block.getName().equals(name));
        assertTrue(block.getStartOffset() == startOffset);
        assertTrue(block.getEndOffset() == endOffset);
        assertTrue(block.getChildCount() == childCount);

        if (parentExisting) {
            assertNotNull(block.getParent());
        } else {
            assertNull(block.getParent());
        }
    }

    /**
     * Method that generates the assert block statements
     *
     * @param lstBlockFac
     * @param txt
     * @param isParent
     */
    private void generateAssert(List<PlsqlBlock> lstBlockFac, String txt, String isParent) {
        for (int i = 0; i < lstBlockFac.size(); i++) {
            PlsqlBlock block = lstBlockFac.get(i);
            System.out.println("assertBlock(" + txt + ", " + i + ", PlsqlBlockType." + block.getType() + ", \"" + toOneLine(block.getName())
                    + "\", " + isParent + ", " + block.getStartOffset() + ", " + block.getEndOffset() + ", " + block.getChildBlocks().size() + ");");
            generateAssert(block.getChildBlocks(), txt + ".get(" + i + ").getChildBlocks()", "true");
        }
    }

    private String toOneLine(String name) {
        String tmp = "";
        int index = name.indexOf("\n");
        if (index == -1) {
            return name;
        }

        while (index != -1) {
            tmp = tmp + name.substring(0, index) + "\\n";
            if (name.length() > index + 1) {
                name = name.substring(index + 1);
                index = name.indexOf("\n");
                if (index == -1) {
                    tmp = tmp + name + "\\n";  //\n is added here because we substring in the end
                }
            } else {
                break;
            }
        }

        tmp = tmp.substring(0, tmp.length() - 2);
        return tmp;
    }
}
