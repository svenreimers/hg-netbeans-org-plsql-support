-----------------------------------------------------------------------------
--  Module: PERSON
--
--  File:   PERSON.INS
--
--  IFS/Design Template Version 2.0.0
--
--  Date    Sign     History
--  ------  ----     -----------------------------------------------------------
--  080425  Deidlk   Bug 73297, Added the property codes EMPPREFIX and EMPMASK to PROPERTY_RULE_TAB
--  070525  Cprilk   B145522,Modified the DATA_TYPE_DB of property code 'EMPLOYEEID'.
--  070418  Cprilk   B142452,Added data in to PROTECTED_INFORMATION_TAB.
--  070409  Cprilk   Call 142241,Added property code 'EMPLOYEEID'
--  070320  Nueklk   Insert data into Marital_Status_Tab
--  061003  ChBalk   Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date
--                   and Database_SYS.get_last_calendar_date.
--  040921  HiMa  Made CompanyPerson LU DOCMAN aware.
--  030717  Lara  Added property rule 'Allow Access to Myself'
--  030717  Rasi  Added property rule 'Transfer Employee Information to Biz API'
--  000404  WaPe  Added data insert to employee_name_configurator_tab
--  000222  Shir  Removed batch job for User_Access_API.Generate_Access
--  000215  Shir  Added code to update companies from finance to HR
--  000127  WaPe  Corrected the methods OBJECT_PROPERTY_API.add_value and ATTRIBUTE_DEFINITION_API.Set_Length
--  000124  Ravi  Called methods OBJECT_PROPERTY_API.add_value and ATTRIBUTE_DEFINITION_API.Set_Length 
--  991201  Shir  Added default value authority_time_tab
--  991201  Shir  Created a batch job for User_Access_API.Generate_Access
--  991201  Shir  Created
--  ------  ----  -----------------------------------------------------------


BEGIN
INSERT 
   INTO authority_time_tab
      (Time_stamp,
       rowversion)
       VALUES
       (sysdate,
       sysdate);
END;
/
DECLARE
 val_   VARCHAR2(1000);
BEGIN
 val_ := Object_Property_API.Get_Value('PersonCompany','*','All HR Modules 2001');
 IF (val_ is NULL or val_='Yes,No') THEN -- old bug Yes,No means Yes
   OBJECT_PROPERTY_API.Set_Value('PersonCompany','*','All HR Modules 2001','Yes');  
 END IF;
END;
/
-- Transfer companies from finance to hr
PROMPT *******************************************************************
PROMPT Insert companies defined in IFS Financials into IFS Human Resources
PROMPT *******************************************************************

BEGIN
INSERT INTO person_company_tab (
   company_id, parent_company, create_cost_center, rowversion )
   SELECT DISTINCT
      company,'0','0',1
   FROM company_finance_tab
   WHERE company NOT IN
               (SELECT DISTINCT company_id
                FROM   person_company_tab);
END;
/
DECLARE
   CURSOR check_exits(company_id_ VARCHAR2,emp_no_ VARCHAR2)IS
      SELECT 1             
      FROM company_person_tab
      WHERE company_id = company_id_
      AND emp_no = emp_no_;
   temp_ NUMBER;   
BEGIN
FOR rec_ IN (SELECT * FROM company_emp_tab) LOOP
   OPEN check_exits(rec_.company,rec_.employee_id);
   FETCH check_exits INTO temp_;
   IF (check_exits%NOTFOUND) THEN
      INSERT INTO company_person_tab(company_id,emp_no,master_employment,operator,rowversion)
      VALUES (rec_.company,rec_.employee_id,'0',User,rec_.rowversion);  
   END IF; 
   CLOSE check_exits;     
END LOOP;
END;
/
DECLARE
   CURSOR check_exits(person_id_ VARCHAR2) IS
      SELECT 1             
      FROM pers_tab
      WHERE person_id = person_id_;
      temp_ NUMBER;

BEGIN
   FOR rec_ IN (SELECT * FROM  person_info_tab) LOOP
      OPEN check_exits(rec_.person_id);
      FETCH check_exits INTO temp_;
      IF (check_exits%NOTFOUND) THEN
            INSERT INTO pers_tab(person_id,have_child,external_display_name,rowversion)
            VALUES (rec_.person_id,'0',rec_.name,1);   
       END IF;       
       CLOSE check_exits;     
   END LOOP;
END;
/
BEGIN
INSERT INTO employee_name_configurator_tab
 (first_name_int_seq_no, 
  last_name_int_seq_no, 
  first_name_ext_seq_no,
  last_name_ext_seq_no, 
  rowversion)
SELECT 1, 2,1, 2,1 FROM DUAL
WHERE NOT EXISTS
(SELECT 1 FROM employee_name_configurator_tab);
END;
/
commit
/
DECLARE
   attr_ VARCHAR2(2000);
BEGIN
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE',     'EMPBIZAPI', attr_);
   Client_SYS.Add_To_Attr('DATA_TYPE_DB',            '1', attr_);           -- String
   Client_SYS.Add_To_Attr('LENGTH',                   3 , attr_);
   Client_SYS.Add_To_Attr('MULTIPLE_INSTANCES_ALLOWED', 'FALSE' , attr_);
   Client_SYS.Add_To_Attr('USE_LOV_FOR_VALIDATION', '1' , attr_);             
   Client_SYS.Add_To_Attr('PROPERTY_OBJECT_DB',      '1', attr_);           -- Company
   Client_SYS.Add_To_Attr('DEFAULT_DESCRIPTION', 
                            'Employee Details BizAPI', attr_);
   Property_Rule_API.New_Modify(attr_);
   Commit; 
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'EMPBIZAPI', attr_);
   Client_SYS.Add_To_Attr('PROPERTY_VALUE', 'YES', attr_); 
   Client_SYS.Add_To_Attr('DESCRIPTION', 'Transfer employee information', attr_);
   -- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.
   Client_SYS.Add_To_Attr('VALID_FROM', Database_SYS.get_first_calendar_date, attr_);
   Client_SYS.Add_To_Attr('VALID_TO', Database_SYS.get_last_calendar_date, attr_);
   Property_Value_API.New_Modify(attr_);
   Commit;
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'EMPBIZAPI', attr_);
   Client_SYS.Add_To_Attr('PROPERTY_VALUE', 'NO', attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', 'Do not transfer employee information', attr_);
   -- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.
   Client_SYS.Add_To_Attr('VALID_FROM', Database_SYS.get_first_calendar_date, attr_);
   Client_SYS.Add_To_Attr('VALID_TO', Database_SYS.get_last_calendar_date, attr_);
   Property_Value_API.New_Modify(attr_);  
   Commit;
END;
/
commit;

DECLARE
   attr_ VARCHAR2(2000);
BEGIN
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE',     'SELFACCESS', attr_);
   Client_SYS.Add_To_Attr('DATA_TYPE_DB',            '1', attr_);           -- String
   Client_SYS.Add_To_Attr('LENGTH',                   3 , attr_);
   Client_SYS.Add_To_Attr('MULTIPLE_INSTANCES_ALLOWED', 'FALSE' , attr_);             
   Client_SYS.Add_To_Attr('USE_LOV_FOR_VALIDATION', '1' , attr_);
   Client_SYS.Add_To_Attr('PROPERTY_OBJECT_DB',      '1', attr_);           -- Company
   Client_SYS.Add_To_Attr('DEFAULT_DESCRIPTION', 
                            'Allow Access to Myself', attr_);
   Property_Rule_API.New_Modify(attr_);
   Commit; 
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'SELFACCESS', attr_);
   Client_SYS.Add_To_Attr('PROPERTY_VALUE', 'YES', attr_); 
   Client_SYS.Add_To_Attr('DESCRIPTION', 'Access to Myself', attr_);
   -- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.
   Client_SYS.Add_To_Attr('VALID_FROM', Database_SYS.get_first_calendar_date, attr_);
   Client_SYS.Add_To_Attr('VALID_TO', Database_SYS.get_last_calendar_date, attr_);
   Property_Value_API.New_Modify(attr_);
   Commit;
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'SELFACCESS', attr_);
   Client_SYS.Add_To_Attr('PROPERTY_VALUE', 'NO', attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', 'No Access to Myself', attr_);
   -- Bug 58601, Modified hardcoded date values to Database_SYS.get_first_calendar_date and get_last_calendar_date.
   Client_SYS.Add_To_Attr('VALID_FROM', Database_SYS.get_first_calendar_date, attr_);
   Client_SYS.Add_To_Attr('VALID_TO', Database_SYS.get_last_calendar_date, attr_);
   Property_Value_API.New_Modify(attr_);  
   Commit;
END;
/
commit;

DECLARE
   attr_ VARCHAR2(2000);
BEGIN
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE',     'EMPLOYEEID', attr_);
   Client_SYS.Add_To_Attr('DATA_TYPE_DB',            '2', attr_);           -- Number
   Client_SYS.Add_To_Attr('LENGTH',                   10 , attr_);
   Client_SYS.Add_To_Attr('MULTIPLE_INSTANCES_ALLOWED', 'FALSE' , attr_);             
   Client_SYS.Add_To_Attr('USE_LOV_FOR_VALIDATION', '0' , attr_);
   Client_SYS.Add_To_Attr('PROPERTY_OBJECT_DB',      '1', attr_);           -- Company
   Client_SYS.Add_To_Attr('DEFAULT_DESCRIPTION', 
                            'Next Employee ID', attr_);
   Property_Rule_API.New_Modify(attr_);
   Commit; 
END;
/
Commit; 

DECLARE
   CURSOR check_comp_exist(company_id_ VARCHAR2) IS
      SELECT 1             
      FROM employee_status_tab
      WHERE company_id = company_id_
        AND seq_no     = 1;
   chk_comp_exist_ NUMBER;
BEGIN
   FOR get_company_ IN (SELECT DISTINCT company_id FROM person_company_tab) LOOP
      OPEN check_comp_exist(get_company_.company_id);
      FETCH check_comp_exist INTO chk_comp_exist_;
      IF (check_comp_exist%NOTFOUND) THEN
         INSERT INTO EMPLOYEE_STATUS_TAB(company_id, seq_no, employee_status, active, status_obsolete, rowversion)
         VALUES (get_company_.company_id, 1, '*', 'TRUE', 'FALSE', 1); 
      END IF;
      CLOSE check_comp_exist;   
   END LOOP;
END;
/
BEGIN
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'EmployeeStatus', 'TRUE', 'True');
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'EmployeeStatus', 'FALSE', 'False');
   
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'WizardConfiguration', 'TRUE', 'True');
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'WizardConfiguration', 'FALSE', 'False');
   
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'CompanyPosition', 'TRUE', 'True');
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'CompanyPosition', 'FALSE', 'False');
                                            
END;
/
commit
/
prompt Insert data into PERSON_DOCUMENT_TAB


prompt creating temporary procedure for insert

CREATE OR REPLACE procedure Temp_Person_Document_Default(document_ VARCHAR2, 
                                                         description_ VARCHAR2,
                                                         active_    VARCHAR2, 
                                                         rcruit_document_type_ VARCHAR2)
IS
   CURSOR existdoc(c_document_ IN VARCHAR2) IS
      SELECT 1
      FROM person_word_document_tab
      WHERE document = c_document_;
   exist_  NUMBER;
BEGIN
   OPEN existdoc(document_);
   FETCH existdoc INTO exist_;
   IF existdoc%NOTFOUND THEN
      INSERT
      INTO person_word_document_tab(
         document,
         description,
         active,
         person_document_type,
         inc_comp_data,
         inc_emp_data,
         inc_salary_data,
         inc_free_field_data,
         rowversion)
      VALUES (
         document_,
         description_,
         'TRUE',
         rcruit_document_type_,
         'TRUE',
         'TRUE',
         'TRUE',
         'TRUE',
         SYSDATE);
      Module_Translate_Attr_Util_API.Insert_Prog_Translation( 
                                            'PERSON', 
                                            'PersonWordDocument',
                                            document_,
                                            description_);  
   END IF;
   CLOSE existdoc;
END Temp_Person_Document_Default;
/
DECLARE
   document_type_     VARCHAR2(1) := '5';
BEGIN

Temp_Person_Document_Default('Certificate of Employmenten.doc'	, 'Certificate of Employment - English', '1', document_type_);

END;
/
COMMIT;


prompt dropping temporary procedure

DROP PROCEDURE Temp_Person_Document_Default;


BEGIN
   Object_Connection_SYS.Disable_Logical_Unit('CompanyPerson');
   Object_Connection_SYS.Enable_Logical_Unit('CompanyPerson', 'DocReferenceObject^', 'COMPANY_PERSON_ALL', 'COMPANY_PERSON_API');
END;
/
COMMIT;


prompt ************************************************************************
prompt Insert data into Marital_Status_Tab
prompt ************************************************************************

DECLARE
   CURSOR check_exits IS
      SELECT 1
      FROM marital_status_tab
      WHERE marital_status = 'MARRIED';
   temp_          NUMBER;
   married_seq_   NUMBER;
   unmarried_seq_ NUMBER;
   widower_seq_   NUMBER;
BEGIN
   OPEN check_exits;
   FETCH check_exits INTO temp_;
   IF (check_exits%NOTFOUND) THEN
      SELECT MARITAL_STATUS_ID.NEXTVAL INTO married_seq_ FROM dual;	
      INSERT
         INTO marital_status_tab (
            marital_status,
            marital_status_id,
            system_defined,
            rowversion)
         VALUES (
            'MARRIED',
            married_seq_,
            'TRUE',
            1);
   
         Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON',
                                                'MaritalStatus',
                                                'MARRIED',
                                                'Married');
   
         SELECT MARITAL_STATUS_ID.NEXTVAL INTO unmarried_seq_ FROM dual;	
         INSERT
            INTO marital_status_tab (
               marital_status,
               marital_status_id,
               system_defined,
               rowversion)
            VALUES (
               'UNMARRIED',
               unmarried_seq_,
               'TRUE',
               1);
   
            Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON',
                                                   'MaritalStatus',
                                                   'UNMARRIED',
                                                   'Unmarried');
   						
         SELECT MARITAL_STATUS_ID.NEXTVAL INTO widower_seq_ FROM dual;	
         INSERT
            INTO marital_status_tab (
               marital_status,
               marital_status_id,
               system_defined,
               rowversion)
            VALUES (
               'WIDOW(ER)',
               widower_seq_,
               'TRUE',
               1);
   
            Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON',
                                                   'MaritalStatus',
                                                   'WIDOW(ER)',
                                                   'Widow(er)');	
      END IF;
      CLOSE check_exits;   
END;
/
COMMIT;

PROMPT ADD Translations
BEGIN
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'MaritalStatus', 'TRUE', 'True');
   Module_Translate_Attr_Util_API.Insert_Prog_Translation( 'PERSON', 'MaritalStatus', 'FALSE', 'False');
END;
/
COMMIT;
/
prompt ************************************************************************
prompt Insert data into PROTECTED_INFORMATION_TAB
prompt ************************************************************************

DECLARE
   CURSOR check_exits IS
      SELECT 1             
      FROM protected_information_tab
      WHERE protected_field = 'Personal Communication Methods';
   temp_ NUMBER;   
BEGIN 
   OPEN check_exits;
   FETCH check_exits INTO temp_;
   IF (check_exits%NOTFOUND) THEN     
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Personal Address','TRUE',SYSDATE);
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Country','TRUE',SYSDATE); 
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Personal Communication Methods','TRUE',SYSDATE);
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Date of Birth','FALSE',SYSDATE);  
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Place of Birth','FALSE',SYSDATE);
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Citizen Of','FALSE',SYSDATE);  
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Insurance Id','FALSE',SYSDATE);
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Gender','FALSE',SYSDATE);  
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Blood Type','FALSE',SYSDATE); 
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Marital Status','FALSE',SYSDATE); 
     INSERT INTO protected_information_tab(Protected_Field,Protected_Value,Rowversion)
     VALUES ('Have Children','FALSE',SYSDATE);      
   END IF; 
   CLOSE check_exits;  
END;
/
COMMIT;

--Bug 73297, Start
PROMPT ************************************************************************
PROMPT Insert data INTO PROPERTY_RULE_TAB - Enhanced Automatic Employee Numbering 
PROMPT ************************************************************************

DECLARE
   attr_ VARCHAR2(2000);
BEGIN
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'EMPMASK', attr_);
   Client_SYS.Add_To_Attr('DATA_TYPE_DB', '1', attr_);                   -- String
   Client_SYS.Add_To_Attr('LENGTH', 15 , attr_);
   Client_SYS.Add_To_Attr('MULTIPLE_INSTANCES_ALLOWED', 'FALSE' , attr_);             
   Client_SYS.Add_To_Attr('USE_LOV_FOR_VALIDATION', '0' , attr_);
   Client_SYS.Add_To_Attr('PROPERTY_OBJECT_DB', '1', attr_);             -- Company
   Client_SYS.Add_To_Attr('DEFAULT_DESCRIPTION', 'Automatic Employee Numbering Mask', attr_);
   Property_Rule_API.New_Modify(attr_);
   COMMIT;
   
   ---
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROPERTY_CODE', 'EMPPREFIX', attr_);
   Client_SYS.Add_To_Attr('DATA_TYPE_DB', '1', attr_);                   -- String
   Client_SYS.Add_To_Attr('LENGTH', 10 , attr_);
   Client_SYS.Add_To_Attr('MULTIPLE_INSTANCES_ALLOWED', 'FALSE' , attr_);             
   Client_SYS.Add_To_Attr('USE_LOV_FOR_VALIDATION', '0' , attr_);
   Client_SYS.Add_To_Attr('PROPERTY_OBJECT_DB', '1', attr_);             -- Company
   Client_SYS.Add_To_Attr('DEFAULT_DESCRIPTION', 'Automatic Employee Numbering Prefix  ', attr_);
   Property_Rule_API.New_Modify(attr_);
   COMMIT;
END;
/
COMMIT;
--Bug 73297, End
