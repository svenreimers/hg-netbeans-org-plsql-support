-----------------------------------------------------------------------------
--
--  Logical unit: Trainer
--
--  Purpose:
--
--  IFS/Design Template Version 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  040219  NIMULK  made compatible with unicode. Substr
--  010509  UlPe    Remove call to dbms
--  010509  UlPe    Changes of General_Sys.Init_Method (technical directive)
--  990426  ELZ     Changed to New Template (2.2.1)
--  981222  ELZ     Created.
-----------------------------------------------------------------------------

DEFINE MODULE        = TRNADM
DEFINE LU            = Trainer
DEFINE TABLE         = TRAINER_TAB
DEFINE VIEW          = TRAINER
DEFINE VIEW_LOV1     = TRAINER_LOV1
DEFINE VIEW_LOV2     = TRAINER_LOV2
DEFINE PKG           = TRAINER_API

DEFINE OBJID         = t.rowid
DEFINE OBJVERSION    = ltrim(lpad(to_char(t.rowversion),2000))

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE FORCE VIEW &VIEW AS
SELECT t.person_id                    person_id,
       internal                       internal,
       p.name1                        fname,
       p.name4                        lname,
       training_institution_no        training_institution_no,
       Training_Institution_API.Decode(training_institution_no) training_institution_name,
       p.date_of_birth                date_of_birth,
       Person_Sex_API.Decode(p.sex)   sex,
       p.sex                          sex_db,
       remark                         remark,
       &OBJID                         objid,
       &OBJVERSION                    objversion
FROM   trainer_tab t, pers_tab p
WHERE  t.person_id = p.person_id
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Trainer^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..person_id
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Person Id^REF=Pers^';
COMMENT ON COLUMN &VIEW..internal
   IS 'FLAGS=AMIUL^DATATYPE=STRING(1)^PROMPT=Internal^';
COMMENT ON COLUMN &VIEW..fname
   IS 'FLAGS=A-IUL^DATATYPE=STRING(40)^PROMPT=First Name^';
COMMENT ON COLUMN &VIEW..lname
   IS 'FLAGS=AMIUL^DATATYPE=STRING(40)^PROMPT=Last Name^';
COMMENT ON COLUMN &VIEW..training_institution_no
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Training Institution No^REF=TrainingInstitution^';
COMMENT ON COLUMN &VIEW..training_institution_name
   IS 'FLAGS=A-IU-^DATATYPE=STRING(100)^PROMPT=Training Institution Name^';
COMMENT ON COLUMN &VIEW..date_of_birth
   IS 'FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Date of Birth^';
COMMENT ON COLUMN &VIEW..sex
   IS 'FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Gender^REF=PersonSex^';
COMMENT ON COLUMN &VIEW..remark
   IS 'FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Remark^';


PROMPT Creating &VIEW_LOV1 view

CREATE OR REPLACE FORCE VIEW &VIEW_LOV1 AS
SELECT person_id                             person_id,
       Trainer_API.Get_Name(person_id)       name,
       Trainer_API.Get_Internal_External(internal)    internal_external
FROM   trainer_tab 
WITH   read only;

COMMENT ON TABLE &VIEW_LOV1
   IS 'LU=&LU^PROMPT=Trainer^MODULE=&MODULE^SORT=Person_Id^';

COMMENT ON COLUMN &VIEW_LOV1..person_id
   IS 'FLAGS=K---L^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Person Id^';
COMMENT ON COLUMN &VIEW_LOV1..name
   IS 'FLAGS=A---L^DATATYPE=STRING(100)^PROMPT=Name^';
COMMENT ON COLUMN &VIEW_LOV1..internal_external
   IS 'FLAGS=A---L^DATATYPE=STRING(100)^PROMPT=Internal/External^';

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------
FUNCTION Lock_By_Id___ (
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      exception_init(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE t
      WHERE  &OBJID = objid_
      AND    &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE t
      WHERE  &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;

FUNCTION Lock_By_Keys___ (
   person_id_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE person_id = person_id_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE t
      WHERE  &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;

FUNCTION Get_Object_By_Keys___ (
   person_id_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE person_id = person_id_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;

FUNCTION Check_Exist___ (
   person_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE person_id = person_id_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist___;

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   person_id_ IN VARCHAR2)
IS
   CURSOR get_version IS
   SELECT &OBJID, &OBJVERSION
      FROM  &TABLE t
      WHERE person_id = person_id_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;
-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   dummy_rec_ IN OUT Dummy_Rec )
IS
   ptr_           NUMBER;
   name_          VARCHAR2(30);
   value_         VARCHAR2(2000);
   name1_         VARCHAR2(200);
   name4_         VARCHAR2(200);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'PERSON_ID') THEN
         newrec_.person_id := value_;
      ELSIF (name_ = 'INTERNAL') THEN
         newrec_.internal := value_;
      ELSIF (name_ = 'FNAME') THEN
         dummy_rec_.name1 := value_;
      ELSIF (name_ = 'LNAME') THEN
         dummy_rec_.name4 := value_;
      ELSIF (name_ = 'TRAINING_INSTITUTION_NAME') THEN
         newrec_.training_institution_no := Training_Institution_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Training_Institution_API.Exist(newrec_.training_institution_no);
         END IF;
      ELSIF (name_ = 'DATE_OF_BIRTH') THEN
         dummy_rec_.date_of_birth := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'SEX') THEN
         dummy_rec_.sex := Person_Sex_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Person_Sex_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'REMARK') THEN
         newrec_.remark := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'PERSON_ID', newrec_.person_id);
   IF (dummy_rec_.name1 IS NULL) OR (dummy_rec_.name4 IS NULL) THEN
      Pers_API.Get_Names(name1_, name4_, newrec_.person_id);
      IF (dummy_rec_.name1 IS NULL) THEN
         dummy_rec_.name1 := name1_;
      END IF;
      IF (dummy_rec_.name4 IS NULL) THEN
         dummy_rec_.name4 := name4_;
      END IF;
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'LNAME', dummy_rec_.name4);

   IF (dummy_rec_.date_of_birth IS NULL) THEN
      dummy_rec_.date_of_birth := Pers_API.Get_Date_Of_Birth(newrec_.person_id);
   END IF;
   IF (dummy_rec_.sex IS NULL) THEN
      dummy_rec_.sex := Person_Sex_API.Encode(Pers_API.Get_Sex(newrec_.person_id));
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'INTERNAL', newrec_.internal);
   IF (newrec_.internal = '1') THEN
      IF (Trainer_API.Check_Person_Internal(newrec_.person_id) = 0) THEN
         Error_SYS.Item_General(lu_name_, 'INTERNAL', 'EXTTYPE: Type of the trainer should be External. ');
      END IF;
   ELSE
      IF (Trainer_API.Check_Person_Internal(newrec_.person_id) = 1) THEN
         Error_SYS.Item_General(lu_name_, 'INTERNAL', 'INTTYPE: Type of the trainer should be Internal. ');
      END IF;
   END IF;

EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   dummy_rec_  IN Dummy_Rec,
   get_objid_  IN BOOLEAN DEFAULT TRUE)
IS
   temp_attr_    VARCHAR2(2000);
   CURSOR get_objid IS
      SELECT &OBJID
      FROM  &TABLE t
      WHERE person_id = newrec_.person_id;
BEGIN
   newrec_.rowversion := 1;
   objversion_ := to_char(newrec_.rowversion);
   INSERT
      INTO trainer_tab (
         person_id,
         internal,
         training_institution_no,
         remark,
         rowversion)
      VALUES (
         newrec_.person_id,
         newrec_.internal,
         newrec_.training_institution_no,
         newrec_.remark,
         newrec_.rowversion);
--
-- update person register
--
   Client_SYS.Clear_Attr(temp_attr_);
   Client_SYS.Add_To_Attr('PERSON_ID', newrec_.person_id, temp_attr_);
   Client_SYS.Add_To_Attr('NAME1', dummy_rec_.name1, temp_attr_);
   Client_SYS.Add_To_Attr('NAME4', dummy_rec_.name4, temp_attr_);
   Client_SYS.Add_To_Attr('SEX', Person_Sex_API.Decode(dummy_rec_.sex), temp_attr_);
   Client_SYS.Add_To_Attr('DATE_OF_BIRTH', dummy_rec_.date_of_birth, temp_attr_);
   Pers_API.New_Modify(temp_attr_);

   IF (get_objid_) THEN
      OPEN get_objid;
      FETCH get_objid INTO objid_;
      CLOSE get_objid;
   END IF;   
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2,
   dummy_rec_ IN OUT Dummy_Rec )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
   name1_ VARCHAR2(200);
   name4_ VARCHAR2(200);

BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'PERSON_ID') THEN
         Error_SYS.Item_Update(lu_name_, 'PERSON_ID');
      ELSIF (name_ = 'INTERNAL') THEN
         newrec_.internal := value_;
      ELSIF (name_ = 'FNAME') THEN
         dummy_rec_.name1 := value_;
      ELSIF (name_ = 'LNAME') THEN
         dummy_rec_.name4 := value_;
      ELSIF (name_ = 'TRAINING_INSTITUTION_NAME') THEN
         newrec_.training_institution_no := Training_institution_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Training_Institution_API.Exist(newrec_.training_institution_no);
         END IF;
      ELSIF (name_ = 'DATE_OF_BIRTH') THEN
         dummy_rec_.date_of_birth := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'SEX') THEN
         dummy_rec_.sex := Person_Sex_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Person_Sex_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'REMARK') THEN
         newrec_.remark := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   IF (dummy_rec_.name1 IS NULL) OR (dummy_rec_.name4 IS NULL) THEN
      Pers_API.Get_Names(name1_, name4_, newrec_.person_id);
      IF (dummy_rec_.name1 IS NULL) THEN
         dummy_rec_.name1 := name1_;
      END IF;
      IF (dummy_rec_.name4 IS NULL) THEN
         dummy_rec_.name4 := name4_;
      END IF;
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'LNAME', dummy_rec_.name4);

   IF (dummy_rec_.date_of_birth IS NULL) THEN
      dummy_rec_.date_of_birth := Pers_API.Get_Date_Of_Birth(newrec_.person_id);
   END IF;
   IF (dummy_rec_.sex IS NULL) THEN
      dummy_rec_.sex := Person_Sex_API.Encode(Pers_API.Get_Sex(newrec_.person_id));
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'INTERNAL', newrec_.internal);
   IF (newrec_.internal = '1') THEN
      IF (Trainer_API.Check_Person_Internal(newrec_.person_id) = 0) THEN
         Error_SYS.Item_General(lu_name_, 'INTERNAL', 'EXTTYPE: Type of the trainer should be External. ');
      END IF;
   ELSE
      IF (Trainer_API.Check_Person_Internal(newrec_.person_id) = 1) THEN
         Error_SYS.Item_General(lu_name_, 'INTERNAL', 'INTTYPE: Type of the trainer should be Internal. ');
      END IF;
   END IF;
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   dummy_rec_   IN Dummy_Rec,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   temp_attr_    VARCHAR2(2000);
BEGIN
   newrec_.rowversion := newrec_.rowversion + 1;
   objversion_ := to_char(newrec_.rowversion);
   IF by_keys_ THEN
      UPDATE trainer_tab t
         SET person_id = newrec_.person_id,
             internal = newrec_.internal,
             training_institution_no = newrec_.training_institution_no,
             remark = newrec_.remark,
             rowversion = newrec_.rowversion
         WHERE person_id = newrec_.person_id;
   ELSE
      UPDATE trainer_tab t
         SET person_id = newrec_.person_id,
             internal = newrec_.internal,
             training_institution_no = newrec_.training_institution_no,
             remark = newrec_.remark,
             rowversion = newrec_.rowversion
         WHERE &OBJID = objid_;
   END IF;

      --
      -- update person register
      --
      Client_SYS.Clear_Attr(temp_attr_);
      Client_SYS.Add_To_Attr('PERSON_ID', newrec_.person_id, temp_attr_);
      Client_SYS.Add_To_Attr('NAME1', dummy_rec_.name1, temp_attr_);
      Client_SYS.Add_To_Attr('NAME4', dummy_rec_.name4, temp_attr_);
      Client_SYS.Add_To_Attr('SEX', Person_Sex_API.Decode(dummy_rec_.sex), temp_attr_);
      Client_SYS.Add_To_Attr('DATE_OF_BIRTH', dummy_rec_.date_of_birth, temp_attr_);
      Pers_API.New_Modify(temp_attr_);

EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.person_id || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE,
   by_keys_ IN BOOLEAN DEFAULT FALSE )
IS
   key_ VARCHAR2(2000);
   newrec_ &TABLE%ROWTYPE;
BEGIN
   key_ := remrec_.person_id || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   IF (by_keys_) THEN
      newrec_ := remrec_;
      DELETE FROM &TABLE
         WHERE person_id = newrec_.person_id;
   ELSE
      DELETE
         FROM  trainer_tab t
         WHERE &OBJID = objid_;
   END IF;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Record___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
   dummy_rec_ Dummy_Rec;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_,dummy_rec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_,dummy_rec_);
      Insert___(objid_, objversion_, newrec_, attr_,dummy_rec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
   dummy_rec_ Dummy_Rec;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_,dummy_rec_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_,dummy_rec_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_,dummy_rec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   person_id_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist___(person_id_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Training_Institution_Name (
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..training_institution_no%TYPE;
   CURSOR get_attr IS
      SELECT training_institution_no
      FROM &TABLE
      WHERE person_id = person_id_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN Training_Institution_API.Decode(temp_);
END Get_Training_Institution_Name;


FUNCTION Get_Fname (
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Pers_Api.Get_Name1(person_id_);
END Get_Fname;


FUNCTION Get_Lname (
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Pers_Api.Get_Name4(person_id_);
END Get_Lname;

FUNCTION Get_Name (
   person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Pers_Api.Get_Name(person_id_,'FIRST');
END Get_Name;

FUNCTION Check_Person_Internal(
   person_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Company_Person_API.Check_Person_Internal(person_id_);
END Check_Person_Internal;

FUNCTION Get_Internal_External(
   internal_ IN VARCHAR2) RETURN VARCHAR2
IS

BEGIN
   IF (internal_ = '0') THEN
      RETURN Relationship_Type_API.Decode(internal_ + 2);
   ELSIF (internal_ = '1') THEN
      RETURN Relationship_Type_API.Decode(internal_);
   END IF;
   RETURN null;
END Get_Internal_External;

FUNCTION Replace_Person_Id (
   new_person_id_ IN VARCHAR2,
   old_person_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR get_pers IS
      SELECT &OBJID, &OBJVERSION
      FROM &TABLE t
      WHERE person_id = old_person_id_;
   objid_       VARCHAR2(2000);
   objversion_  VARCHAR2(2000);
   oldrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Replace_Person_Id');
   IF (new_person_id_ = old_person_id_) THEN
      RETURN 'TRUE';
   END IF;
   IF (Check_Exist___(new_person_id_) = TRUE) THEN
      RETURN 'FALSE';
   END IF;
   OPEN get_pers;
   FETCH get_pers INTO objid_, objversion_;
   WHILE (get_pers%FOUND) LOOP
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      UPDATE trainer_tab t
      SET person_id = new_person_id_,
          rowversion = rowversion + 1
      WHERE &OBJID = objid_;
      FETCH get_pers INTO objid_, objversion_;
   END LOOP;
   CLOSE get_pers;

   RETURN 'TRUE';
END Replace_Person_Id;
-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------



UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_LOV1
UNDEFINE VIEW_LOV2
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJVERSION


