-----------------------------------------------------------------------------
--
--  Logical unit: OpPersDiaryCalculation
--
--  Purpose:
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  070419  Laadlk Bug 64820, Added new IF condition in Calculate order hours
--  070109  AmGa  Check error_no is null before update.
--  060106  GaKa  Added labor class changes
--  040915  KjCr  Modifications due to new Balance
--  040813  KjCr  HRPR408 PL/SQL Torexec
-----------------------------------------------------------------------------

DEFINE MODULE        = SHPEMP
DEFINE LU            = OpPersDiaryCalculation
DEFINE PKG           = OP_PERS_DIARY_CALCULATION_API


-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

   RowLocked EXCEPTION;
   Skip      EXCEPTION;
   DataError EXCEPTION;
   PRAGMA    exception_init(RowLocked, -0054);

-------------------------------------------------------------------------
--   Private types
-------------------------------------------------------------------------

   TYPE Op_Data_Rec IS RECORD (
      org_code       VARCHAR2(20),
      min_op_diff    NUMBER,
      max_op_diff    NUMBER,
      presence_hours NUMBER );

-------------------------------------------------------------------------
--   Global variables
-------------------------------------------------------------------------

   comp_time_format_ Comp_Time_Format_API.Value_Rec;
   wage_group_       Wage_Group_API.Value_Rec;
   time_param_label_ Time_Param_Label_API.Value_Rec;
   reg_status_       Time_Reg_Status_API.Value_Rec;
   test_active_      Time_Reg_Error_API.Active_Array_Type;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------

PROCEDURE Calculate_Op_Hours___ (
   op_data_    IN     Op_Data_Rec,
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type );


PROCEDURE Convert_Group_Operations___ (
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type );


PROCEDURE Do_Wage_Rounding___ (
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type );


PROCEDURE Get_Diary___ (
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type );


PROCEDURE Get_Op_Data___ (
   op_data_    OUT    NOCOPY Op_Data_Rec,
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type );


PROCEDURE Remove_Result___ (
   op_diary_ IN Op_Diary_Record_Type );


PROCEDURE Save_Result___ (
   op_diary_ IN Op_Diary_Record_Type );


PROCEDURE Set_Op_Error___ (
   op_diary_ IN Op_Diary_Record_Type );
   
PROCEDURE Set_Op_Error_Labor___ (
   op_diary_ IN Op_Diary_Record_Type );


PROCEDURE Update_Diary___ (
   op_data_  IN     Op_Data_Rec,
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type );



-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Calculate_Op_Hours___ (
   op_data_    IN     Op_Data_Rec,
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type )
IS
   wage_grp_        VARCHAR2(20);
   wage_code_       VARCHAR2(20);
   wage_hours_      NUMBER;
   pers_wage_grp_   VARCHAR2(20);
   pers_wage_hours_ NUMBER;
   abs_hours_       NUMBER;
   op_id_           INTEGER;
   mch_code_        VARCHAR2(20);
   info_code_       VARCHAR2(20);
   org_code_        VARCHAR2(20);
   min_in_time_     NUMBER;
   max_out_time_    NUMBER;
   cur_in_time_     NUMBER;
   cur_out_time_    NUMBER;
   in_time_         NUMBER;
   out_time_        NUMBER;
   cur_count_       NUMBER;
   cur_factor_      NUMBER;
   w_               INTEGER;
BEGIN
   /*-----------------------------------------------------------------------*/
   /* a) If status = done set status = ready                                */
   /*-----------------------------------------------------------------------*/
   min_in_time_  :=  100.0;
   max_out_time_ := -100.0;
   IF op_diary_.reg_status = reg_status_.done THEN
      IF (time_pers_diary_api.Reporting_Complete(op_diary_.company_id,  op_diary_.emp_no, 
            op_diary_.account_date, op_diary_.reg_status) = 'TRUE') THEN 
         op_diary_.reg_status := reg_status_.ready;
      END IF;
   END IF;
   FOR i_ IN 1 .. op_diary_.clocking.row_count LOOP
      min_in_time_  := LEAST(min_in_time_, op_diary_.clocking.start_stamp(i_));
      max_out_time_ := GREATEST(max_out_time_, op_diary_.clocking.stop_stamp(i_));
      IF op_diary_.clocking.org_code(i_) IS NULL THEN
         op_diary_.clocking.org_code(i_) := op_data_.org_code;
      END IF;
   END LOOP;
   /*-----------------------------------------------------------------------*/
   /* b) Calculate order hours                                              */
   /*-----------------------------------------------------------------------*/
   op_diary_.result.row_count := 0;
   WHILE min_in_time_ < max_out_time_ LOOP
      cur_in_time_ := max_out_time_;
      FOR i_ IN 1 .. op_diary_.clocking.row_count LOOP
         IF min_in_time_ < op_diary_.clocking.stop_stamp(i_) THEN
            cur_in_time_ := LEAST(cur_in_time_, op_diary_.clocking.start_stamp(i_));
         END IF;
      END LOOP;
      cur_count_    := 0;
      cur_out_time_ := max_out_time_;
      FOR i_ IN 1 .. op_diary_.clocking.row_count LOOP
         IF min_in_time_ < op_diary_.clocking.stop_stamp(i_) THEN
            IF cur_in_time_ = op_diary_.clocking.start_stamp(i_) THEN
               cur_count_ := cur_count_+1;
               cur_out_time_ := LEAST(cur_out_time_, op_diary_.clocking.stop_stamp(i_));
            ELSE
               cur_out_time_ := LEAST(cur_out_time_, op_diary_.clocking.start_stamp(i_));
            END IF;
         END IF;
      END LOOP;
      cur_factor_ := 1 / cur_count_;
      FOR i_ IN 1 .. op_diary_.clocking.row_count LOOP
         IF cur_in_time_ = op_diary_.clocking.start_stamp(i_) AND
            cur_in_time_ < op_diary_.clocking.stop_stamp(i_) THEN
            op_id_     := op_diary_.clocking.op_id(i_);
            info_code_ := op_diary_.clocking.info_code(i_);
            mch_code_  := op_diary_.clocking.mch_code(i_);
            org_code_  := op_diary_.clocking.org_code(i_);
            FOR j_ IN 1 .. pers_diary_.result.row_count LOOP
               wage_hours_ := 0.0;
               wage_grp_   := pers_diary_.result.wage_grp(j_);
               wage_code_  := pers_diary_.result.wage_code(j_);
               pers_wage_hours_ := pers_diary_.result.wage_hours(j_);
               in_time_  := GREATEST(pers_diary_.result.wage_ftime(j_), cur_in_time_);
               out_time_ := LEAST(pers_diary_.result.wage_ttime(j_), cur_out_time_);
               IF wage_grp_ IN (wage_group_.normal, wage_group_.overtime, wage_group_.extra, wage_group_.increment, wage_group_.balance_accrual, wage_group_.info) THEN
                  IF NOT pers_diary_.result.wage_hol(j_) THEN
                     IF in_time_ < out_time_ THEN
                        wage_hours_ := LEAST((out_time_-in_time_) * pers_diary_.result.wage_factor(j_), pers_wage_hours_);
                     END IF;
                  END IF;
               ELSIF wage_grp_ = wage_group_.balance_withdrawal THEN
                  -- Bug 64820, Begin
                  IF in_time_ < out_time_ THEN
                     FOR k_ IN 1 .. pers_diary_.result.row_count LOOP
                        pers_wage_grp_ := pers_diary_.result.wage_grp(k_);
                        IF pers_wage_grp_ = wage_group_.normal AND
                           in_time_  < pers_diary_.result.wage_ttime(k_) AND
                           out_time_ > pers_diary_.result.wage_ftime(k_) AND
                           pers_diary_.result.wage_hours(k_) > 0.005 THEN
                           wage_grp_   := pers_wage_grp_;
                           wage_code_  := pers_diary_.result.wage_code(k_);
                           abs_hours_  := LEAST(pers_diary_.result.wage_hours(k_), pers_wage_hours_);
                           abs_hours_  := LEAST((out_time_-in_time_) * pers_diary_.result.wage_factor(j_), abs_hours_);
                           wage_hours_ := wage_hours_ - abs_hours_;
                        END IF;
                     END LOOP;
                  END IF;
                  -- Bug 64820, End
               END IF;
               IF wage_hours_ > 0.005 OR wage_hours_ < -0.005 THEN
                  w_ := -1;
                  FOR k_ IN 1 .. op_diary_.result.row_count LOOP
                     IF op_id_     = op_diary_.result.op_id(k_) AND
                        info_code_ = op_diary_.result.info_code(k_) AND
                        mch_code_  = op_diary_.result.mch_code(k_) AND
                        org_code_  = op_diary_.result.org_code(k_) AND
                        wage_grp_  = op_diary_.result.wage_group(k_) AND
                        wage_code_ = op_diary_.result.wage_code(k_) THEN
                        w_ := k_;
                        EXIT;
                     END IF;
                  END LOOP;
                  IF w_ < 0 THEN
                     op_diary_.result.row_count := op_diary_.result.row_count+1;
                     w_ := op_diary_.result.row_count;
                     op_diary_.result.op_id(w_)          := op_id_;
                     op_diary_.result.info_code(w_)      := info_code_;
                     op_diary_.result.mch_code(w_)       := mch_code_;
                     op_diary_.result.org_code(w_)       := org_code_;
                     op_diary_.result.contract(w_)       := op_diary_.clocking.contract(i_);
                     op_diary_.result.work_center_no(w_) := op_diary_.clocking.work_center_no(i_);
                     op_diary_.result.labor_class_no(w_) := op_diary_.clocking.labor_class_no(i_);
                     op_diary_.result.wage_group(w_)     := wage_grp_;
                     op_diary_.result.wage_code(w_)      := wage_code_;
                     op_diary_.result.wage_hours(w_)     := 0.0;
                  END IF;
                  op_diary_.result.wage_hours(w_) := op_diary_.result.wage_hours(w_) + cur_factor_ * wage_hours_;
               END IF;
            END LOOP;
            op_diary_.clocking.start_stamp(i_) := cur_out_time_;
         END IF;
      END LOOP;
      min_in_time_ := cur_out_time_;
   END LOOP;
END Calculate_Op_Hours___;


PROCEDURE Convert_Group_Operations___ (
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type )
IS
   op_id_          INTEGER;
   info_code_      VARCHAR2(20);
   grp_count_      INTEGER;
   grp_op_id_      INTEGER_ARRAY;
   grp_plan_hours_ NUMBER_ARRAY;
   sum_hours_      NUMBER;
   cnt_            INTEGER;
   w_              INTEGER;
   CURSOR Get_Operations IS
      SELECT op_id,
             NVL(DECODE(info_code_,
             'R', plan_run_man,
             'S', plan_setup_man,
             'I', plan_run_man), 0)
      FROM   op_plan_tab
      WHERE  company_id = op_diary_.company_id
      AND    sup_op_id  = op_id_;
BEGIN
   cnt_ := op_diary_.result.row_count;
   FOR i_ IN 1 .. cnt_ LOOP
      op_id_     := op_diary_.result.op_id(i_);
      info_code_ := op_diary_.result.info_code(i_);
      OPEN Get_Operations;
      FETCH Get_Operations
      BULK COLLECT INTO
         grp_op_id_,
         grp_plan_hours_;
      grp_count_ := Get_Operations%ROWCOUNT;
      CLOSE Get_Operations;
      IF grp_count_ > 0 THEN
         sum_hours_ := 0.0;
         FOR j_ IN 1 .. grp_count_ LOOP
            sum_hours_ := sum_hours_ + grp_plan_hours_(j_);
         END LOOP;
         IF sum_hours_ < 0.005 THEN
            /* If no planned hours, make equal distribution */
            FOR j_ IN 1 .. grp_count_ LOOP
               grp_plan_hours_(j_) := 1.0;
            END LOOP;
            sum_hours_ := TO_NUMBER(grp_count_);
         END IF;
         FOR j_ IN 1 .. grp_count_ LOOP
            w_ := op_diary_.result.row_count+1;
            op_diary_.result.op_id(w_)          := grp_op_id_(j_);
            op_diary_.result.mch_code(w_)       := op_diary_.result.mch_code(i_);
            op_diary_.result.info_code(w_)      := op_diary_.result.info_code(i_);
            op_diary_.result.org_code(w_)       := op_diary_.result.org_code(i_);
            op_diary_.result.contract(w_)       := op_diary_.result.contract(i_);
            op_diary_.result.work_center_no(w_) := op_diary_.result.work_center_no(i_);
            op_diary_.result.labor_class_no(w_) := op_diary_.result.labor_class_no(i_);
            op_diary_.result.wage_group(w_)     := op_diary_.result.wage_group(i_);
            op_diary_.result.wage_code(w_)      := op_diary_.result.wage_code(i_);
            op_diary_.result.wage_hours(w_)     := op_diary_.result.wage_hours(i_) * grp_plan_hours_(j_) / sum_hours_;
            op_diary_.result.row_count          := w_;
         END LOOP;
         op_diary_.result.wage_hours(i_) := 0.0;
      END IF;
   END LOOP;
END Convert_Group_Operations___;


PROCEDURE Do_Wage_Rounding___ (
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type )
IS
   pers_sum_hours_ NUMBER;
   op_sum_hours_   NUMBER;
   sum_hours_      NUMBER;
   diff_hours_     NUMBER;
   wage_hours_     NUMBER;
   wage_grp_       VARCHAR2(20);
   wage_code_      VARCHAR2(20);
   wage_diff_      NUMBER_ARRAY;
   w_              INTEGER;
BEGIN
   IF NOT op_diary_.do_update THEN
      op_diary_.clocking.row_count := 0;
      op_diary_.result.row_count   := 0;
   END IF;
   /*-----------------------------------------------------------------------*/
   /* a) Adjust wage hours according to TimePersDiaryResult                 */
   /*-----------------------------------------------------------------------*/
   FOR i_ IN 1 .. pers_diary_.result.row_count LOOP
      IF pers_diary_.result.wage_hours(i_) != 0 AND
         NOT pers_diary_.result.wage_hol(i_) THEN
         wage_grp_  := pers_diary_.result.wage_grp(i_);
         wage_code_ := pers_diary_.result.wage_code(i_);
         pers_sum_hours_ := 0.0;
         FOR j_ IN 1 .. pers_diary_.result.row_count LOOP
            IF pers_diary_.result.wage_grp(j_)  = wage_grp_ AND
               pers_diary_.result.wage_code(j_) = wage_code_ AND
               NOT pers_diary_.result.wage_hol(j_) THEN
               pers_sum_hours_ := pers_sum_hours_ + pers_diary_.result.wage_hours(j_);
            END IF;
         END LOOP;
         op_sum_hours_ := 0.0;
         FOR j_ IN 1 .. op_diary_.result.row_count LOOP
            IF op_diary_.result.wage_group(j_) = wage_grp_ AND
               op_diary_.result.wage_code(j_)  = wage_code_ THEN
               op_sum_hours_ := op_sum_hours_ + op_diary_.result.wage_hours(j_);
            END IF;
         END LOOP;
         /*-----------------------------------------------------------------------*/
         /* b) Wage hours are reduced proportionally to presence hours level      */
         /*-----------------------------------------------------------------------*/
         sum_hours_ := op_sum_hours_;
         IF pers_sum_hours_ - op_sum_hours_ < 0.011 THEN
            sum_hours_ := 0.0;
            FOR j_ IN 1 .. op_diary_.result.row_count LOOP
               IF op_diary_.result.wage_group(j_) = wage_grp_ AND
                  op_diary_.result.wage_code(j_)  = wage_code_ THEN
                  op_diary_.result.wage_hours(j_) := pers_sum_hours_ * op_diary_.result.wage_hours(j_) / op_sum_hours_;
                  sum_hours_ := sum_hours_ + op_diary_.result.wage_hours(j_);
               END IF;
            END LOOP;
         END IF;
         op_sum_hours_ := ROUND(sum_hours_, 2);
         /*-----------------------------------------------------------------------*/
         /* c) Wage hours are rounded                                             */
         /*-----------------------------------------------------------------------*/
         sum_hours_ := 0.0;
         FOR j_ IN 1 .. op_diary_.result.row_count LOOP
            IF op_diary_.result.wage_group(j_) = wage_grp_ AND
               op_diary_.result.wage_code(j_)  = wage_code_ THEN
               wage_hours_ := op_diary_.result.wage_hours(j_);
               op_diary_.result.wage_hours(j_) := ROUND(wage_hours_, 2);
               wage_diff_(j_) := op_diary_.result.wage_hours(j_) - wage_hours_;
               sum_hours_ := sum_hours_ + op_diary_.result.wage_hours(j_);
            END IF;
         END LOOP;
         diff_hours_ := sum_hours_ - op_sum_hours_;
         /*-----------------------------------------------------------------------*/
         /* d) Wage hours are adjusted to total hours level after rounding diffs  */
         /*-----------------------------------------------------------------------*/
         WHILE diff_hours_ < -0.001 LOOP
            w_ := 0;
            FOR j_ IN 1 .. op_diary_.result.row_count LOOP
               IF op_diary_.result.wage_group(j_) = wage_grp_ AND
                  op_diary_.result.wage_code(j_)  = wage_code_ THEN
                  IF w_ = 0 THEN
                     w_ := j_;
                  ELSE
                     IF wage_diff_(j_) < wage_diff_(w_) THEN
                        w_ := j_;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
            op_diary_.result.wage_hours(w_) := op_diary_.result.wage_hours(w_) + 0.01;
            wage_diff_(w_) := wage_diff_(w_) + 0.01;
            diff_hours_ := diff_hours_ + 0.01;
         END LOOP;
         WHILE diff_hours_ > 0.001 LOOP
            w_ := 0;
            FOR j_ IN 1 .. op_diary_.result.row_count LOOP
               IF op_diary_.result.wage_group(j_) = wage_grp_ AND
                  op_diary_.result.wage_code(j_)  = wage_code_ THEN
                  IF w_ = 0 THEN
                     w_ := j_;
                  ELSE
                     IF wage_diff_(j_) > wage_diff_(w_) THEN
                        w_ := j_;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
            op_diary_.result.wage_hours(w_) := op_diary_.result.wage_hours(w_) - 0.01;
            wage_diff_(w_) := wage_diff_(w_) - 0.01;
            diff_hours_ := diff_hours_ - 0.01;
         END LOOP;
      END IF;
   END LOOP;
END Do_Wage_Rounding___;


PROCEDURE Get_Diary___ (
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type )
IS
   skip_  BOOLEAN;
   block_ BOOLEAN;
   found_ BOOLEAN;
   error_exist_     BOOLEAN;
   
   CURSOR Get_Diary IS
      SELECT ROWID,
             DECODE(auth_id, NULL, 0, 1),
             reg_status
      FROM   op_pers_diary_tab
      WHERE  company_id   = op_diary_.company_id
      AND    emp_no       = op_diary_.emp_no
      AND    account_date = op_diary_.account_date
      FOR UPDATE OF reg_status NOWAIT;
   CURSOR Get_Clockings IS
      SELECT ROWID,
             DECODE(error_no, NULL, 0,31,0, 1),
             op_id,
             mch_code,
             info_code,
             org_code,
             contract,
             work_center_no,
             labor_class_no,
             24 * (start_stamp - account_date),
             24 * (NVL(stop_stamp, start_stamp) - account_date)
      FROM   op_clocking_tab
      WHERE  company_id   = op_diary_.company_id
      AND    emp_no       = op_diary_.emp_no
      AND    account_date = op_diary_.account_date
      ORDER BY start_stamp, stop_stamp;
      --FOR UPDATE OF rowversion NOWAIT;
   CURSOR Get_Result IS
      SELECT ROWID
      FROM   op_result_tab
      WHERE  company_id   = op_diary_.company_id
      AND    emp_no       = op_diary_.emp_no
      AND    account_date = op_diary_.account_date
      FOR UPDATE OF rowversion NOWAIT;
BEGIN
   /*-----------------------------------------------------------------------*/
   /* a) Fetch rows from OpClocking (to be updated later)                   */
   /*-----------------------------------------------------------------------*/
   op_diary_.error_no           := 0;
   op_diary_.do_update          := FALSE;
   op_diary_.clocking.row_count := 0;
   op_diary_.result.row_count   := 0;
   skip_  := FALSE;
   block_ := FALSE;
   OPEN Get_Diary;
   FETCH Get_Diary
   INTO  op_diary_.row_id,
   op_diary_.auth_id,
   op_diary_.reg_status;
   found_ := Get_Diary%FOUND;
   CLOSE Get_Diary;
   IF NOT found_ THEN
      op_diary_.reg_status := '';
      op_diary_.auth_id := 0;
      skip_ := TRUE;
   END IF;
   IF op_diary_.auth_id = 1 THEN
      block_ := TRUE;
   END IF;
   IF op_diary_.reg_status = reg_status_.OPEN THEN
      skip_ := TRUE;
   END IF;
   IF op_diary_.reg_status = reg_status_.ready THEN
      op_diary_.do_update := TRUE;
   END IF;
   IF op_diary_.reg_status = reg_status_.modified THEN
      block_ := TRUE;
   END IF;
   --
   OPEN Get_Clockings;
   FETCH Get_Clockings
   BULK COLLECT INTO
      op_diary_.clocking.row_id,
      op_diary_.clocking.error_no,
      op_diary_.clocking.op_id,
      op_diary_.clocking.mch_code,
      op_diary_.clocking.info_code,
      op_diary_.clocking.org_code,
      op_diary_.clocking.contract,
      op_diary_.clocking.work_center_no,
      op_diary_.clocking.labor_class_no,
      op_diary_.clocking.start_stamp,
      op_diary_.clocking.stop_stamp;
   op_diary_.clocking.row_count := Get_Clockings%ROWCOUNT;
   CLOSE Get_Clockings;
   --
   OPEN Get_Result;
   FETCH Get_Result
   BULK COLLECT INTO op_diary_.result.row_id;
   op_diary_.result.row_count := Get_Result%ROWCOUNT;
   CLOSE Get_Result;
   op_diary_.clocking.row_count_read := op_diary_.clocking.row_count;
   op_diary_.result.row_count_read   := op_diary_.result.row_count;
   /*-----------------------------------------------------------------------*/
   /* b) If an error occurs on op clockings, save error code,               */
   /*    but continue with Time and Attendance processing                   */
   /*-----------------------------------------------------------------------*/
   error_exist_ := FALSE;
   FOR i_ IN 1 .. op_diary_.clocking.row_count LOOP
      IF op_diary_.clocking.start_stamp(i_) - op_diary_.clocking.stop_stamp(i_) > 0.001 AND
         test_active_(Time_Reg_Error_API.CD_OVERLAP) THEN
         skip_ := TRUE;
         op_diary_.error_no  := Time_Reg_Error_API.CD_OVERLAP;
      END IF;
      FOR j_ IN  i_+1 .. op_diary_.clocking.row_count LOOP
         IF ((op_diary_.clocking.op_id(i_) = op_diary_.clocking.op_id(j_)) AND
            (op_diary_.clocking.info_code(i_) = op_diary_.clocking.info_code(j_)) AND
            (op_diary_.clocking.mch_code(i_)  = op_diary_.clocking.mch_code(j_)) ) THEN
            IF (op_diary_.clocking.labor_class_no(i_) != op_diary_.clocking.labor_class_no(j_)) THEN
               op_diary_.error_no :=  Time_Reg_Error_API.CD_LABOR_CLASS;  
               Set_Op_Error_Labor___(op_diary_);
               skip_ := TRUE;
               error_exist_ := TRUE;
            END IF;
            IF (op_diary_.clocking.work_center_no(i_) != op_diary_.clocking.work_center_no(j_)) THEN
               --Bug 61149, start
               IF (Op_Machine_Api.Work_Center_Exists(op_diary_.clocking.contract(i_), op_diary_.clocking.work_center_no(i_))='TRUE') AND 
                  (Op_Machine_Api.Work_Center_Exists(op_diary_.clocking.contract(j_), op_diary_.clocking.work_center_no(j_))='TRUE') THEN
                  op_diary_.error_no :=  Time_Reg_Error_API.CD_SUP_MCH_CODE;
                  Set_Op_Error_Labor___(op_diary_);
                  skip_ := TRUE;
                  error_exist_ := TRUE;
               END IF;
               --Bug 61149, end
            END IF;

         END IF;
      END LOOP;
      IF (NOT (error_exist_)) THEN
         op_diary_.error_no := NULL;
         Set_Op_Error_Labor___(op_diary_);
      END IF;
      IF (op_diary_.clocking.error_no(i_) != 0)  THEN
         skip_ := TRUE;
      END IF;
   END LOOP;
   IF block_ AND op_diary_.do_update THEN
      op_diary_.clocking.row_count := 0;
      op_diary_.error_no  := Time_Reg_Error_API.CD_ORACLE;
   END IF;
   IF skip_ THEN
      op_diary_.clocking.row_count := 0;
   END IF;
   IF block_ THEN
      op_diary_.clocking.row_count := 0;
      op_diary_.do_update := FALSE;
   END IF;
   IF op_diary_.clocking.row_count > 0 THEN
      op_diary_.do_update := TRUE;
   END IF;
   IF op_diary_.clocking.row_count = 0 THEN
      RAISE Skip;
   END IF;
END Get_Diary___;


PROCEDURE Get_Op_Data___ (
   op_data_    OUT    NOCOPY Op_Data_Rec,
   pers_diary_ IN     Time_Pers_Diary_Calc_API.Diary_Record_Type,
   op_diary_   IN OUT NOCOPY Op_Diary_Record_Type )
IS
   company_id_      VARCHAR2(20);
   emp_no_          VARCHAR2(20);
   account_date_    DATE;
   work_sched_      Work_Sched_Assign_API.Public_Rec;
   calc_param_type_ VARCHAR2(20);
   wage_grp_        VARCHAR2(20);
   wage_hours_      NUMBER;
   CURSOR Get_Calc_Param IS
      SELECT param_label_db      param_label,
             NVL(param_value, 0) param_value
      FROM   time_calc_param_desc
      WHERE  company_id      = company_id_
      AND    calc_param_type = calc_param_type_;
BEGIN
   company_id_   := op_diary_.company_id;
   emp_no_       := op_diary_.emp_no;
   account_date_ := op_diary_.account_date;
   op_data_.org_code := Company_Pers_Assign_API.Get_Org_Code(company_id_, emp_no_, account_date_);
   work_sched_ := Work_Sched_Assign_API.Get(company_id_, emp_no_, account_date_);
   op_diary_.wage_class := work_sched_.wage_class;
   calc_param_type_ := '';
   IF work_sched_.rule_type IS NOT NULL THEN
      calc_param_type_ := Time_Rule_API.Get_Calc_Param_Type(company_id_, work_sched_.wage_class, work_sched_.rule_type);
   END IF;
   op_data_.min_op_diff := 0.0;
   op_data_.max_op_diff := 0.0;
   IF calc_param_type_ IS NOT NULL THEN
      FOR p_ IN Get_Calc_Param LOOP
         CASE p_.param_label
         WHEN time_param_label_.min_op_diff THEN
            op_data_.min_op_diff := p_.param_value;
         WHEN time_param_label_.max_op_diff THEN
            op_data_.max_op_diff := p_.param_value;
         ELSE
            NULL;
         END CASE;
      END LOOP;
   END IF;
   op_data_.presence_hours := 0.0;
   FOR i_ IN 1 .. pers_diary_.result.row_count LOOP
      wage_hours_ := pers_diary_.result.wage_hours(i_);
      IF wage_hours_ > 0.001 OR wage_hours_ < -0.001 THEN
         wage_grp_ := pers_diary_.result.wage_grp(i_);
         IF wage_grp_ IN (wage_group_.normal, wage_group_.overtime, wage_group_.extra, wage_group_.balance_accrual) THEN
            IF NOT pers_diary_.result.wage_hol(i_) THEN
               op_data_.presence_hours := op_data_.presence_hours + wage_hours_;
            END IF;
         ELSIF wage_grp_ = wage_group_.balance_withdrawal THEN
            op_data_.presence_hours := op_data_.presence_hours - wage_hours_;
         END IF;
      END IF;
   END LOOP;
   op_data_.presence_hours := ROUND(op_data_.presence_hours, 2);
END Get_Op_Data___;


PROCEDURE Remove_Result___ (
   op_diary_ IN Op_Diary_Record_Type )
IS
BEGIN
   IF op_diary_.result.row_count_read > 0 AND op_diary_.do_update THEN
      FORALL i_ IN 1 .. op_diary_.result.row_count_read
      DELETE
         FROM  op_result_tab
         WHERE ROWID = op_diary_.result.row_id(i_);
   END IF;
END Remove_Result___;


PROCEDURE Save_Result___ (
   op_diary_ IN Op_Diary_Record_Type )
IS
BEGIN
   IF op_diary_.result.row_count > 0 THEN
      FORALL i_ IN 1 .. op_diary_.result.row_count
      INSERT
         INTO op_result_tab (
            company_id,
            op_id,
            mch_code,
            info_code,
            emp_no,
            account_date,
            org_code,
            contract,
            work_center_no,
            labor_class_no,
            wage_class,
            wage_group,
            wage_code,
            work_hours,
            rowversion)
         SELECT op_diary_.company_id,
                op_diary_.result.op_id(i_),
                op_diary_.result.mch_code(i_),
                op_diary_.result.info_code(i_),
                op_diary_.emp_no,
                op_diary_.account_date,
                op_diary_.result.org_code(i_),
                op_diary_.result.contract(i_),
                op_diary_.result.work_center_no(i_),
                op_diary_.result.labor_class_no(i_),
                op_diary_.wage_class,
                op_diary_.result.wage_group(i_),
                op_diary_.result.wage_code(i_),
                ROUND(op_diary_.result.wage_hours(i_), 2),
                SYSDATE
         FROM   dual
         WHERE  ROUND(op_diary_.result.wage_hours(i_), 2) != 0;
   END IF;
END Save_Result___;


PROCEDURE Set_Op_Error___ (
   op_diary_ IN Op_Diary_Record_Type )
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   IF op_diary_.clocking.row_count > 0 THEN
      --Bug 61149, start
      IF op_diary_.error_no IS NOT NULL THEN
         FORALL i_ IN 1 .. op_diary_.clocking.row_id.COUNT
         UPDATE op_clocking_tab
            SET error_no   = op_diary_.error_no,
                rowversion = SYSDATE
            WHERE ROWID = op_diary_.clocking.row_id(i_)
            AND   op_diary_.clocking.row_id(i_) IS NOT NULL
            AND   error_no IS NULL;
         COMMIT;
      END IF;
      --Bug 61149, end
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
END Set_Op_Error___;

PROCEDURE Set_Op_Error_Labor___ (
   op_diary_ IN Op_Diary_Record_Type )
IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
   IF op_diary_.clocking.row_count > 0 THEN
      --Bug 61149, start
      IF op_diary_.error_no IS NOT NULL THEN
         FORALL i_ IN 1 .. op_diary_.clocking.row_id.COUNT
         UPDATE op_clocking_tab
            SET error_no   = op_diary_.error_no,
                rowversion = SYSDATE
            WHERE ROWID = op_diary_.clocking.row_id(i_)
            AND   op_diary_.clocking.row_id(i_) IS NOT NULL;
         COMMIT;
      END IF;
      --Bug 61149, end
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
END Set_Op_Error_Labor___;


PROCEDURE Update_Diary___ (
   op_data_  IN     Op_Data_Rec,
   op_diary_ IN OUT NOCOPY Op_Diary_Record_Type )
IS
   min_op_normal_sum_ NUMBER;
   max_op_normal_sum_ NUMBER;
   sum_hours_         NUMBER;
BEGIN
   min_op_normal_sum_ := op_data_.presence_hours + op_data_.min_op_diff - 0.005;
   max_op_normal_sum_ := op_data_.presence_hours + op_data_.max_op_diff + 0.005;
   sum_hours_ := 0.0;
   FOR w_ IN 1 .. op_diary_.result.row_count LOOP
      IF op_diary_.result.wage_group(w_) IN (wage_group_.normal, wage_group_.overtime, wage_group_.balance_accrual, wage_group_.extra) THEN
         sum_hours_ := sum_hours_ + op_diary_.result.wage_hours(w_);
      END IF;
   END LOOP;
   op_diary_.reg_status := reg_status_.done;
   IF op_diary_.clocking.row_count > 0 THEN
      UPDATE op_pers_diary_tab
         SET reg_status = op_diary_.reg_status,
             rowversion = SYSDATE
         WHERE rowid = op_diary_.row_id;
   END IF;
   /*-----------------------------------------------------------------------*/
   /* If an error occurred during order calculation all OpClocking records  */
   /* are error marked.                                                     */
   /*-----------------------------------------------------------------------*/
   IF op_diary_.error_no != 0 AND op_diary_.clocking.row_count_read > 0 THEN
      op_diary_.clocking.row_count := op_diary_.clocking.row_count_read;
      Set_Op_Error___(op_diary_);
   END IF;
END Update_Diary___;



-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Calculate_Op__ (
   pers_diary_ IN Time_Pers_Diary_Calc_API.Diary_Record_Type )
IS
   op_diary_        Op_Diary_Record_Type;
   op_data_         Op_Data_Rec;
   history_enabled_ BOOLEAN;
BEGIN
   SAVEPOINT Calculation_Start;
   /*************************************************************************/
   /* 1) Start                                                              */
   /*-----------------------------------------------------------------------*/
   history_enabled_ := History_Setting_Util_API.Is_Enabled;
   History_Setting_Util_API.Disable;
   op_diary_.company_id   := pers_diary_.company_id;
   op_diary_.emp_no       := pers_diary_.emp_no;
   op_diary_.account_date := pers_diary_.account_date;
   /*************************************************************************/
   /* 2) Get data                                                           */
   /*************************************************************************/
   Get_Diary___(op_diary_);
   Get_Op_Data___(op_data_, pers_diary_, op_diary_);
   /*************************************************************************/
   /* 3) Order calculations                                                 */
   /*************************************************************************/
   Calculate_Op_Hours___(op_data_, pers_diary_, op_diary_);
   Convert_Group_Operations___(op_diary_);
   Do_Wage_Rounding___(pers_diary_, op_diary_);
   /*************************************************************************/
   /* 4) Store order calulations                                            */
   /*************************************************************************/
   Remove_Result___(op_diary_);
   Save_Result___(op_diary_);
   Update_Diary___(op_data_, op_diary_);
   /*************************************************************************/
   /* 5) End                                                                */
   /*************************************************************************/
   IF history_enabled_ THEN
      History_Setting_Util_API.Enable;
   END IF;
EXCEPTION
   WHEN Skip THEN
      ROLLBACK TO Calculation_Start;
      IF history_enabled_ THEN
         History_Setting_Util_API.Enable;
      END IF;
   WHEN RowLocked THEN
      ROLLBACK TO Calculation_Start;
      IF history_enabled_ THEN
         History_Setting_Util_API.Enable;
      END IF;
   WHEN DataError THEN
      ROLLBACK TO Calculation_Start;
      Set_Op_Error___(op_diary_);
      IF history_enabled_ THEN
         History_Setting_Util_API.Enable;
      END IF;
   WHEN OTHERS THEN
      op_diary_.error_no := SQLCODE;
      ROLLBACK TO Calculation_Start;
      IF test_active_(Time_Reg_Error_API.CD_ORACLE) THEN
         op_diary_.error_no := Time_Reg_Error_API.CD_ORACLE;
         Set_Op_Error___(op_diary_);
      END IF;
      IF history_enabled_ THEN
         History_Setting_Util_API.Enable;
      END IF;
END Calculate_Op__;


FUNCTION Get_Op_Clocking_Count__ (
   pers_diary_ IN Time_Pers_Diary_Calc_API.Diary_Record_Type ) RETURN INTEGER
IS
   op_diary_ Op_Diary_Record_Type;
BEGIN
   op_diary_.company_id   := pers_diary_.company_id;
   op_diary_.emp_no       := pers_diary_.emp_no;
   op_diary_.account_date := pers_diary_.account_date;
   Get_Diary___(op_diary_);
   RETURN op_diary_.clocking.row_count;
EXCEPTION
   WHEN OTHERS THEN
      RETURN 0;
END Get_Op_Clocking_Count__;



-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;
-------------------------------------------------------------------------
-- Initialize
-------------------------------------------------------------------------
BEGIN
   comp_time_format_ := Comp_Time_Format_API.Get_Db_Value_Rec;
   wage_group_       := Wage_Group_API.Get_Db_Value_Rec;
   time_param_label_ := Time_Param_Label_API.Get_Db_Value_Rec;
   reg_status_       := Time_Reg_Status_API.Get_Db_Value_Rec;
   Time_Reg_Error_API.Get_Active_Array(test_active_);
END &PKG;
/
SHOW ERROR

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG


-----------------------------------------------------------------------------
