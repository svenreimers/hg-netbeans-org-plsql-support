--------------------------------------------------------------------------------------
-- File : fndbas_ora.cre
-- 
--------------------------------------------------------------------------------------

-- CREATE tables and indexes

CREATE TABLE &AO..X_ACTIVITY_GRANT_FILTER_TAB
(
   PERMISSION_SET_ID             VARCHAR2(30)        NOT NULL,
   ACTIVITY_NAME                 VARCHAR2(100)       NOT NULL,
   FILTER_ID                     VARCHAR2(100)       NOT NULL,
   GRANTED_FILTER_TYPE           VARCHAR2(100)       NOT NULL
)
TABLESPACE &fnd_data
/
ALTER TABLE &AO..X_ACTIVITY_GRANT_FILTER_TAB
   ADD (CONSTRAINT X_ACTIVITY_GRANT_FILTER_PK PRIMARY KEY (FILTER_ID, PERMISSION_SET_ID, ACTIVITY_NAME)
          USING INDEX
          TABLESPACE &fnd_index
       )
/

CREATE TABLE &AO..X_FNDDR_ACTIVITY_ENT_USAGE_TAB
(
   USAGE                         VARCHAR2(100),
   ENTITY_ID                     VARCHAR2(100),
   ORDINAL                       NUMBER,
   ACTIVITY_ID                   VARCHAR2(100),
   WORKSPACE_ID                  VARCHAR2(100)
)
TABLESPACE &fnd_data
/
ALTER TABLE &AO..X_FNDDR_ACTIVITY_ENT_USAGE_TAB
   ADD (CONSTRAINT X_FNDDR_ACTIVITY_ENT_USEAGE_PK PRIMARY KEY (ACTIVITY_ID, ORDINAL, WORKSPACE_ID)
          USING INDEX
          TABLESPACE &fnd_index
       )
/
CREATE INDEX &AO..X_FNDDR_ACTIVITY_ENT_USEAGE_FK
   ON &AO..X_FNDDR_ACTIVITY_ENT_USAGE_TAB (ENTITY_ID, WORKSPACE_ID)
   TABLESPACE &fnd_index
/

-- CREATE sequence

CREATE SEQUENCE &AO..X_Ext_File_Batch_Param_Seq;

-- CREATE trigger

create or replace trigger &AO..x_vmogss_base_usermap_change
  after insert or update or delete on &AO..vmo_base_gss_usermap_change
  referencing old as oldrec new as newrec
  for each row
begin
  if updating or inserting then
    insert into &AO..vmo_base_gss_scope(gss_id, created, source_tbl, source_info) values(:newrec.gss_id, sysdate, 'VMO_BASE_GSS_USERMAP_CHANGE', :newrec.gss_id);
  end if;
end x_vmogss_base_usermap_change;
/

-- CREATE trigger dynamically

BEGIN
EXECUTE IMMEDIATE('create or replace trigger &AO..x_vmogss_base_sync_scope
  after insert on &AO..vmo_base_sync_scope
  referencing old as oldrec new as newrec
  for each row
begin
  if inserting then
    insert into &AO..vmo_base_gss_scope(gss_id, created, source_tbl, source_info) values(''ALL_GSS_ID'', sysdate, :newrec.tablename, :newrec.guid);
  end if;
end x_vmogss_base_sync_scope;');
EXCEPTION
    WHEN OTHERS THEN
        -- OK if ORA -00942: table or view does not exist
        IF INSTR(SQLERRM,'-00942') != 0 THEN NULL;
        ELSE raise_application_error ( -20000, SQLERRM ); 
        END IF;  
END;
/


