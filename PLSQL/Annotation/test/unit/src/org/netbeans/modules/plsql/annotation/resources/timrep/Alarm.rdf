-----------------------------------------------------------------------------
--
--  Logical unit: AlarmRep
--
--  Report:       Alarm
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating ALARM_RPI specification

CREATE OR REPLACE PACKAGE ALARM_RPI AS

module_ CONSTANT VARCHAR2(6) := 'TIMREP';
lu_name_ CONSTANT VARCHAR2(25) := 'AlarmRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );
PROCEDURE test__;


PROCEDURE Init;

END ALARM_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report view ALARM_REP

CREATE OR REPLACE VIEW ALARM_REP AS
SELECT NULL company_id,
       NULL company_name,
       NULL area_code,
       NULL emp_no,
       NULL emp_name
FROM   dual
WITH   read only;

COMMENT ON TABLE ALARM_REP
   IS 'LU=AlarmRep^PROMPT=Alarm^MODULE=TIMREP^';

COMMENT ON COLUMN ALARM_REP.company_id
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Company ID:^TITLE=Company ID^QUERY=Company ID:^QFLAGS=MCS--^QVALUE=:User_Finance_API.Get_Default_Company^REF=PersonCompany^';
COMMENT ON COLUMN ALARM_REP.company_name
   IS 'FLAGS=A----^DATATYPE=STRING(40)^PROMPT=Company Name^TITLE=Company Name^';
COMMENT ON COLUMN ALARM_REP.area_code
   IS 'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Area Code^TITLE=Area Code^';
COMMENT ON COLUMN ALARM_REP.emp_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Emp No^TITLE=Emp No^';
COMMENT ON COLUMN ALARM_REP.emp_name
   IS 'FLAGS=A----^DATATYPE=STRING(40)^PROMPT=Emp Name^TITLE=Emp Name^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('ALARM_REP', 'TIMREP', 'AlarmRep', 'Alarm', 'dual', 'ALARM_RPI..Execute_Report', 0);
   --Report_SYS.Define_Report_Layout_('ALARM_REP', 'AlarmRep.xsl', 'Landscape', 'DYNAMIC', NULL, 'DESIGNER');
   Report_SYS.Refresh_('ALARM_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating ALARM_RPI implementation

CREATE OR REPLACE PACKAGE BODY ALARM_RPI IS

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_               NUMBER;
   company_id_               VARCHAR2(20);
   
   xml_                      CLOB;

   CURSOR get_company IS
      SELECT
         NULL            company_id,   
         NULL            company_name
      FROM dual;

CURSOR get_area_code IS
   SELECT
      NULL            area_code
   FROM dual;

CURSOR get_emp_detail IS
   SELECT
      NULL            emp_no,   
      NULL            emp_name
   FROM dual;

BEGIN
   General_SYS.Init_Method(lu_name_, 'ALARM_RPI', 'Execute_Report');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));

   company_id_               := Client_SYS.Get_Item_Value('COMPANY_ID', parameter_attr_);

   Xml_Record_Writer_SYS.Create_Report_Header(xml_,'ALARM_REP','Alarm');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'COMPANIES');
   FOR company_ IN get_company LOOP
      Xml_Record_Writer_SYS.Start_Element(xml_, 'COMPANY');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ID', company_.company_id);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_NAME', company_.company_name);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'AREA_CODES');
      FOR area_code_ IN get_area_code LOOP
         Xml_Record_Writer_SYS.Start_Element(xml_, 'AREA_CODE');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AREA_CODE', area_code_.area_code);
         Xml_Record_Writer_SYS.Start_Element(xml_, 'EMP_DETAILS');
         FOR emp_detail_ IN get_emp_detail LOOP
            Xml_Record_Writer_SYS.Start_Element(xml_, 'EMP_DETAIL');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EMP_NO', emp_detail_.emp_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EMP_NAME', emp_detail_.emp_name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'EMP_DETAIL');
         END LOOP;
         Xml_Record_Writer_SYS.End_Element(xml_, 'EMP_DETAILS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'AREA_CODE');
      END LOOP;
      Xml_Record_Writer_SYS.End_Element(xml_, 'AREA_CODES');
      Xml_Record_Writer_SYS.End_Element(xml_, 'COMPANY');
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'COMPANIES');
   Xml_Record_Writer_SYS.End_Element(xml_,'ALARM_REP');

   Report_SYS.Finish_Xml_Report('ALARM_REP',result_key_,xml_);
END Execute_Report;

PROCEDURE test___
IS
BEGIN
    Dbms_Output.Put_Line('This is a test method');
END test___;

PROCEDURE test__
IS
BEGIN
    Dbms_Output.Put_Line('This is a test method');
END test__;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END ALARM_RPI;
/
SHOW ERROR