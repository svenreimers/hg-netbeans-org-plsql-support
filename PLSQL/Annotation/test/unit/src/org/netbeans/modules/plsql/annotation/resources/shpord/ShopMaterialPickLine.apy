-----------------------------------------------------------------------------
--
--  Logical unit: ShopMaterialPickLine
--
--  Purpose:
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

DEFINE MODULE        = SHPORD
DEFINE LU            = ShopMaterialPickLine
DEFINE TABLE         = SHOP_MATERIAL_PICK_LINE_TAB
DEFINE VIEW          = SHOP_MATERIAL_PICK_LINE
DEFINE PKG           = SHOP_MATERIAL_PICK_LINE_API
DEFINE EXIST         = Exist
DEFINE OBJID         = rowid
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE VIEW &VIEW AS
SELECT order_no                       order_no,
       release_no                     release_no,
       sequence_no                    sequence_no,
       line_item_no                   line_item_no,
       contract                       contract,
       part_no                        part_no,
       location_no                    location_no,
       lot_batch_no                   lot_batch_no,
       serial_no                      serial_no,
       eng_chg_level                  eng_chg_level,
       waiv_dev_rej_no                waiv_dev_rej_no,
       configuration_id               configuration_id,
       activity_seq                   activity_seq,
       pick_list_no                   pick_list_no,
       qty_assigned                   qty_assigned,
       orig_qty_assigned              orig_qty_assigned,
       last_activity_date             last_activity_date,
       condition_code                 condition_code,
       &OBJID                         objid,
       &OBJVERSION                    objversion
FROM   shop_material_pick_line_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Shop Material Pick Line^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..order_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(12)/UPPERCASE^PROMPT=Order No^';
COMMENT ON COLUMN &VIEW..release_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(4)/UPPERCASE^PROMPT=Release No^';
COMMENT ON COLUMN &VIEW..sequence_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(4)/UPPERCASE^PROMPT=Sequence No^';
COMMENT ON COLUMN &VIEW..line_item_no
   IS 'FLAGS=PMI--^DATATYPE=NUMBER^PROMPT=Line Item No^';
COMMENT ON COLUMN &VIEW..contract
   IS 'FLAGS=PMI--^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^';
COMMENT ON COLUMN &VIEW..part_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^';
COMMENT ON COLUMN &VIEW..location_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(35)/UPPERCASE^PROMPT=Location No^';
COMMENT ON COLUMN &VIEW..lot_batch_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Lot Batch No^';
COMMENT ON COLUMN &VIEW..serial_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(50)/UPPERCASE^PROMPT=Serial No^';
COMMENT ON COLUMN &VIEW..eng_chg_level
   IS 'FLAGS=PMI--^DATATYPE=STRING(2)/UPPERCASE^PROMPT=Revision No^';
COMMENT ON COLUMN &VIEW..waiv_dev_rej_no
   IS 'FLAGS=PMI--^DATATYPE=STRING(15)/UPPERCASE^PROMPT=W^';
COMMENT ON COLUMN &VIEW..configuration_id
   IS 'FLAGS=PMI--^DATATYPE=STRING(50)^PROMPT=Configuration Id^';
COMMENT ON COLUMN &VIEW..activity_seq
   IS 'FLAGS=PMI--^DATATYPE=NUMBER^PROMPT=Activity seq^REF=ShopMaterialAssign(order_no,release_no,sequence_no,line_item_no,contract,part_no,configuration_id,location_no,lot_batch_no,serial_no,eng_chg_level,waiv_dev_rej_no)/NOCHECK^';
COMMENT ON COLUMN &VIEW..pick_list_no
   IS 'FLAGS=KMI-L^DATATYPE=STRING(15)^PROMPT=Pick List No^';
COMMENT ON COLUMN &VIEW..qty_assigned
   IS 'FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Assigned^';
COMMENT ON COLUMN &VIEW..orig_qty_assigned
   IS 'FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Orig Qty Assigned^';
COMMENT ON COLUMN &VIEW..last_activity_date
   IS 'FLAGS=AMIU-^DATATYPE=DATE/DATE^PROMPT=Last Activity Date^';
COMMENT ON COLUMN &VIEW..condition_code
   IS 'FLAGS=A-IUL^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Condition Code^REF=ConditionCode^';

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE &OBJID = objid_
      AND   &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM  &TABLE
      WHERE &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;


FUNCTION Get_Object_By_Keys___ (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;


FUNCTION Check_Exist___ (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM  &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 )
IS
   CURSOR get_version IS
      SELECT &OBJID, &OBJVERSION
      FROM  &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'ORDER_NO') THEN
         newrec_.order_no := value_;
      ELSIF (name_ = 'RELEASE_NO') THEN
         newrec_.release_no := value_;
      ELSIF (name_ = 'SEQUENCE_NO') THEN
         newrec_.sequence_no := value_;
      ELSIF (name_ = 'LINE_ITEM_NO') THEN
         newrec_.line_item_no := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'CONTRACT') THEN
         newrec_.contract := value_;
      ELSIF (name_ = 'PART_NO') THEN
         newrec_.part_no := value_;
      ELSIF (name_ = 'LOCATION_NO') THEN
         newrec_.location_no := value_;
      ELSIF (name_ = 'LOT_BATCH_NO') THEN
         newrec_.lot_batch_no := value_;
      ELSIF (name_ = 'SERIAL_NO') THEN
         newrec_.serial_no := value_;
      ELSIF (name_ = 'ENG_CHG_LEVEL') THEN
         newrec_.eng_chg_level := value_;
      ELSIF (name_ = 'WAIV_DEV_REJ_NO') THEN
         newrec_.waiv_dev_rej_no := value_;
      ELSIF (name_ = 'CONFIGURATION_ID') THEN
         newrec_.configuration_id := value_;
      ELSIF (name_ = 'ACTIVITY_SEQ') THEN
         newrec_.activity_seq := Client_SYS.Attr_Value_To_Number(value_);
         Shop_Material_Assign_API.Exist(newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq, newrec_.activity_seq);
      ELSIF (name_ = 'PICK_LIST_NO') THEN
         newrec_.pick_list_no := value_;
      ELSIF (name_ = 'QTY_ASSIGNED') THEN
         newrec_.qty_assigned := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ORIG_QTY_ASSIGNED') THEN
         newrec_.orig_qty_assigned := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'LAST_ACTIVITY_DATE') THEN
         newrec_.last_activity_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'CONDITION_CODE') THEN
         newrec_.condition_code := value_;
        IF (value_ IS NOT NULL) THEN
            Condition_Code_API.Exist(newrec_.condition_code);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'ORDER_NO', newrec_.order_no);
   Error_SYS.Check_Not_Null(lu_name_, 'RELEASE_NO', newrec_.release_no);
   Error_SYS.Check_Not_Null(lu_name_, 'SEQUENCE_NO', newrec_.sequence_no);
   Error_SYS.Check_Not_Null(lu_name_, 'LINE_ITEM_NO', newrec_.line_item_no);
   Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
   Error_SYS.Check_Not_Null(lu_name_, 'PART_NO', newrec_.part_no);
   Error_SYS.Check_Not_Null(lu_name_, 'LOCATION_NO', newrec_.location_no);
   Error_SYS.Check_Not_Null(lu_name_, 'LOT_BATCH_NO', newrec_.lot_batch_no);
   Error_SYS.Check_Not_Null(lu_name_, 'SERIAL_NO', newrec_.serial_no);
   Error_SYS.Check_Not_Null(lu_name_, 'ENG_CHG_LEVEL', newrec_.eng_chg_level);
   Error_SYS.Check_Not_Null(lu_name_, 'WAIV_DEV_REJ_NO', newrec_.waiv_dev_rej_no);
   Error_SYS.Check_Not_Null(lu_name_, 'CONFIGURATION_ID', newrec_.configuration_id);
   Error_SYS.Check_Not_Null(lu_name_, 'ACTIVITY_SEQ', newrec_.activity_seq);
   Error_SYS.Check_Not_Null(lu_name_, 'PICK_LIST_NO', newrec_.pick_list_no);
   Error_SYS.Check_Not_Null(lu_name_, 'QTY_ASSIGNED', newrec_.qty_assigned);
   Error_SYS.Check_Not_Null(lu_name_, 'ORIG_QTY_ASSIGNED', newrec_.orig_qty_assigned);
   Error_SYS.Check_Not_Null(lu_name_, 'LAST_ACTIVITY_DATE', newrec_.last_activity_date);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   INSERT
      INTO shop_material_pick_line_tab (
         order_no,
         release_no,
         sequence_no,
         line_item_no,
         contract,
         part_no,
         location_no,
         lot_batch_no,
         serial_no,
         eng_chg_level,
         waiv_dev_rej_no,
         configuration_id,
         activity_seq,
         pick_list_no,
         qty_assigned,
         orig_qty_assigned,
         last_activity_date,
         condition_code,
         rowversion)
      VALUES (
         newrec_.order_no,
         newrec_.release_no,
         newrec_.sequence_no,
         newrec_.line_item_no,
         newrec_.contract,
         newrec_.part_no,
         newrec_.location_no,
         newrec_.lot_batch_no,
         newrec_.serial_no,
         newrec_.eng_chg_level,
         newrec_.waiv_dev_rej_no,
         newrec_.configuration_id,
         newrec_.activity_seq,
         newrec_.pick_list_no,
         newrec_.qty_assigned,
         newrec_.orig_qty_assigned,
         newrec_.last_activity_date,
         newrec_.condition_code,
         newrec_.rowversion)
      RETURNING &OBJID INTO objid_;
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'ORDER_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'ORDER_NO');
      ELSIF (name_ = 'RELEASE_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'RELEASE_NO');
      ELSIF (name_ = 'SEQUENCE_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'SEQUENCE_NO');
      ELSIF (name_ = 'LINE_ITEM_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'LINE_ITEM_NO');
      ELSIF (name_ = 'CONTRACT') THEN
         Error_SYS.Item_Update(lu_name_, 'CONTRACT');
      ELSIF (name_ = 'PART_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'PART_NO');
      ELSIF (name_ = 'LOCATION_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'LOCATION_NO');
      ELSIF (name_ = 'LOT_BATCH_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'LOT_BATCH_NO');
      ELSIF (name_ = 'SERIAL_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'SERIAL_NO');
      ELSIF (name_ = 'ENG_CHG_LEVEL') THEN
         Error_SYS.Item_Update(lu_name_, 'ENG_CHG_LEVEL');
      ELSIF (name_ = 'WAIV_DEV_REJ_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'WAIV_DEV_REJ_NO');
      ELSIF (name_ = 'CONFIGURATION_ID') THEN
         Error_SYS.Item_Update(lu_name_, 'CONFIGURATION_ID');
      ELSIF (name_ = 'ACTIVITY_SEQ') THEN
         Error_SYS.Item_Update(lu_name_, 'ACTIVITY_SEQ');
      ELSIF (name_ = 'PICK_LIST_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'PICK_LIST_NO');
      ELSIF (name_ = 'QTY_ASSIGNED') THEN
         newrec_.qty_assigned := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ORIG_QTY_ASSIGNED') THEN
         newrec_.orig_qty_assigned := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'LAST_ACTIVITY_DATE') THEN
         newrec_.last_activity_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'CONDITION_CODE') THEN
         newrec_.condition_code := value_;
        IF (value_ IS NOT NULL) THEN
            Condition_Code_API.Exist(newrec_.condition_code);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'QTY_ASSIGNED', newrec_.qty_assigned);
   Error_SYS.Check_Not_Null(lu_name_, 'ORIG_QTY_ASSIGNED', newrec_.orig_qty_assigned);
   Error_SYS.Check_Not_Null(lu_name_, 'LAST_ACTIVITY_DATE', newrec_.last_activity_date);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   IF by_keys_ THEN
      UPDATE shop_material_pick_line_tab
         SET order_no = newrec_.order_no,
             release_no = newrec_.release_no,
             sequence_no = newrec_.sequence_no,
             line_item_no = newrec_.line_item_no,
             contract = newrec_.contract,
             part_no = newrec_.part_no,
             location_no = newrec_.location_no,
             lot_batch_no = newrec_.lot_batch_no,
             serial_no = newrec_.serial_no,
             eng_chg_level = newrec_.eng_chg_level,
             waiv_dev_rej_no = newrec_.waiv_dev_rej_no,
             configuration_id = newrec_.configuration_id,
             activity_seq = newrec_.activity_seq,
             pick_list_no = newrec_.pick_list_no,
             qty_assigned = newrec_.qty_assigned,
             orig_qty_assigned = newrec_.orig_qty_assigned,
             last_activity_date = newrec_.last_activity_date,
             condition_code = newrec_.condition_code,
             rowversion = newrec_.rowversion
         WHERE order_no = newrec_.order_no
             AND    release_no = newrec_.release_no
             AND    sequence_no = newrec_.sequence_no
             AND    line_item_no = newrec_.line_item_no
             AND    contract = newrec_.contract
             AND    part_no = newrec_.part_no
             AND    location_no = newrec_.location_no
             AND    lot_batch_no = newrec_.lot_batch_no
             AND    serial_no = newrec_.serial_no
             AND    eng_chg_level = newrec_.eng_chg_level
             AND    waiv_dev_rej_no = newrec_.waiv_dev_rej_no
             AND    configuration_id = newrec_.configuration_id
             AND    activity_seq = newrec_.activity_seq
             AND    pick_list_no = newrec_.pick_list_no;
   ELSE
      UPDATE shop_material_pick_line_tab
         SET order_no = newrec_.order_no,
             release_no = newrec_.release_no,
             sequence_no = newrec_.sequence_no,
             line_item_no = newrec_.line_item_no,
             contract = newrec_.contract,
             part_no = newrec_.part_no,
             location_no = newrec_.location_no,
             lot_batch_no = newrec_.lot_batch_no,
             serial_no = newrec_.serial_no,
             eng_chg_level = newrec_.eng_chg_level,
             waiv_dev_rej_no = newrec_.waiv_dev_rej_no,
             configuration_id = newrec_.configuration_id,
             activity_seq = newrec_.activity_seq,
             pick_list_no = newrec_.pick_list_no,
             qty_assigned = newrec_.qty_assigned,
             orig_qty_assigned = newrec_.orig_qty_assigned,
             last_activity_date = newrec_.last_activity_date,
             condition_code = newrec_.condition_code,
             rowversion = newrec_.rowversion
         WHERE &OBJID = objid_;
   END IF;
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.order_no || '^' || remrec_.release_no || '^' || remrec_.sequence_no || '^' || remrec_.line_item_no || '^' || remrec_.contract || '^' || remrec_.part_no || '^' || remrec_.location_no || '^' || remrec_.lot_batch_no || '^' || remrec_.serial_no || '^' || remrec_.eng_chg_level || '^' || remrec_.waiv_dev_rej_no || '^' || remrec_.configuration_id || '^' || remrec_.activity_seq || '^' || remrec_.pick_list_no || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.order_no || '^' || remrec_.release_no || '^' || remrec_.sequence_no || '^' || remrec_.line_item_no || '^' || remrec_.contract || '^' || remrec_.part_no || '^' || remrec_.location_no || '^' || remrec_.lot_batch_no || '^' || remrec_.serial_no || '^' || remrec_.eng_chg_level || '^' || remrec_.waiv_dev_rej_no || '^' || remrec_.configuration_id || '^' || remrec_.activity_seq || '^' || remrec_.pick_list_no || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  &TABLE
      WHERE &OBJID = objid_;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New_');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE &EXIST (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&EXIST', TRUE);
   IF (NOT Check_Exist___(order_no_, release_no_, sequence_no_, line_item_no_, contract_, part_no_, location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, configuration_id_, activity_seq_, pick_list_no_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END &EXIST;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Condition_Code (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..condition_code%TYPE;
   CURSOR get_attr IS
      SELECT condition_code
      FROM &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Condition_Code;


FUNCTION Get (
   order_no_ IN VARCHAR2,
   release_no_ IN VARCHAR2,
   sequence_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_ IN VARCHAR2,
   part_no_ IN VARCHAR2,
   location_no_ IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2,
   serial_no_ IN VARCHAR2,
   eng_chg_level_ IN VARCHAR2,
   waiv_dev_rej_no_ IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   activity_seq_ IN NUMBER,
   pick_list_no_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
   CURSOR get_attr IS
      SELECT condition_code
      FROM &TABLE
      WHERE order_no = order_no_
          AND   release_no = release_no_
          AND   sequence_no = sequence_no_
          AND   line_item_no = line_item_no_
          AND   contract = contract_
          AND   part_no = part_no_
          AND   location_no = location_no_
          AND   lot_batch_no = lot_batch_no_
          AND   serial_no = serial_no_
          AND   eng_chg_level = eng_chg_level_
          AND   waiv_dev_rej_no = waiv_dev_rej_no_
          AND   configuration_id = configuration_id_
          AND   activity_seq = activity_seq_
          AND   pick_list_no = pick_list_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR


UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJVERSION
-----------------------------------------------------------------------------