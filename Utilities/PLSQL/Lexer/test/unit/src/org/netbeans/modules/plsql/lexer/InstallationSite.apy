-----------------------------------------------------------------------------
--
--  Logical unit: InstallationSite
--
--  Purpose:
--
--  IFS/Design Template Version 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  000101  JhMa  Created.
--  000621  ROOD  Modified parameters in Get_Timezone_Difference_.
--  000628  ROOD  Changes in error handling.
--  000808  ROOD  Completed the upgrade to Yoshimura template (Bug#15811).
--  020128  ROOD  Modified view and business logic to handle 
--                attribute translations (ToDo#4070).
--  020702  ROOD  Corrected usage of General_SYS.Init_Method (ToDo#4087).
--  030212  ROOD  Changed module to FNDBAS (ToDo#4149).
--  040408  HAAR  Unicode bulk changes, removed extensive use of Substr and/or Substrb (F1PR408B).
-----------------------------------------------------------------------------

DEFINE MODULE        = FNDBAS
DEFINE LU            = InstallationSite
DEFINE TABLE         = INSTALLATION_SITE_TAB
DEFINE VIEW          = INSTALLATION_SITE
DEFINE PKG           = INSTALLATION_SITE_API
DEFINE LOV_VIEW      = USER_DB_LINKS_LOV

DEFINE OBJID         = rowid
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &LOV_VIEW view

CREATE OR REPLACE FORCE VIEW &LOV_VIEW AS
SELECT Db_Link                        Db_Link
FROM   user_db_links
WITH   read only;

COMMENT ON TABLE &LOV_VIEW
   IS 'LU=&LU^PROMPT=Installation Site^MODULE=&MODULE^';

COMMENT ON COLUMN &LOV_VIEW..Db_Link
   IS 'FLAGS=K---L^DATATYPE=STRING(128)/UPPERCASE^PROMPT=Db Link^';


PROMPT Creating &VIEW view

CREATE OR REPLACE FORCE VIEW &VIEW AS
SELECT site_id                        site_id,
       timezone_difference            timezone_difference,
       nvl(Module_Translate_Attr_Util_API.Get_Attribute_Translation('&MODULE', '&LU', site_id ),description)     description,
       this_site                      this_site,
       database_link                  database_link,
       &OBJID                         objid,
       &OBJVERSION                    objversion
FROM   installation_site_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Installation Site^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..site_id
   IS 'FLAGS=KMI-L^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Site Id^';
COMMENT ON COLUMN &VIEW..timezone_difference
   IS 'FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Timezone Difference^';
COMMENT ON COLUMN &VIEW..description
   IS 'FLAGS=A-IUL^DATATYPE=STRING(255)^PROMPT=Description^';
COMMENT ON COLUMN &VIEW..this_site
   IS 'FLAGS=AMIU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=This Site^';
COMMENT ON COLUMN &VIEW..database_link
   IS 'FLAGS=A-IU-^DATATYPE=STRING(128)/UPPERCASE^PROMPT=Database Link^';

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      exception_init(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_
      AND    &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;

FUNCTION Lock_By_Keys___ (
   site_id_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE site_id = site_id_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;

FUNCTION Get_Object_By_Keys___ (
   site_id_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE site_id = site_id_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;

FUNCTION Check_Exist___ (
   site_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE site_id = site_id_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist___;

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   site_id_ IN VARCHAR2)
IS
   CURSOR get_version IS
   SELECT &OBJID, &OBJVERSION
      FROM  &TABLE
      WHERE site_id = site_id_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('TIMEZONE_DIFFERENCE', 0, attr_);
   Client_SYS.Add_To_Attr('THIS_SITE', 'FALSE', attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_             NUMBER;
   name_            VARCHAR2(30);
   value_           VARCHAR2(2000);
   this_site_exist_ EXCEPTION;
BEGIN
   newrec_.timezone_difference := 0;
   newrec_.this_site := 'FALSE';
   value_ := Client_SYS.Get_Item_Value('THIS_SITE', attr_);
   IF ( (UPPER(NVL(value_, 'FALSE')) = 'TRUE') AND This_Site_Exist__ ) THEN
      RAISE this_site_exist_;
   END IF;
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'SITE_ID') THEN
         newrec_.site_id := value_;
      ELSIF (name_ = 'TIMEZONE_DIFFERENCE') THEN
         newrec_.timezone_difference := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'DESCRIPTION') THEN
         newrec_.description := value_;
      ELSIF (name_ = 'THIS_SITE') THEN
         newrec_.this_site := value_;
      ELSIF (name_ = 'DATABASE_LINK') THEN
         newrec_.database_link := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'SITE_ID', newrec_.site_id);
   Error_SYS.Check_Not_Null(lu_name_, 'TIMEZONE_DIFFERENCE', newrec_.timezone_difference);
   Error_SYS.Check_Not_Null(lu_name_, 'THIS_SITE', newrec_.this_site);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
   WHEN this_site_exist_ THEN
      Error_SYS.Appl_General(lu_name_, 'EXIST_INSERT: Only one replication site can be THIS_SITE.');
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   IF ( newrec_.timezone_difference IS NULL ) THEN
      newrec_.timezone_difference := 0;
   END IF;
   IF ( NVL(newrec_.this_site,'FALSE') NOT IN ('TRUE','FALSE') ) THEN
      newrec_.this_site := 'FALSE';
   END IF;
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   INSERT
      INTO installation_site_tab (
         site_id,
         timezone_difference,
         description,
         this_site,
         database_link,
         rowversion)
      VALUES (
         newrec_.site_id,
         newrec_.timezone_difference,
         newrec_.description,
         newrec_.this_site,
         newrec_.database_link,
         newrec_.rowversion);
   SELECT &OBJID
      INTO  objid_
      FROM  &TABLE
      WHERE site_id = newrec_.site_id;
   -- Insert into the translation database
   Module_Translate_Attr_Util_API.Insert_Lu_Translation('&MODULE',
                                                        '&LU', 
                                                        newrec_.site_id,
                                                        NULL,
                                                        newrec_.description);
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_              NUMBER;
   name_             VARCHAR2(30);
   value_            VARCHAR2(2000);
   this_site_exist_  EXCEPTION;
BEGIN
   value_ := Client_SYS.Get_Item_Value('THIS_SITE', attr_);
   IF ( (UPPER(NVL(value_, 'FALSE')) = 'TRUE') AND (newrec_.this_site = 'FALSE') AND This_Site_Exist__ ) THEN
      RAISE this_site_exist_;
   END IF;
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'SITE_ID') THEN
         Error_SYS.Item_Update(lu_name_, 'SITE_ID');
      ELSIF (name_ = 'TIMEZONE_DIFFERENCE') THEN
         newrec_.timezone_difference := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'DESCRIPTION') THEN
         newrec_.description := value_;
      ELSIF (name_ = 'THIS_SITE') THEN
         newrec_.this_site := value_;
      ELSIF (name_ = 'DATABASE_LINK') THEN
         newrec_.database_link := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'TIMEZONE_DIFFERENCE', newrec_.timezone_difference);
   Error_SYS.Check_Not_Null(lu_name_, 'THIS_SITE', newrec_.this_site);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
   WHEN this_site_exist_ THEN
      Error_SYS.Appl_General(lu_name_, 'EXIST_UPDATE: Only one replication site can be THIS_SITE.');
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN BOOLEAN DEFAULT FALSE )
IS
BEGIN
   IF ( newrec_.timezone_difference IS NULL ) THEN
      newrec_.timezone_difference := 0;
   END IF;
   IF ( NVL(newrec_.this_site,'FALSE') NOT IN ('TRUE','FALSE') ) THEN
      newrec_.this_site := 'FALSE';
   END IF;
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   IF by_keys_ THEN
      UPDATE installation_site_tab
      SET site_id = newrec_.site_id,
          timezone_difference = newrec_.timezone_difference,
          description = newrec_.description,
          this_site = newrec_.this_site,
          database_link = newrec_.database_link,
          rowversion = newrec_.rowversion
      WHERE site_id = newrec_.site_id;
   ELSE
      UPDATE installation_site_tab
      SET site_id = newrec_.site_id,
          timezone_difference = newrec_.timezone_difference,
          description = newrec_.description,
          this_site = newrec_.this_site,
          database_link = newrec_.database_link,
          rowversion = newrec_.rowversion
      WHERE &OBJID = objid_;
   END IF;
   -- Update the translation database if necessary
   Module_Translate_Attr_Util_API.Modify_Translation('&MODULE', 
                                                     lu_name_, 
                                                     newrec_.site_id,
                                                     newrec_.description,
                                                     oldrec_.description);
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.site_id || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.site_id || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  installation_site_tab
      WHERE &OBJID = objid_;
   -- Delete all existing translations for this record.
   Module_Translate_Attr_Util_API.Remove_Attribute('&MODULE', lu_name_, remrec_.site_id);
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   site_id_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist___(site_id_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

FUNCTION This_Site_Exist__ RETURN BOOLEAN
IS
   dummy_    NUMBER;
   CURSOR this_site_exist IS
      SELECT 1
      FROM   &TABLE
      WHERE  this_site = 'TRUE';
BEGIN
   OPEN this_site_exist;
   FETCH this_site_exist INTO dummy_;
   IF ( this_site_exist%FOUND ) THEN
      CLOSE this_site_exist;
      RETURN TRUE;
   ELSE
      CLOSE this_site_exist;
      RETURN FALSE;
   END IF;
END This_Site_Exist__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Timezone_Difference_ (
   site_id_ IN VARCHAR2 DEFAULT NULL ) RETURN NUMBER
IS
   timezone_difference_error_ EXCEPTION;
   timezone_difference_       &TABLE..timezone_difference%TYPE;
   CURSOR local IS
      SELECT timezone_difference
      FROM   &TABLE
      WHERE  this_site = 'TRUE';
   CURSOR remote IS
      SELECT timezone_difference
      FROM   &TABLE
      WHERE  site_id = site_id_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Timezone_Difference_');
   IF ( site_id_ IS NULL ) THEN
      OPEN local;
      FETCH local INTO timezone_difference_;
      IF ( local%NOTFOUND ) THEN
         timezone_difference_ := 0;
      END IF;
      CLOSE local;
   ELSE
      OPEN remote;
      FETCH remote INTO timezone_difference_;
      IF ( remote%NOTFOUND ) THEN
         timezone_difference_ := 0;
      END IF;
      CLOSE remote;
   END IF;
   IF ( ABS(timezone_difference_) > 24 ) THEN
      RAISE timezone_difference_error_;
   END IF;
   RETURN timezone_difference_;
EXCEPTION
   WHEN timezone_difference_error_ THEN
      Error_SYS.Appl_General(lu_name_, 'INVALIDTIMEZONEDIFF: Invalid timezone difference :P1.', timezone_difference_);
END Get_Timezone_Difference_;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
