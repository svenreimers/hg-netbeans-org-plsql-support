-----------------------------------------------------------------------------
--
--  Logical unit: ScorecardInputValue
--
--  Purpose:
--
--  IFS/Design Template Version 2.2
--
--  Date    Sign     History
--  ------  ----  -----------------------------------------------------------
--  090402  ASJALK   Created.
--  230402  ASJALK   Changed the view comments.
--  150502  ASJALK   Added method Get_Distributed_Attr.
--  200502  ASJALK   Added method Update_Distributed_Values and removed the method Get_Distributed_Attr.
--  200502  ASJALK   Added method Update_Sales_Values.
--  220502  SHWILK   Call Id: 84289 - Changed the Modify__ method.
--  230502  ASJALK   Added method Calculate_Measures.
--  240502  ASJALK   Modified method Calculate_Measures.
--  300502  ASJALK   Added method Update_Referred_Component.
--  310502  ASJALK   Modified method Calculate_Measures.
--  110602  ASJALK   Modified method Update_Sales_Values.
--  120602  ASJALK   Added a new parameter for method Update_Reffered_Component.
--  130602  MAWELK   Fixed Call Id 85475.(Added a update satement to Scorecard_Structure_tab in the Modify__ method.)
--  170602  ASJALK   Added a update statement to Scorecard_Structure_tab in the Calculate_Measures and removed the
--                   update statement in Modify__ method.
--  180602  UMDOLK   Call Id 85764,85765 Corrected.
--  200602  ASJALK   Call Id 85793.
--  210602  MAWELK   CALL ID 85518 Decimal Problem.
--  250602  UMDOLK   Call Id 85913, 85775 Corrected.
--  250602  ASJALK   Call Id 85606.
--  250602  UMDOLK   Changed methods Publish__,Publish_Scorecard, and Update_Versions__.
--  250602  ASJALK   Modified Update_Distributed_Values method.
--  250602  MAWELK   CALL ID 85518 Decimal Problem(made the database more than 2 decimals).
--  260602  UMDOLK   Corrected a bug in planned data publishing ( Changed Publish__ Method).
--  190802  INGULK   Meathod added Check_Table.(Call Id 86123)
--  030902  INGULK   Removed the check for the valid table in the Publish_Score__(Call Id 88441).
--  250902  SHWILK   Added the field Action
--  011002  ASJALK   Modified methods Update_Distributed_Values and Update_Sales_Values.
--  011002  MAWELK   Added a new parameter called from_where_ to Update_Distributed_Values and Update_Sales_Values. Also change the code for measures too.
--  041002  ASJALK   Added new parameter "action_value_" to Update_Distributed_Values and Update_Sales_Values methods.
--  071002  ASJALK   Changed the error messages of Update_Sales_Values.
--  210103  ASJALK   Rewrite all the get methods used for scorecard planning in the scorecard_structure_apy which was
--                   previously written in the scorecard_measure_apy.
--  130203  ASJALK   Modified Update_Distributed_Values,Update_Sales_Values,Calculate_Measures methods in order to calculate the version and index (new logic).
--  130203  PRWELK   modified input_scorecard_value procedure with ref cursors.
--  190203  ASJALK   Modified Update_Distributed_Values,Update_Sales_Values methods.
--  240203  ASJALK   Modified cursors 'get_period' of Update_Sales_Values and Input_Scorecard_Data methods.
--  290303  ASJALK   Added methods Hierachical_Distribution and Distribute_Input_Values___.
--  010403  PRWELK   Added support for administrating individual items in input_scorecard_data().
--  090903  PRWELK   Added set_Publishing_environment,start_publishing_environment__,Publish_Environment_Batch.
--  090403  ASJALK   Modified the method Distribute_Input_Values___.
--  100403  PRWELK   Added Set_Publish_Scorecards()
--  230403  PRWELK   Added prepare_scorecar_publish__,publish_scorecard_batch(),start_publish_scorecard_.
--  250403  MAAMLK   Call Id 96585 - Added the new error message in Distribute_Input_Values___.
--  300403  ASJALK   Added methods Hierarchical_Consolidation and Consolidate_Values.
--  060503  ASJALK   Added methods All_Hierarchical_Logic,Background_Hierarchical_Logic,
--                   Call_Hierarchical_Logic and Start_Hierarchical_Logic.
--  080503  ASJALK   Modified method Start_Hierarchical_Logic.
--  190503  MAAMLK   Call Id 97124 - Added a new view Scorecard_Input_Value2 (VIEW2)
--  210503  ASJALK   Modified All_Hierarchical_Logic method in order to make the ACTION field value TRUE.
--  040603  UMDOLK   Call Id 97125 - Created a new view SCORECARD_INPUT_VALUE3.
--  050603  UMDOLK   Modified Calculate_Measures method.
--  190603  ASJALK   Added new field plan_seq_no to the view SCORECARD_INPUT_VALUE3.
--  070703  ASJALK   Modified Calculate_Measures method.
--  210703  ANGALK   Call Id 98470 - Cannot plan in a year with one period. Calculate_Measures method updated
--  240703  ANGALK   Call Id 98225 - Changed message displayed when no plan formula in Calculate_Measures method
--  200803  CHPALK   Added objid and objversion to view SCORECARD_INPUT_VALUE2.
--  280803  INGULK   Call Id 101075 Added Rowversion to the Update statement in the Update_Versions__ method.
--  010903  ANGALK   Call Id 98762 - CalculateMeasures() method was updated
--  020903  ANGALK   Call Id 98855 - CalculateMeasures() method was updated
--  040903  CHPALK   Call Id 101406 Changed methods Publish_Score__ ,Publish__
--                   and Update_Versions__ to improve performace.
--  170903  INGULK   Call Id 102095 Changed lenghs of 4 variables in Input_Scorecard_Data & Scorecard_Inputs_By_Batch.
--  220903  ASJALK   Call Id 103595 Changed dynamic cursors used in Update_Sales_Values to use bind variables.
--  230903  MAAMLK   Call Id 99040 Changed the IID check from INF_WAR to DATA_WAR.
--  171003  ASJALK   Call Id 105967 Modified method Update_Sales_Values.
--  231003  ANGALK   Call Id 108864 Modified Update_Versions_() and Publish_Score methods
--  280104  UMDOLK   FIPR408A1 Unicode (changed instrb to instr)
--  050304  CHPALK   Modified Insert___ to use RETURNING INTO to select rowid.
--  040304  MAAMLK   Call Id 40712
--  240304  MAWELK   SP1 Merge (LCS Bug Id 42350)
--  080404  ASJALK   Modified the code in order to align with the removed fields planned,scorecard_published,
--                   environment_published from scorecard_tab.
--  200404  ASJALK   Called the method Set_To_Planned in Distribute_Input_Values___ and Consolidate_Values.
--  200404  PRWELK   Value_distribution_type is replaced by scorecard_measure_api.get_match_type()
--  210404  PRWELK   Removed Plan formula field and references
--  210404  ASJALK   Modified methods Distribute_Input_Values___ and Consolidate_Values.
--  220404  ASJALK   Modified methods Update_Distributed_Values,Update_Sales_Values,Distribute_Input_Values___ and Consolidate_Values.
--  280404  ASJALK   Aligned the code according to the added state machine.
--  280404  ASJALK   Added method Set_To_Planned and called this method in the planning methods.
--  280404  ASJALK   Added method Get_Sco_Obj_State_Date.
--  190704  PRWELK   Added Method Budget_And_Calculate
--  090804  PRWELK   Changed Budget_And_Calculate method (Bug Id 116291)
--  260804  ASJALK   Call Id 116850 Modified method Insert__.
--  030904  INGULK   Call Id 117467 Changed cursor get_open_child_scr in the method Distribute_Input_Values___.
--  251004  ASJALK   Call Id 118165 Modified method Budget_And_Calculate.
--  101104  MAAMLK   Call Id 119453 Modified 'where' condition for consolidation error message
--  111104  MAAMLK   Call Id 119454 Modified the 'where' condition
--  101204  INGULK   Added General_SYS.Init_Method for procedures and Pragma for functions.
--  300305  MAWELK   FIPR375 Added a method called Get_Error_Msg_For_Comp().
--  211205  ISWALK   Added method Import_Planned_Values(), Calculate_Year_Value(), Aggregate_Planned_Values()
--                   and SCORECARD_INPUT_VALUE_BUDPRO... views.
--  110106  ISWALK   Modified SCORECARD_INPUT_VALUE3,SCORECARD_INPUT_VALUE_BUDPRO1
--  140106  ISWALK   Added method Load_Planned_Values(), Get_No_Of_Periods().
--  090206  MAAMLK   Call Id 132397 This problem was caused due to the assert comments introduced. As such
--                   these changes were reversed.
--  170206  ISWALK   Added functionality to load financials type data from budget process.
--  090306  ISWALK   B136588 modified Import_Fin_Values().
--  090306  ISWALK   B136601 modified Calculate_Year_Value() and Import_Fin_Values().
--  220306  ISWALK   B136602 modified Load_Planned_Values() and Import_Fin_Values().
--  220207  INGULK   Bug 63415, Changes to the WHERE clause of the view SCORECARD_INPUT_VALUE_BUDPRO2.
--  070515  SURMLK   Added ifs_assert_safe comment
--  070523  CHSALK   LCS Merge 64779, added a method Calc_Measure_From_Budpro() to calculate the measure values.
--  060707  MAAMLK   LCS Merge Bug 65000, Corrected in all_hierarchical_logic.
--  110707  MAAMLK   LCS Merge Bug 66326, Corrected in Publish_Environment.
--  160707  MAAMLK   LCS Merge Bug 64779, added a method Calc_Measure_From_Budpro() to calculate the measure values.
--  200707  MAAMLK   LCS Merge Bug 66082, Added calculate measure for FIN measures
--  051107  MAWELK   Bug 68118, Changes to Import_Fin_Values()
--  060208  MAKRLK   Bug 71089, Changes to Import_Fin_Values(), added dynamic calls to BUDPRO when required.
--  080318  Nsillk   Bug 72069, Added assert_safe to places where it was missing.
--  080331  MAKRLK   Bug 66984, changed method Load_Planned_Values() 
--  160908  MAAYLK   Bug 76573, Set measure to planned state at the end of Calculate_Measures() method 
-----------------------------------------------------------------------------

DEFINE MODULE        = BUSPER
DEFINE LU            = ScorecardInputValue
DEFINE TABLE         = SCORECARD_INPUT_VALUE_TAB
DEFINE VIEW          = SCORECARD_INPUT_VALUE
DEFINE VIEW2         = SCORECARD_INPUT_VALUE2
DEFINE VIEW3         = SCORECARD_INPUT_VALUE3
DEFINE VIEW4         = SCORECARD_INPUT_VALUE_BUDPRO1
DEFINE VIEW5         = SCORECARD_INPUT_VALUE_BUDPRO2
DEFINE PKG           = SCORECARD_INPUT_VALUE_API

DEFINE OBJID         = rowid
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"

DEFINE OBJSTATE      = rowstate
DEFINE OBJEVENTS     = &PKG..Finite_State_Events__(&OBJSTATE)
DEFINE STATE         = &PKG..Finite_State_Decode__(&OBJSTATE)
-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE FORCE VIEW &VIEW AS
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               scorecard_object,
       object_type                    object_type,
       year_value                     year_value,
       p1_key                         p1_key,
       p1_value                       p1_value,
       p2_key                         p2_key,
       p2_value                       p2_value,
       p3_key                         p3_key,
       p3_value                       p3_value,
       p4_key                         p4_key,
       p4_value                       p4_value,
       p5_key                         p5_key,
       p5_value                       p5_value,
       p6_key                         p6_key,
       p6_value                       p6_value,
       p7_key                         p7_key,
       p7_value                       p7_value,
       p8_key                         p8_key,
       p8_value                       p8_value,
       p9_key                         p9_key,
       p9_value                       p9_value,
       p10_key                        p10_key,
       p10_value                      p10_value,
       p11_key                        p11_key,
       p11_value                      p11_value,
       p12_key                        p12_key,
       p12_value                      p12_value,
       action                         action,
       mea_state_change_date          mea_state_change_date,
       budget_version                 budget_version,
       &OBJID                         objid,
       &OBJVERSION                    objversion,
       &OBJSTATE                      objstate,
       &OBJEVENTS                     objevents,
       &STATE                         state
FROM   scorecard_input_value_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Scorecard Input Value^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..environment
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Environment^REF=ScorecardEnvironment^';
COMMENT ON COLUMN &VIEW..scorecard
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard^REF=Scorecard(environment)^';
COMMENT ON COLUMN &VIEW..year
   IS 'FLAGS=KMIU-^DATATYPE=STRING(20)^PROMPT=Year^REF=EnvironmentYear(environment)^';
COMMENT ON COLUMN &VIEW..version
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Version^';
COMMENT ON COLUMN &VIEW..scorecard_object
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard Object^';
COMMENT ON COLUMN &VIEW..object_type
   IS 'FLAGS=AMIU-^DATATYPE=STRING(10)^PROMPT=Object Type^';
COMMENT ON COLUMN &VIEW..year_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Year Value^';
COMMENT ON COLUMN &VIEW..p1_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P1 Key^';
COMMENT ON COLUMN &VIEW..p1_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P1 Value^';
COMMENT ON COLUMN &VIEW..p2_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P2 Key^';
COMMENT ON COLUMN &VIEW..p2_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P2 Value^';
COMMENT ON COLUMN &VIEW..p3_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P3 Key^';
COMMENT ON COLUMN &VIEW..p3_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P3 Value^';
COMMENT ON COLUMN &VIEW..p4_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P4 Key^';
COMMENT ON COLUMN &VIEW..p4_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P4 Value^';
COMMENT ON COLUMN &VIEW..p5_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P5 Key^';
COMMENT ON COLUMN &VIEW..p5_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P5 Value^';
COMMENT ON COLUMN &VIEW..p6_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P6 Key^';
COMMENT ON COLUMN &VIEW..p6_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P6 Value^';
COMMENT ON COLUMN &VIEW..p7_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P7 Key^';
COMMENT ON COLUMN &VIEW..p7_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P7 Value^';
COMMENT ON COLUMN &VIEW..p8_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P8 Key^';
COMMENT ON COLUMN &VIEW..p8_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P8 Value^';
COMMENT ON COLUMN &VIEW..p9_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P9 Key^';
COMMENT ON COLUMN &VIEW..p9_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P9 Value^';
COMMENT ON COLUMN &VIEW..p10_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P10 Key^';
COMMENT ON COLUMN &VIEW..p10_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P10 Value^';
COMMENT ON COLUMN &VIEW..p11_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P11 Key^';
COMMENT ON COLUMN &VIEW..p11_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P11 Value^';
COMMENT ON COLUMN &VIEW..p12_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P12 Key^';
COMMENT ON COLUMN &VIEW..p12_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P12 Value^';
COMMENT ON COLUMN &VIEW..action
   IS 'FLAGS=AMIUL^DATATYPE=STRING^PROMPT=Action^';
COMMENT ON COLUMN &VIEW..mea_state_change_date
   IS 'FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Mea State Change Date^';
COMMENT ON COLUMN &VIEW..budget_version
   IS 'FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Budget Version^';


PROMPT Creating &VIEW2 view

CREATE OR REPLACE FORCE VIEW &VIEW2 AS
SELECT a.environment                    environment,
       a.scorecard                      scorecard,
       a.year                           year,
       a.version                        version,
       a.scorecard_object               scorecard_object,
       a.object_type                    object_type,
       DECODE(c.decimal_places,NULL,a.year_value/TO_NUMBER(c.measure_format),ROUND(a.year_value/TO_NUMBER(c.measure_format), c.decimal_places))  year_value,
       a.p1_key                         p1_key,
       DECODE(c.decimal_places,NULL,a.p1_value/TO_NUMBER(c.measure_format),ROUND(a.p1_value/TO_NUMBER(c.measure_format), c.decimal_places))  p1_value,
       a.p2_key                         p2_key,
       DECODE(c.decimal_places,NULL,a.p2_value/TO_NUMBER(c.measure_format),ROUND(a.p2_value/TO_NUMBER(c.measure_format), c.decimal_places))  p2_value,
       a.p3_key                         p3_key,
       DECODE(c.decimal_places,NULL,a.p3_value/TO_NUMBER(c.measure_format),ROUND(a.p3_value/TO_NUMBER(c.measure_format), c.decimal_places))  p3_value,
       a.p4_key                         p4_key,
       DECODE(c.decimal_places,NULL,a.p4_value/TO_NUMBER(c.measure_format),ROUND(a.p4_value/TO_NUMBER(c.measure_format), c.decimal_places))  p4_value,
       a.p5_key                         p5_key,
       DECODE(c.decimal_places,NULL,a.p5_value/TO_NUMBER(c.measure_format),ROUND(a.p5_value/TO_NUMBER(c.measure_format), c.decimal_places))  p5_value,
       a.p6_key                         p6_key,
       DECODE(c.decimal_places,NULL,a.p6_value/TO_NUMBER(c.measure_format),ROUND(a.p6_value/TO_NUMBER(c.measure_format), c.decimal_places))  p6_value,
       a.p7_key                         p7_key,
       DECODE(c.decimal_places,NULL,a.p7_value/TO_NUMBER(c.measure_format),ROUND(a.p7_value/TO_NUMBER(c.measure_format), c.decimal_places))  p7_value,
       a.p8_key                         p8_key,
       DECODE(c.decimal_places,NULL,a.p8_value/TO_NUMBER(c.measure_format),ROUND(a.p8_value/TO_NUMBER(c.measure_format), c.decimal_places))  p8_value,
       a.p9_key                         p9_key,
       DECODE(c.decimal_places,NULL,a.p9_value/TO_NUMBER(c.measure_format),ROUND(a.p9_value/TO_NUMBER(c.measure_format), c.decimal_places))  p9_value,
       a.p10_key                        p10_key,
       DECODE(c.decimal_places,NULL,a.p10_value/TO_NUMBER(c.measure_format),ROUND(a.p10_value/TO_NUMBER(c.measure_format), c.decimal_places))  p10_value,
       a.p11_key                        p11_key,
       DECODE(c.decimal_places,NULL,a.p11_value/TO_NUMBER(c.measure_format),ROUND(a.p11_value/TO_NUMBER(c.measure_format), c.decimal_places))  p11_value,
       a.p12_key                        p12_key,
       DECODE(c.decimal_places,NULL,a.p12_value/TO_NUMBER(c.measure_format),ROUND(a.p12_value/TO_NUMBER(c.measure_format), c.decimal_places))  p12_value,
       a.action                         action,
       a.rowid                          objid,
       ltrim(lpad(to_char(a.rowversion,'YYYYMMDDHH24MISS'),2000))   objversion
FROM   scorecard_input_value_tab a, measure_version_tab b, scorecard_measure_tab c
WHERE  a.environment = b.environment
AND    a.version = b.version
AND    b.rowstate = 'Open'
AND    a.object_type = 'MEASURE'
AND    a.scorecard_object = c.measure
WITH   read only;

COMMENT ON TABLE &VIEW2
   IS 'LU=&LU^PROMPT=Scorecard Input Value^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW2..environment
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Environment^REF=ScorecardEnvironment^';
COMMENT ON COLUMN &VIEW2..scorecard
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard^REF=Scorecard(environment)^';
COMMENT ON COLUMN &VIEW2..year
   IS 'FLAGS=KMIU-^DATATYPE=STRING(20)^PROMPT=Year^REF=EnvironmentYear(environment)^';
COMMENT ON COLUMN &VIEW2..version
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Version^';
COMMENT ON COLUMN &VIEW2..scorecard_object
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard Object^';
COMMENT ON COLUMN &VIEW2..object_type
   IS 'FLAGS=AMIU-^DATATYPE=STRING(10)^PROMPT=Object Type^';
COMMENT ON COLUMN &VIEW2..year_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Year Value^';
COMMENT ON COLUMN &VIEW2..p1_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P1 Key^';
COMMENT ON COLUMN &VIEW2..p1_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P1 Value^';
COMMENT ON COLUMN &VIEW2..p2_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P2 Key^';
COMMENT ON COLUMN &VIEW2..p2_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P2 Value^';
COMMENT ON COLUMN &VIEW2..p3_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P3 Key^';
COMMENT ON COLUMN &VIEW2..p3_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P3 Value^';
COMMENT ON COLUMN &VIEW2..p4_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P4 Key^';
COMMENT ON COLUMN &VIEW2..p4_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P4 Value^';
COMMENT ON COLUMN &VIEW2..p5_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P5 Key^';
COMMENT ON COLUMN &VIEW2..p5_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P5 Value^';
COMMENT ON COLUMN &VIEW2..p6_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P6 Key^';
COMMENT ON COLUMN &VIEW2..p6_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P6 Value^';
COMMENT ON COLUMN &VIEW2..p7_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P7 Key^';
COMMENT ON COLUMN &VIEW2..p7_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P7 Value^';
COMMENT ON COLUMN &VIEW2..p8_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P8 Key^';
COMMENT ON COLUMN &VIEW2..p8_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P8 Value^';
COMMENT ON COLUMN &VIEW2..p9_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P9 Key^';
COMMENT ON COLUMN &VIEW2..p9_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P9 Value^';
COMMENT ON COLUMN &VIEW2..p10_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P10 Key^';
COMMENT ON COLUMN &VIEW2..p10_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P10 Value^';
COMMENT ON COLUMN &VIEW2..p11_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P11 Key^';
COMMENT ON COLUMN &VIEW2..p11_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P11 Value^';
COMMENT ON COLUMN &VIEW2..p12_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P12 Key^';
COMMENT ON COLUMN &VIEW2..p12_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P12 Value^';
COMMENT ON COLUMN &VIEW2..action
   IS 'FLAGS=AMIUL^DATATYPE=STRING^PROMPT=Action^';



PROMPT Creating &VIEW3 view

CREATE OR REPLACE FORCE VIEW &VIEW3 AS
SELECT siv.environment                environment,
       siv.scorecard                  scorecard,
       year                           year,
       version                        version,
       scorecard_object               scorecard_object,
       object_type                    object_type,
       DECODE(sm.decimal_places,NULL  ,siv.year_value/TO_NUMBER(sm.measure_format),ROUND(siv.year_value/TO_NUMBER(sm.measure_format), sm.decimal_places))  year_value,
       p1_key                         p1_key,
       DECODE(sm.decimal_places,NULL  ,siv.p1_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p1_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p1_value,
       p2_key                         p2_key,
       DECODE(sm.decimal_places,NULL  ,siv.p2_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p2_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p2_value,
       p3_key                         p3_key,
       DECODE(sm.decimal_places,NULL  ,siv.p3_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p3_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p3_value,
       p4_key                         p4_key,
       DECODE(sm.decimal_places,NULL  ,siv.p4_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p4_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p4_value,
       p5_key                         p5_key,
       DECODE(sm.decimal_places,NULL  ,siv.p5_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p5_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p5_value,
       p6_key                         p6_key,
       DECODE(sm.decimal_places,NULL  ,siv.p6_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p6_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p6_value,
       p7_key                         p7_key,
       DECODE(sm.decimal_places,NULL  ,siv.p7_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p7_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p7_value,
       p8_key                         p8_key,
       DECODE(sm.decimal_places,NULL  ,siv.p8_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p8_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p8_value,
       p9_key                         p9_key,
       DECODE(sm.decimal_places,NULL  ,siv.p9_value/TO_NUMBER(sm.measure_format)  ,ROUND(siv.p9_value/TO_NUMBER(sm.measure_format)  , sm.decimal_places))  p9_value,
       p10_key                        p10_key,
       DECODE(sm.decimal_places,NULL  ,siv.p10_value/TO_NUMBER(sm.measure_format) ,ROUND(siv.p10_value/TO_NUMBER(sm.measure_format) , sm.decimal_places))  p10_value,
       p11_key                        p11_key,
       DECODE(sm.decimal_places,NULL  ,siv.p11_value/TO_NUMBER(sm.measure_format) ,ROUND(siv.p11_value/TO_NUMBER(sm.measure_format) , sm.decimal_places))  p11_value,
       p12_key                        p12_key,
       DECODE(sm.decimal_places,NULL  ,siv.p12_value/TO_NUMBER(sm.measure_format) ,ROUND(siv.p12_value/TO_NUMBER(sm.measure_format) , sm.decimal_places))  p12_value,
       siv.action                     action,
       ss.plan_seq_no                 plan_seq_no,
       Budget_Process_Type_API.Encode(Measure_Version_API.Get_Budget_Process_Type(version,
                                                                                  siv.environment))
                                      budget_process_type,
       DECODE(sm.measure_format,'1',sm.description,sm.description ||' ('||sm.measure_format||' )' )                                            scorecard_object_desc,
       siv.rowid                      objid,
       ltrim(lpad(to_char(siv.rowversion,'YYYYMMDDHH24MISS'),2000)) objversion
FROM   scorecard_input_value_tab siv, scorecard_measure_tab sm, scorecard_structure_tab ss
WHERE  siv.scorecard_object = sm.measure
AND    siv.environment      =  ss.environment
AND    siv.scorecard        =  ss.scorecard
AND    siv.object_type      =  ss.child_level_type
AND    siv.scorecard_object =  ss.level_id
WITH   read only;

COMMENT ON TABLE &VIEW3
   IS 'LU=&LU^PROMPT=Scorecard Input Value^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW3..environment
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Environment^REF=ScorecardEnvironment^';
COMMENT ON COLUMN &VIEW3..scorecard
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard^REF=Scorecard(environment)^';
COMMENT ON COLUMN &VIEW3..year
   IS 'FLAGS=KMIU-^DATATYPE=STRING(20)^PROMPT=Year^REF=EnvironmentYear(environment)^';
COMMENT ON COLUMN &VIEW3..version
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Version^';
COMMENT ON COLUMN &VIEW3..scorecard_object
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard Object^';
COMMENT ON COLUMN &VIEW3..object_type
   IS 'FLAGS=AMIU-^DATATYPE=STRING(10)^PROMPT=Object Type^';
COMMENT ON COLUMN &VIEW3..year_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Year Value^';
COMMENT ON COLUMN &VIEW3..p1_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P1 Key^';
COMMENT ON COLUMN &VIEW3..p1_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P1 Value^';
COMMENT ON COLUMN &VIEW3..p2_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P2 Key^';
COMMENT ON COLUMN &VIEW3..p2_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P2 Value^';
COMMENT ON COLUMN &VIEW3..p3_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P3 Key^';
COMMENT ON COLUMN &VIEW3..p3_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P3 Value^';
COMMENT ON COLUMN &VIEW3..p4_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P4 Key^';
COMMENT ON COLUMN &VIEW3..p4_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P4 Value^';
COMMENT ON COLUMN &VIEW3..p5_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P5 Key^';
COMMENT ON COLUMN &VIEW3..p5_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P5 Value^';
COMMENT ON COLUMN &VIEW3..p6_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P6 Key^';
COMMENT ON COLUMN &VIEW3..p6_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P6 Value^';
COMMENT ON COLUMN &VIEW3..p7_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P7 Key^';
COMMENT ON COLUMN &VIEW3..p7_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P7 Value^';
COMMENT ON COLUMN &VIEW3..p8_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P8 Key^';
COMMENT ON COLUMN &VIEW3..p8_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P8 Value^';
COMMENT ON COLUMN &VIEW3..p9_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P9 Key^';
COMMENT ON COLUMN &VIEW3..p9_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P9 Value^';
COMMENT ON COLUMN &VIEW3..p10_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P10 Key^';
COMMENT ON COLUMN &VIEW3..p10_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P10 Value^';
COMMENT ON COLUMN &VIEW3..p11_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P11 Key^';
COMMENT ON COLUMN &VIEW3..p11_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P11 Value^';
COMMENT ON COLUMN &VIEW3..p12_key
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=P12 Key^';
COMMENT ON COLUMN &VIEW3..p12_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=P12 Value^';
COMMENT ON COLUMN &VIEW3..action
   IS 'FLAGS=AMIUL^DATATYPE=STRING^PROMPT=Action^';
COMMENT ON COLUMN &VIEW3..plan_seq_no
   IS 'FLAGS=A---L^DATATYPE=STRING^PROMPT=Plan seq no^';
COMMENT ON COLUMN &VIEW3..budget_process_type
   IS 'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Budget Process Type^';
COMMENT ON COLUMN &VIEW3..scorecard_object_desc
   IS 'FLAGS=A----^DATATYPE=STRING(40)^PROMPT=Level Description^';

--THIS VIEW IS USED AS A BASE FOR THE VIEW5 WHICH IS USED TO DISPLAY BUDGET REQUIREMENTS VS. TARGETS.
PROMPT Creating &VIEW4 view

CREATE OR REPLACE FORCE VIEW &VIEW4 AS
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p1_key                         period,
       p1_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p1_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               scorecard_object,
       p2_key                         period,
       p2_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p2_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p3_key                         period,
       p3_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p3_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p4_key                         period,
       p4_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p4_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p5_key                         period,
       p5_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p5_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p6_key                         period,
       p6_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p6_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p7_key                         period,
       p7_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p7_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p8_key                         period,
       p8_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p8_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p9_key                         period,
       p9_value                       period_value
FROM   scorecard_input_value_tab
WHERE  p9_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p10_key                        period,
       p10_value                      period_value
FROM   scorecard_input_value_tab
WHERE  p10_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p11_key                        period,
       p11_value                      period_value
FROM   scorecard_input_value_tab
WHERE  p11_key IS NOT NULL
UNION
SELECT environment                    environment,
       scorecard                      scorecard,
       year                           year,
       version                        version,
       scorecard_object               measure,
       p12_key                        period,
       p12_value                      period_value
FROM   scorecard_input_value_tab
WHERE  p12_key IS NOT NULL
WITH   read only;

COMMENT ON TABLE &VIEW4
   IS 'LU=&LU^PROMPT=View Budget Requirements/Targets[BASE]^MODULE=&MODULE^';


--THIS VIEW IS USED TO DISPLAY BUDGET REQUIREMENTS VS. TARGETS.[Client is BudgetRequirementsTargets.java]
PROMPT Creating &VIEW5 view
-- Bug 63415, begin, Added another condition to where clause of the view
CREATE OR REPLACE FORCE VIEW &VIEW5 AS
SELECT t1.environment                    environment,
       t1.scorecard                      scorecard,
       t1.year                           year,
       t1.version                        version,
       t1.measure                        measure,
       t1.period                         period,
       t1.period_value/TO_NUMBER(t5.measure_format)  planned_value,
       t2.period_value/TO_NUMBER(t5.measure_format)  target_value
FROM   &VIEW4 t1,
       &VIEW4 t2,
       measure_version_tab t3,
       measure_version_tab t4,
       scorecard_measure_tab t5
WHERE  t1.environment          = t2.environment
AND    t1.scorecard            = t2.scorecard
AND    t1.year                 = t2.YEAR
AND    t5.measure              = t2.measure
AND    t1.measure              = t2.measure
AND    t1.period               = t2.period
AND    t1.environment          = t3.environment
AND    t1.version              = t3.version
AND    t2.environment          = t4.environment
AND    t2.version              = t4.version
AND    t3.budget_process_type  = 'BUDPLAN'
AND    t4.budget_process_type  = 'TARGET'
AND    ((t1.measure IN (SELECT measure
                       FROM   measure_role_access_tab
                       WHERE  role IN (SELECT oracle_role
                                       FROM   fnd_user_role_runtime
                                       WHERE  identity  = (SELECT fnd_user
                                                           FROM   fnd_session))))
        OR t1.measure IN (SELECT measure
                          FROM   measure_user_access_tab
                          WHERE  identity = (SELECT fnd_user
                                             FROM   fnd_session))
        OR EXISTS (SELECT 1
                  FROM  BP_ADMINISTRATOR_TAB
                  WHERE identity = (SELECT fnd_user
                                    FROM   fnd_session)))
AND   (t1.scorecard IN (SELECT scorecard
                        FROM   scorecard_user_access_tab
                        WHERE  identity = (SELECT fnd_user
                                           FROM   fnd_session)
                        AND environment = t1.environment
                        AND scorecard   = t1.scorecard)
       OR t1.scorecard IN (SELECT scorecard
                           FROM   scorecard_role_access_tab
                           WHERE  environment = t1.environment
                           AND    scorecard   = t1.scorecard
                           AND    role IN (SELECT oracle_role
                                           FROM   fnd_user_role_runtime
                                           WHERE  identity = (SELECT fnd_user
                                                              FROM   fnd_session)))
       OR EXISTS (SELECT 1
                  FROM BP_ADMINISTRATOR_TAB
                  WHERE identity = (SELECT fnd_user
                                    FROM   fnd_session)))
WITH   read only;

COMMENT ON TABLE &VIEW5
   IS 'LU=&LU^PROMPT=View Budget Requirements/Targets^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW5..environment
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Environment^';
COMMENT ON COLUMN &VIEW5..scorecard
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Scorecard^';
COMMENT ON COLUMN &VIEW5..year
   IS 'FLAGS=KMIU-^DATATYPE=STRING(20)^PROMPT=Year^';
COMMENT ON COLUMN &VIEW5..version
   IS 'FLAGS=KMI-L^DATATYPE=STRING(20)^PROMPT=Version^';
COMMENT ON COLUMN &VIEW5..measure
   IS 'FLAGS=KMIU-^DATATYPE=STRING(10)^PROMPT=Measure^';
COMMENT ON COLUMN &VIEW5..period
   IS 'FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Period^';
COMMENT ON COLUMN &VIEW5..planned_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Planned Value^';
COMMENT ON COLUMN &VIEW5..target_value
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Target Value^';

-- Bug 63415, end



-- Bug 63415, end

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- FINITE STATE DECLARATIONS ------------------------------
-----------------------------------------------------------------------------
db_state_list_     CONSTANT VARCHAR2(13) := 'Open^Planned^';
client_state_list_ CONSTANT VARCHAR2(13) := 'Open^Planned^';
active_state_list_          VARCHAR2(52) := Language_SYS.Translate_State_(lu_name_, client_state_list_);
state_separator_   CONSTANT VARCHAR2(1)  := Client_SYS.field_separator_;

bp_installed_      CONSTANT BOOLEAN      := Dictionary_SYS.Component_Is_Installed('BUDPRO');
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------


PROCEDURE Distribute_Input_Values___ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_count_ IN NUMBER,
   scorecard_object_ IN VARCHAR2 );
--PROCHEAD.Start_Publish_Environments___


PROCEDURE Object_Planned_Date___ (
   rec_  IN     &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 );

FUNCTION Find_Column___(
   environment_      IN VARCHAR2,
   scorecard_        IN VARCHAR2,
   year_             IN VARCHAR2,
   version_          IN VARCHAR2,
   scorecard_object_ IN VARCHAR2,
   key_              IN VARCHAR2) RETURN VARCHAR2;
-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      exception_init(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_
      AND    &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;

FUNCTION Lock_By_Keys___ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM   &TABLE
      WHERE  &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;


FUNCTION Get_Object_By_Keys___ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;

FUNCTION Check_Exist___ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Exist___;

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2)
IS
   CURSOR get_version IS
   SELECT &OBJID, &OBJVERSION
      FROM  &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION FINITE STATE MACHINE --------------------
-----------------------------------------------------------------------------
-- Finite_State_Set___
--    Updates the finite state indicator for an existing LU-instance.
--
-- Finite_State_Machine___
--    Processes an event by:
--    1. Fetching the current state
--    2. Evaluating any conditions for given event at current state
--    3. executing any exit code for the old state
--    4. Performing any action associated with given event
--    5. update the database to the new state
--    6. execute any entry code for the new state
--    7. Executing a state change to the new state
--
-- Finite_State_Add_To_Attr___
--    Adds the current state and allowed events to the attribute string.
--
-- Finite_State_Init___
--    Sets the initial finite state indicator for an existing LU-instance
--    and processes any automatic events.
-----------------------------------------------------------------------------
PROCEDURE Finite_State_Set___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
BEGIN
   rec_.rowversion := sysdate;
    UPDATE scorecard_input_value_tab
      SET &OBJSTATE = state_,
          mea_state_change_date = rec_.rowversion,
          rowversion = rec_.rowversion
      WHERE environment = rec_.environment
      AND   scorecard = rec_.scorecard
      AND   year = rec_.year
      AND   version = rec_.version
      AND   scorecard_object = rec_.scorecard_object;
   rec_.rowstate := state_;
END Finite_State_Set___;
PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.rowstate;
   IF (state_ IS NULL) THEN
      IF (event_ IS NULL) THEN
         rec_.rowstate := 'Open';
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Open') THEN
      IF (event_ = 'Plan') THEN
         Finite_State_Set___(rec_, 'Planned');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Planned') THEN
      IF (event_ = 'Plan') THEN
         Object_Planned_Date___(rec_, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSE
      Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
   END IF;
END Finite_State_Machine___;
PROCEDURE Finite_State_Add_To_Attr___ (
   rec_   IN     &TABLE%ROWTYPE,
   attr_  IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.rowstate;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;
PROCEDURE Finite_State_Init___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   Finite_State_Machine___(rec_, NULL, attr_);
   Finite_State_Add_To_Attr___(rec_, attr_);
END Finite_State_Init___;
-----------------------------------------------------------------------------
-------------------- PRIVATE FINITE STATE MACHINE ---------------------------
-----------------------------------------------------------------------------
-- Finite_State_Decode__
--   Returns the client equivalent for any database representation of
--   a state name = objstate.
--
-- Finite_State_Encode__
--   Returns the database equivalent for any client representation of
--   a state name = state.
--
-- Enumerate_States__
--   Returns a list of all possible finite states in client terminology.
--
-- Finite_State_Events__
--   Returns a list of allowed events for a given state
--   NOTE! Regardless of conditions if not otherwize encoded
--
-- Enumerate_Events__
--   Returns a list of all possible events.
-----------------------------------------------------------------------------
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(active_state_list_, db_state_list_, db_state_));
END Finite_State_Decode__;
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(active_state_list_, db_state_list_, client_state_));
END Finite_State_Encode__;
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2)
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(active_state_list_);
END Enumerate_States__;
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Open') THEN
      RETURN 'Plan^';
   ELSIF (db_state_ = 'Planned') THEN
      RETURN 'Plan^';
   ELSE
      RETURN NULL;
   END IF;
END Finite_State_Events__;
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'Plan^';
END Enumerate_Events__;
-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);

   measure_format_    NUMBER;

BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'ENVIRONMENT') THEN
         newrec_.environment := value_;
         Scorecard_Environment_API.Exist(newrec_.environment);
      ELSIF (name_ = 'SCORECARD') THEN
         newrec_.scorecard := value_;
         Scorecard_API.Exist(newrec_.environment, newrec_.scorecard);
      ELSIF (name_ = 'YEAR') THEN
         newrec_.year := value_;
         Environment_Year_API.Exist(newrec_.environment, newrec_.year);
      ELSIF (name_ = 'VERSION') THEN
         newrec_.version := value_;
      ELSIF (name_ = 'SCORECARD_OBJECT') THEN
         newrec_.scorecard_object := value_;
      ELSIF (name_ = 'OBJECT_TYPE') THEN
         newrec_.object_type := value_;
      ELSIF (name_ = 'YEAR_VALUE') THEN
         newrec_.year_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P1_KEY') THEN
         newrec_.p1_key := value_;
      ELSIF (name_ = 'P1_VALUE') THEN
         newrec_.p1_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P2_KEY') THEN
         newrec_.p2_key := value_;
      ELSIF (name_ = 'P2_VALUE') THEN
         newrec_.p2_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P3_KEY') THEN
         newrec_.p3_key := value_;
      ELSIF (name_ = 'P3_VALUE') THEN
         newrec_.p3_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P4_KEY') THEN
         newrec_.p4_key := value_;
      ELSIF (name_ = 'P4_VALUE') THEN
         newrec_.p4_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P5_KEY') THEN
         newrec_.p5_key := value_;
      ELSIF (name_ = 'P5_VALUE') THEN
         newrec_.p5_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P6_KEY') THEN
         newrec_.p6_key := value_;
      ELSIF (name_ = 'P6_VALUE') THEN
         newrec_.p6_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P7_KEY') THEN
         newrec_.p7_key := value_;
      ELSIF (name_ = 'P7_VALUE') THEN
         newrec_.p7_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P8_KEY') THEN
         newrec_.p8_key := value_;
      ELSIF (name_ = 'P8_VALUE') THEN
         newrec_.p8_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P9_KEY') THEN
         newrec_.p9_key := value_;
      ELSIF (name_ = 'P9_VALUE') THEN
         newrec_.p9_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P10_KEY') THEN
         newrec_.p10_key := value_;
      ELSIF (name_ = 'P10_VALUE') THEN
         newrec_.p10_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P11_KEY') THEN
         newrec_.p11_key := value_;
      ELSIF (name_ = 'P11_VALUE') THEN
         newrec_.p11_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P12_KEY') THEN
         newrec_.p12_key := value_;
      ELSIF (name_ = 'P12_VALUE') THEN
         newrec_.p12_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ACTION') THEN
         newrec_.action := value_;
      ELSIF (name_ = 'MEA_STATE_CHANGE_DATE') THEN
         newrec_.mea_state_change_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'BUDGET_VERSION') THEN
         newrec_.budget_version := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;


   IF( newrec_.scorecard_object IS NOT NULL) THEN

      measure_format_      := TO_NUMBER(Scorecard_Measure_API.Get_Measure_Format(newrec_.scorecard_object));

      newrec_.year_value   := newrec_.year_value  *  measure_format_;
      newrec_.p1_value     := newrec_.p1_value     *  measure_format_;
      newrec_.p2_value     := newrec_.p2_value     *  measure_format_;
      newrec_.p3_value     := newrec_.p3_value     *  measure_format_;
      newrec_.p4_value     := newrec_.p4_value     *  measure_format_;
      newrec_.p5_value     := newrec_.p5_value     *  measure_format_;
      newrec_.p6_value     := newrec_.p6_value     *  measure_format_;
      newrec_.p7_value     := newrec_.p7_value     *  measure_format_;
      newrec_.p8_value     := newrec_.p8_value     *  measure_format_;
      newrec_.p9_value     := newrec_.p9_value     *  measure_format_;
      newrec_.p10_value    := newrec_.p10_value    *  measure_format_;
      newrec_.p11_value    := newrec_.p11_value    *  measure_format_;
      newrec_.p12_value    := newrec_.p12_value    *  measure_format_;

   END IF;

   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'ENVIRONMENT', newrec_.environment);
   Error_SYS.Check_Not_Null(lu_name_, 'SCORECARD', newrec_.scorecard);
   Error_SYS.Check_Not_Null(lu_name_, 'YEAR', newrec_.year);
   Error_SYS.Check_Not_Null(lu_name_, 'VERSION', newrec_.version);
   Error_SYS.Check_Not_Null(lu_name_, 'SCORECARD_OBJECT', newrec_.scorecard_object);
   Error_SYS.Check_Not_Null(lu_name_, 'OBJECT_TYPE', newrec_.object_type);
   Error_SYS.Check_Not_Null(lu_name_, 'ACTION', newrec_.action);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   newrec_.mea_state_change_date := sysdate;
   INSERT
      INTO scorecard_input_value_tab (
         environment,
         scorecard,
         year,
         version,
         scorecard_object,
         object_type,
         year_value,
         p1_key,
         p1_value,
         p2_key,
         p2_value,
         p3_key,
         p3_value,
         p4_key,
         p4_value,
         p5_key,
         p5_value,
         p6_key,
         p6_value,
         p7_key,
         p7_value,
         p8_key,
         p8_value,
         p9_key,
         p9_value,
         p10_key,
         p10_value,
         p11_key,
         p11_value,
         p12_key,
         p12_value,
         action,
         mea_state_change_date,
         budget_version,
         rowversion,
         rowstate)
      VALUES (
         newrec_.environment,
         newrec_.scorecard,
         newrec_.year,
         newrec_.version,
         newrec_.scorecard_object,
         newrec_.object_type,
         newrec_.year_value,
         newrec_.p1_key,
         newrec_.p1_value,
         newrec_.p2_key,
         newrec_.p2_value,
         newrec_.p3_key,
         newrec_.p3_value,
         newrec_.p4_key,
         newrec_.p4_value,
         newrec_.p5_key,
         newrec_.p5_value,
         newrec_.p6_key,
         newrec_.p6_value,
         newrec_.p7_key,
         newrec_.p7_value,
         newrec_.p8_key,
         newrec_.p8_value,
         newrec_.p9_key,
         newrec_.p9_value,
         newrec_.p10_key,
         newrec_.p10_value,
         newrec_.p11_key,
         newrec_.p11_value,
         newrec_.p12_key,
         newrec_.p12_value,
         newrec_.action,
         newrec_.mea_state_change_date,
         newrec_.budget_version,
         newrec_.rowversion,
         'Open')
      RETURNING &OBJID INTO objid_;
   Finite_State_Init___(newrec_, attr_);
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);


   measure_format_    NUMBER;
   from_budpro_       VARCHAR2(5):= 'FALSE';
   oldrec_           Scorecard_Input_Value_Tab%ROWTYPE;

BEGIN
   ptr_ := NULL;
   oldrec_  := newrec_;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'ENVIRONMENT') THEN
         newrec_.environment := value_;
         Scorecard_Environment_API.Exist(newrec_.environment);
      ELSIF (name_ = 'SCORECARD') THEN
         newrec_.scorecard := value_;
         Scorecard_API.Exist(newrec_.environment, newrec_.scorecard);
      ELSIF (name_ = 'YEAR') THEN
         newrec_.year := value_;
         Environment_Year_API.Exist(newrec_.environment, newrec_.year);
      ELSIF (name_ = 'VERSION') THEN
         Error_SYS.Item_Update(lu_name_, 'VERSION');
      ELSIF (name_ = 'SCORECARD_OBJECT') THEN
         newrec_.scorecard_object := value_;
      ELSIF (name_ = 'OBJECT_TYPE') THEN
         newrec_.object_type := value_;
      ELSIF (name_ = 'YEAR_VALUE') THEN
         newrec_.year_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P1_KEY') THEN
         newrec_.p1_key := value_;
      ELSIF (name_ = 'P1_VALUE') THEN
         newrec_.p1_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P2_KEY') THEN
         newrec_.p2_key := value_;
      ELSIF (name_ = 'P2_VALUE') THEN
         newrec_.p2_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P3_KEY') THEN
         newrec_.p3_key := value_;
      ELSIF (name_ = 'P3_VALUE') THEN
         newrec_.p3_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P4_KEY') THEN
         newrec_.p4_key := value_;
      ELSIF (name_ = 'P4_VALUE') THEN
         newrec_.p4_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P5_KEY') THEN
         newrec_.p5_key := value_;
      ELSIF (name_ = 'P5_VALUE') THEN
         newrec_.p5_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P6_KEY') THEN
         newrec_.p6_key := value_;
      ELSIF (name_ = 'P6_VALUE') THEN
         newrec_.p6_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P7_KEY') THEN
         newrec_.p7_key := value_;
      ELSIF (name_ = 'P7_VALUE') THEN
         newrec_.p7_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P8_KEY') THEN
         newrec_.p8_key := value_;
      ELSIF (name_ = 'P8_VALUE') THEN
         newrec_.p8_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P9_KEY') THEN
         newrec_.p9_key := value_;
      ELSIF (name_ = 'P9_VALUE') THEN
         newrec_.p9_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P10_KEY') THEN
         newrec_.p10_key := value_;
      ELSIF (name_ = 'P10_VALUE') THEN
         newrec_.p10_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P11_KEY') THEN
         newrec_.p11_key := value_;
      ELSIF (name_ = 'P11_VALUE') THEN
         newrec_.p11_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'P12_KEY') THEN
         newrec_.p12_key := value_;
      ELSIF (name_ = 'P12_VALUE') THEN
         newrec_.p12_value := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ACTION') THEN
         newrec_.action := value_;
      ELSIF (name_ = 'MEA_STATE_CHANGE_DATE') THEN
         newrec_.mea_state_change_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'BUDGET_VERSION') THEN
         newrec_.budget_version := value_;
      ELSIF (name_ = 'FROM_BUDPRO') THEN
         from_budpro_ := value_;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;


   IF( newrec_.scorecard_object IS NOT NULL AND from_budpro_ = 'FALSE') THEN

      measure_format_      := TO_NUMBER(Scorecard_Measure_API.Get_Measure_Format(newrec_.scorecard_object));
      IF( newrec_.year_value != NVL(oldrec_.year_value,0)) THEN
         newrec_.year_value   := newrec_.year_value  *  measure_format_;
      END IF;
      IF( newrec_.p1_value != NVL(oldrec_.p1_value,0)) THEN
         newrec_.p1_value     := newrec_.p1_value     *  measure_format_;
      END IF;
      IF( newrec_.p2_value != NVL(oldrec_.p2_value,0)) THEN
         newrec_.p2_value     := newrec_.p2_value     *  measure_format_;
      END IF;
      IF( newrec_.p3_value != NVL(oldrec_.p3_value,0)) THEN
         newrec_.p3_value     := newrec_.p3_value     *  measure_format_;
      END IF;
      IF( newrec_.p4_value != NVL(oldrec_.p4_value,0)) THEN
         newrec_.p4_value     := newrec_.p4_value     *  measure_format_;
      END IF;
      IF( newrec_.p5_value != NVL(oldrec_.p5_value,0)) THEN
         newrec_.p5_value     := newrec_.p5_value     *  measure_format_;
      END IF;
      IF( newrec_.p6_value != NVL(oldrec_.p6_value,0)) THEN
         newrec_.p6_value     := newrec_.p6_value     *  measure_format_;
      END IF;
      IF( newrec_.p7_value != NVL(oldrec_.p7_value,0)) THEN
         newrec_.p7_value     := newrec_.p7_value     *  measure_format_;
      END IF;
      IF( newrec_.p8_value != NVL(oldrec_.p8_value,0)) THEN
         newrec_.p8_value     := newrec_.p8_value     *  measure_format_;
      END IF;
      IF( newrec_.p9_value != NVL(oldrec_.p9_value,0)) THEN
         newrec_.p9_value     := newrec_.p9_value     *  measure_format_;
      END IF;
      IF( newrec_.p10_value != NVL(oldrec_.p10_value,0)) THEN
         newrec_.p10_value    := newrec_.p10_value    *  measure_format_;
      END IF;
      IF( newrec_.p11_value != NVL(oldrec_.p11_value,0)) THEN
         newrec_.p11_value    := newrec_.p11_value    *  measure_format_;
      END IF;
      IF( newrec_.p12_value != NVL(oldrec_.p12_value,0)) THEN
         newrec_.p12_value    := newrec_.p12_value    *  measure_format_;
      END IF;

   END IF;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'ENVIRONMENT', newrec_.environment);
   Error_SYS.Check_Not_Null(lu_name_, 'SCORECARD', newrec_.scorecard);
   Error_SYS.Check_Not_Null(lu_name_, 'YEAR', newrec_.year);
   Error_SYS.Check_Not_Null(lu_name_, 'SCORECARD_OBJECT', newrec_.scorecard_object);
   Error_SYS.Check_Not_Null(lu_name_, 'OBJECT_TYPE', newrec_.object_type);
   Error_SYS.Check_Not_Null(lu_name_, 'ACTION', newrec_.action);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN BOOLEAN DEFAULT FALSE )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   IF by_keys_ THEN
      UPDATE scorecard_input_value_tab
      SET environment = newrec_.environment,
          scorecard = newrec_.scorecard,
          year = newrec_.year,
          version = newrec_.version,
          scorecard_object = newrec_.scorecard_object,
          object_type = newrec_.object_type,
          year_value = newrec_.year_value,
          p1_key = newrec_.p1_key,
          p1_value = newrec_.p1_value,
          p2_key = newrec_.p2_key,
          p2_value = newrec_.p2_value,
          p3_key = newrec_.p3_key,
          p3_value = newrec_.p3_value,
          p4_key = newrec_.p4_key,
          p4_value = newrec_.p4_value,
          p5_key = newrec_.p5_key,
          p5_value = newrec_.p5_value,
          p6_key = newrec_.p6_key,
          p6_value = newrec_.p6_value,
          p7_key = newrec_.p7_key,
          p7_value = newrec_.p7_value,
          p8_key = newrec_.p8_key,
          p8_value = newrec_.p8_value,
          p9_key = newrec_.p9_key,
          p9_value = newrec_.p9_value,
          p10_key = newrec_.p10_key,
          p10_value = newrec_.p10_value,
          p11_key = newrec_.p11_key,
          p11_value = newrec_.p11_value,
          p12_key = newrec_.p12_key,
          p12_value = newrec_.p12_value,
          action = newrec_.action,
          mea_state_change_date = newrec_.mea_state_change_date,
          budget_version = newrec_.budget_version,
          rowversion = newrec_.rowversion
      WHERE environment = newrec_.environment
      AND   scorecard = newrec_.scorecard
      AND   year = newrec_.year
      AND   version = newrec_.version
      AND   scorecard_object = newrec_.scorecard_object;
   ELSE
      UPDATE scorecard_input_value_tab
      SET environment = newrec_.environment,
          scorecard = newrec_.scorecard,
          year = newrec_.year,
          version = newrec_.version,
          scorecard_object = newrec_.scorecard_object,
          object_type = newrec_.object_type,
          year_value = newrec_.year_value,
          p1_key = newrec_.p1_key,
          p1_value = newrec_.p1_value,
          p2_key = newrec_.p2_key,
          p2_value = newrec_.p2_value,
          p3_key = newrec_.p3_key,
          p3_value = newrec_.p3_value,
          p4_key = newrec_.p4_key,
          p4_value = newrec_.p4_value,
          p5_key = newrec_.p5_key,
          p5_value = newrec_.p5_value,
          p6_key = newrec_.p6_key,
          p6_value = newrec_.p6_value,
          p7_key = newrec_.p7_key,
          p7_value = newrec_.p7_value,
          p8_key = newrec_.p8_key,
          p8_value = newrec_.p8_value,
          p9_key = newrec_.p9_key,
          p9_value = newrec_.p9_value,
          p10_key = newrec_.p10_key,
          p10_value = newrec_.p10_value,
          p11_key = newrec_.p11_key,
          p11_value = newrec_.p11_value,
          p12_key = newrec_.p12_key,
          p12_value = newrec_.p12_value,
          action = newrec_.action,
          mea_state_change_date = newrec_.mea_state_change_date,
          budget_version = newrec_.budget_version,
          rowversion = newrec_.rowversion
      WHERE &OBJID = objid_;
   END IF;
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.environment || '^' || remrec_.scorecard || '^' || remrec_.year || '^' || remrec_.version || '^' || remrec_.scorecard_object || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.environment || '^' || remrec_.scorecard || '^' || remrec_.year || '^' || remrec_.version || '^' || remrec_.scorecard_object || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  scorecard_input_value_tab
      WHERE &OBJID = objid_;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist___(environment_, scorecard_, year_, version_, scorecard_object_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- PUBLIC TRANSLATION METHODS -----------------------------
-----------------------------------------------------------------------------
PROCEDURE Language_Refreshed
IS
BEGIN
   active_state_list_ := Language_SYS.Translate_State_(lu_name_, client_state_list_);
END Language_Refreshed;
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------


PROCEDURE Distribute_Input_Values___ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_count_ IN NUMBER,
   scorecard_object_ IN VARCHAR2 )
IS
   child_scr_                        VARCHAR2(20);


   CURSOR get_child_scorecards IS        --- Move to scorecard
   SELECT scorecard
   FROM scorecard
   WHERE parent=scorecard_
   AND environment=environment_;

   CURSOR get_open_child_scr IS
   SELECT '1'
   FROM scorecard
   WHERE scorecard = child_scr_
   AND environment=environment_
   AND objstate NOT IN ('Open', 'Planned');

   CURSOR get_input_values (scorecard_object_  VARCHAR2,temp_scorecard_  VARCHAR2) IS
   SELECT year_value,p1_value,p2_value,p3_value,p4_value,p5_value,p6_value,
          p7_value,p8_value,p9_value,p10_value,p11_value,p12_value
   FROM scorecard_input_value_tab
   WHERE environment = environment_
   AND scorecard = temp_scorecard_
   AND year = year_
   AND version = version_
   AND scorecard_object = scorecard_object_
   AND object_type_=object_type_;

   CURSOR get_attribute_value_sum(attribute_  VARCHAR2) IS
   SELECT SUM(TO_NUMBER(value))
   FROM scorecard_attribute_tab
   WHERE environment=environment_
   AND scorecard IN (SELECT scorecard
                     FROM scorecard
                     WHERE environment = environment_
                     AND parent = scorecard_)
   AND attribute=attribute_;

   value_distribution_type_          VARCHAR2(20);
   hierachical_dist_logic_           VARCHAR2(20);
   distribution_version_             VARCHAR2(20);
   distribution_attribute_           VARCHAR2(20);
   temp_val_                         VARCHAR2(5);
   newrec_                           SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   oldrec_                           SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   objid_                            VARCHAR2(2000);
   attr_                             VARCHAR2(2000);
   objversion_                       VARCHAR2(2000);
   child_count_                      NUMBER;
   temp_period_count_                NUMBER;
   attribute_val_str_                VARCHAR2(2000);
   attribute_value_                  NUMBER;
   attribute_value_sum_              NUMBER;

   parent_year_value_                NUMBER;
   parent_p1_value_                  NUMBER;
   parent_p2_value_                  NUMBER;
   parent_p3_value_                  NUMBER;
   parent_p4_value_                  NUMBER;
   parent_p5_value_                  NUMBER;
   parent_p6_value_                  NUMBER;
   parent_p7_value_                  NUMBER;
   parent_p8_value_                  NUMBER;
   parent_p9_value_                  NUMBER;
   parent_p10_value_                 NUMBER;
   parent_p11_value_                 NUMBER;
   parent_p12_value_                 NUMBER;

   period_val_arr_                   PeriodValArrType;
   TYPE ValArrType                   IS TABLE OF NUMBER
                                     INDEX BY BINARY_INTEGER;
   parent_val_arr_                   ValArrType;
   child_val_arr_                    ValArrType;
   year_value_                       NUMBER;

BEGIN

   Scorecard_Structure_API.Get_Dist_Logic_Details(value_distribution_type_,hierachical_dist_logic_,
                                                    distribution_version_,distribution_attribute_,
                                                    scorecard_,scorecard_object_,environment_,object_type_);

   IF value_distribution_type_ IS NULL THEN
      IF object_type_='MEASURE' THEN
         Error_SYS.Appl_General(lu_name_,'VALDIST1: Value distribution type must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
      ELSE
         Error_SYS.Appl_General(lu_name_,'VALDIST2: Value distribution type must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
      END IF;
   END IF;

   OPEN get_input_values(scorecard_object_,scorecard_);
   FETCH get_input_values INTO  parent_year_value_,parent_p1_value_,parent_p2_value_,parent_p3_value_,parent_p4_value_,
                                parent_p5_value_,parent_p6_value_,parent_p7_value_,parent_p8_value_,parent_p9_value_,
                                parent_p10_value_,parent_p11_value_,parent_p12_value_;
   CLOSE get_input_values;

    parent_val_arr_(1):=parent_p1_value_;
    parent_val_arr_(2):=parent_p2_value_;
    parent_val_arr_(3):=parent_p3_value_;
    parent_val_arr_(4):=parent_p4_value_;
    parent_val_arr_(5):=parent_p5_value_;
    parent_val_arr_(6):=parent_p6_value_;
    parent_val_arr_(7):=parent_p7_value_;
    parent_val_arr_(8):=parent_p8_value_;
    parent_val_arr_(9):=parent_p9_value_;
    parent_val_arr_(10):=parent_p10_value_;
    parent_val_arr_(11):=parent_p11_value_;
    parent_val_arr_(12):=parent_p12_value_;
    --END IF;

    FOR temp_period_count_ IN 1..period_count_ LOOP
       IF  parent_val_arr_(temp_period_count_) IS NULL THEN
          Error_SYS.Appl_General(lu_name_,'PERVAL1: One or more periods in parent scorecard :P1 does not contain input values.',scorecard_);
       END IF;
    END LOOP;

    child_count_:=Scorecard_API.Get_Child_Count(scorecard_,environment_);

    FOR child_scorecards_ IN get_child_scorecards LOOP  -- fetch the child scorecards

      year_value_:=0;
      child_scr_ := child_scorecards_.scorecard;
      OPEN get_open_child_scr;
      FETCH get_open_child_scr INTO temp_val_;
      CLOSE get_open_child_scr;

      IF (temp_val_ = '1') THEN
         Error_SYS.Appl_General(lu_name_,'TMPVAL: Not all scorecards in the hierarchy are opened for planning. Distribution not possible.');
      END IF;

      IF NOT Check_Exist___(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_) THEN
         Error_SYS.Appl_General(lu_name_,'INPVAL: Scorecard object :P1 does not exist in scorecard :P2.',scorecard_object_,child_scorecards_.scorecard);

      ELSE
         oldrec_:=Lock_By_Keys___(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_);
         child_val_arr_(1):=oldrec_.p1_value;
         child_val_arr_(2):=oldrec_.p2_value;
         child_val_arr_(3):=oldrec_.p3_value;
         child_val_arr_(4):=oldrec_.p4_value;
         child_val_arr_(5):=oldrec_.p5_value;
         child_val_arr_(6):=oldrec_.p6_value;
         child_val_arr_(7):=oldrec_.p7_value;
         child_val_arr_(8):=oldrec_.p8_value;
         child_val_arr_(9):=oldrec_.p9_value;
         child_val_arr_(10):=oldrec_.p10_value;
         child_val_arr_(11):=oldrec_.p11_value;
         child_val_arr_(12):=oldrec_.p12_value;
         newrec_:=oldrec_;
         IF value_distribution_type_ = 'PERCENTAGE' THEN
            IF hierachical_dist_logic_ IS NULL THEN
              FOR temp_period_count_ IN 1..period_count_ LOOP
                 child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_);
                 year_value_:=year_value_ +child_val_arr_(temp_period_count_);
              END LOOP;

            ELSIF hierachical_dist_logic_='VERSION' THEN
              IF distribution_version_ IS NULL THEN
                 IF object_type_='MEASURE' THEN
                    Error_SYS.Appl_General(lu_name_,'DISTVER1: Distribution version must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                 ELSE
                    Error_SYS.Appl_General(lu_name_,'DISTVER2: Distribution version must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                 END IF;
              END IF;
              Scorecard_Value_API.Get_Period_Values__ (period_val_arr_,child_scorecards_.scorecard,object_type_,
                                                       period_count_,environment_,scorecard_,year_,
                                                       distribution_version_,scorecard_object_);
              FOR temp_period_count_ IN 1..period_count_ LOOP
                 child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_)
                                                    *(period_val_arr_(temp_period_count_).value
                                                       /(period_val_arr_(temp_period_count_).sum/child_count_));
                 year_value_:=year_value_ +child_val_arr_(temp_period_count_);
              END LOOP;
            ELSIF hierachical_dist_logic_='ATTRIBUTE' THEN
              IF distribution_attribute_ IS NULL THEN
                 IF object_type_='MEASURE' THEN
                    Error_SYS.Appl_General(lu_name_,'DISTATTR1: Distribution attribute must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                 ELSE
                    Error_SYS.Appl_General(lu_name_,'DISTATTR2: Distribution attribute must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                 END IF;
              END IF;

              attribute_val_str_:=Scorecard_Attribute_API.Get_Value(environment_,child_scorecards_.scorecard,
                                                                    distribution_attribute_);
              IF attribute_val_str_ IS NULL THEN
                 Error_SYS.Appl_General(lu_name_,'ATTRERR: Attribute :P1 must have a value in scorecard :P2.',distribution_attribute_,child_scorecards_.scorecard);
              ELSE
                 BEGIN
                    attribute_value_:=TO_NUMBER(attribute_val_str_);
                 EXCEPTION
                    WHEN OTHERS THEN
                       Error_SYS.Appl_General(lu_name_,'NUMVALERR: Value of the attribute :P1 in all child scorecards of parent scorecard :P2 must be numeric.',distribution_attribute_,scorecard_);
                 END;
              END IF;
              BEGIN
                 OPEN get_attribute_value_sum(distribution_attribute_);
                 FETCH get_attribute_value_sum INTO attribute_value_sum_;
                 CLOSE get_attribute_value_sum;

                 IF attribute_value_sum_=0 THEN
                     Error_SYS.Appl_General(lu_name_,'ATTRSUM : Attribute value of at least one child scorecard of parent scorecard :P1 must be greater than 0.');
                 END IF;
              EXCEPTION
                 WHEN OTHERS THEN
                    Error_SYS.Appl_General(lu_name_,'NUMVALERR: Value of the attribute :P1 in all child scorecards of parent scorecard :P2 must be numeric.',distribution_attribute_,scorecard_);
              END;

              FOR temp_period_count_ IN 1..period_count_ LOOP
                 child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_)
                                                    *(attribute_value_/(attribute_value_sum_/child_count_));
                 year_value_:=year_value_ +child_val_arr_(temp_period_count_);
              END LOOP;
            END IF;
            year_value_:=year_value_ /period_count_;
         ELSIF value_distribution_type_ = 'VALUE' THEN
            IF hierachical_dist_logic_ IS NULL THEN
               FOR temp_period_count_ IN 1..period_count_ LOOP
                  child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_)/child_count_;
                  year_value_:=year_value_ +child_val_arr_(temp_period_count_);
               END LOOP;
            ELSIF hierachical_dist_logic_='VERSION' THEN
               IF distribution_version_ IS NULL THEN
                  IF object_type_='MEASURE' THEN
                      Error_SYS.Appl_General(lu_name_,'DISTVER1: Distribution version must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                   ELSE
                      Error_SYS.Appl_General(lu_name_,'DISTVER2: Distribution version must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                 END IF;
               END IF;
               Scorecard_Value_API.Get_Period_Values__ (period_val_arr_,child_scorecards_.scorecard,object_type_,
                                                       period_count_,environment_,scorecard_,year_,
                                                       distribution_version_,scorecard_object_);
               FOR temp_period_count_ IN 1..period_count_ LOOP
                  child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_)
                                                    *(period_val_arr_(temp_period_count_).value
                                                      /period_val_arr_(temp_period_count_).sum);
                  year_value_:=year_value_ +child_val_arr_(temp_period_count_);
               END LOOP;
            ELSIF hierachical_dist_logic_='ATTRIBUTE' THEN
               IF distribution_attribute_ IS NULL THEN
                  IF object_type_='MEASURE' THEN
                     Error_SYS.Appl_General(lu_name_,'DISTATTR1: Distribution attribute must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                  ELSE
                     Error_SYS.Appl_General(lu_name_,'DISTATTR2: Distribution attribute must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
                  END IF;
               END IF;
               attribute_val_str_:=Scorecard_Attribute_API.Get_Value(environment_,child_scorecards_.scorecard,
                                                                    distribution_attribute_);
               IF attribute_val_str_ IS NULL THEN
                  Error_SYS.Appl_General(lu_name_,'ATTRERR: Attribute :P1 must have a value in scorecard :P2.',distribution_attribute_,child_scorecards_.scorecard);
               ELSE
                  BEGIN
                     attribute_value_:=TO_NUMBER(attribute_val_str_);
                  EXCEPTION
                     WHEN OTHERS THEN
	                    Error_SYS.Appl_General(lu_name_,'NUMVALERR: Value of the attribute :P1 in all child scorecards of parent scorecard :P2 must be numeric.',distribution_attribute_,scorecard_);
                  END;
               END IF;
               BEGIN
                  OPEN get_attribute_value_sum(distribution_attribute_);
                  FETCH get_attribute_value_sum INTO attribute_value_sum_;
                  CLOSE get_attribute_value_sum;

                  IF attribute_value_sum_=0 THEN
                     Error_SYS.Appl_General(lu_name_,'ATTRSUM : Attribute value of at least one child scorecard of parent scorecard :P1 must be greater than 0.');
                  END IF;
               EXCEPTION
                  WHEN OTHERS THEN
                     Error_SYS.Appl_General(lu_name_,'NUMVALERR: Value of the attribute :P1 in all child scorecards of parent scorecard :P2 must be numeric.',distribution_attribute_,scorecard_);
               END;

               FOR temp_period_count_ IN 1..period_count_ LOOP
                  child_val_arr_(temp_period_count_):=parent_val_arr_(temp_period_count_)
                                                     *(attribute_value_/attribute_value_sum_);
                  year_value_:=year_value_ +child_val_arr_(temp_period_count_);
               END LOOP;
            END IF;
         END IF;
         newrec_.year_value:=year_value_;
         newrec_.p1_value:=child_val_arr_(1);
         newrec_.p2_value:=child_val_arr_(2);
         newrec_.p3_value:=child_val_arr_(3);
         newrec_.p4_value:=child_val_arr_(4);
         newrec_.p5_value:=child_val_arr_(5);
         newrec_.p6_value:=child_val_arr_(6);
         newrec_.p7_value:=child_val_arr_(7);
         newrec_.p8_value:=child_val_arr_(8);
         newrec_.p9_value:=child_val_arr_(9);
         newrec_.p10_value:=child_val_arr_(10);
         newrec_.p11_value:=child_val_arr_(11);
         newrec_.p12_value:=child_val_arr_(12);
         Update___(objid_,oldrec_,newrec_,attr_,objversion_,TRUE);
         Scorecard_api.Set_To_Planned(environment_,child_scorecards_.scorecard);
         Scorecard_Input_Value_api.Set_To_Planned(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_);
      END IF;
   END LOOP;
END Distribute_Input_Values___;
PROCEDURE Object_Planned_Date___ (
   rec_  IN     &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   newrec_ := rec_;
   Finite_State_Set___(newrec_, 'Planned');
END Object_Planned_Date___;

FUNCTION Find_Column___(
   environment_      IN VARCHAR2,
   scorecard_        IN VARCHAR2,
   year_             IN VARCHAR2,
   version_          IN VARCHAR2,
   scorecard_object_ IN VARCHAR2,
   key_              IN VARCHAR2) RETURN VARCHAR2
IS
   CURSOR get_record IS
      SELECT p1_key, p2_key, p3_key, p4_key, p5_key, p6_key,
             p7_key, p8_key, p9_key, p10_key, p11_key, p12_key
      FROM   &TABLE
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    scorecard_object = scorecard_object_;

   column_ VARCHAR2(30);
BEGIN
   FOR rec_ IN get_record LOOP
      IF (rec_.p1_key = key_) THEN
         column_ := 'P1_VALUE';
      ELSIF (rec_.p2_key = key_) THEN
         column_ := 'P2_VALUE';
      ELSIF (rec_.p3_key = key_) THEN
         column_ := 'P3_VALUE';
      ELSIF (rec_.p4_key = key_) THEN
         column_ := 'P4_VALUE';
      ELSIF (rec_.p5_key = key_) THEN
         column_ := 'P5_VALUE';
      ELSIF (rec_.p6_key = key_) THEN
         column_ := 'P6_VALUE';
      ELSIF (rec_.p7_key = key_) THEN
         column_ := 'P7_VALUE';
      ELSIF (rec_.p8_key = key_) THEN
         column_ := 'P8_VALUE';
      ELSIF (rec_.p9_key = key_) THEN
         column_ := 'P9_VALUE';
      ELSIF (rec_.p10_key = key_) THEN
         column_ := 'P10_VALUE';
      ELSIF (rec_.p11_key = key_) THEN
         column_ := 'P11_VALUE';
      ELSIF (rec_.p12_key = key_) THEN
         column_ := 'P12_VALUE';
      END IF;
   END LOOP;

   RETURN column_;
END Find_Column___;
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------


PROCEDURE Update_Versions__ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   measure_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_ IN VARCHAR2,
   version_ IN VARCHAR2,
   version_value_ IN NUMBER,
   plan_type_ IN VARCHAR2,
   data_mart_ IN VARCHAR2 )
IS
  attr_               VARCHAR2(32000);
  objid_              VARCHAR2(2000);
  objversion_         VARCHAR2(2000);
  info_               VARCHAR2(2000);
BEGIN
  General_SYS.Init_Method(lu_name_, '&PKG', 'Update_Versions__');
  Client_SYS.Clear_Attr(attr_);
  IF version_ = 'TAR' THEN
     Client_SYS.Add_To_Attr('TARGET_VALUE', version_value_, attr_);
  ELSIF version_ = 'ACT' THEN
     Client_SYS.Add_To_Attr('ACTUAL_VALUE', version_value_, attr_);
  ELSE
     Client_SYS.Add_To_Attr(version_||'_VALUE', version_value_, attr_);
  END IF;
  IF data_mart_='TRUE' THEN
     Bp_Scorecard_Fact_API.Get_Id_Version(objid_,objversion_,environment_,scorecard_,period_,object_type_,measure_);
     Bp_Scorecard_Fact_API.Modify__(info_,objid_,objversion_,attr_,'DO');
  ELSE
     Scorecard_Value_API.Get_Id_Version(objid_,objversion_,environment_,scorecard_,period_,object_type_,measure_);
     Scorecard_Value_API.Modify__(info_,objid_,objversion_,attr_,'DO');
  END IF;
END Update_Versions__;

PROCEDURE Publish__ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   measure_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_ IN VARCHAR2,
   version_ IN VARCHAR2,
   value_ IN NUMBER,
   plan_type_ IN VARCHAR2 )
IS
  attr_               VARCHAR2(32000);
  objid_              VARCHAR2(2000);
  objversion_         VARCHAR2(2000);
  info_               VARCHAR2(2000);
  flag_               VARCHAR2(5);
  data_mart_enabled_  VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Publish__');
   flag_ := 'TRUE';
   data_mart_enabled_:= Scorecard_Environment_API.Get_Data_Mart(environment_);

   IF data_mart_enabled_='TRUE' THEN
      IF Bp_Scorecard_Fact_API.Check_Exist_By_Object(environment_,scorecard_,period_,object_type_,measure_)='FALSE' THEN
         IF value_ IS NOT NULL THEN
            Client_SYS.Clear_Attr(attr_);
            Client_SYS.Add_To_Attr('ENVIRONMENT', environment_, attr_);
            Client_SYS.Add_To_Attr('SCORECARD', scorecard_, attr_);
            Client_SYS.Add_To_Attr('PERIOD', period_, attr_);
            Client_SYS.Add_To_Attr(object_type_, measure_, attr_);
            Bp_Scorecard_Fact_API.New__(info_,objid_,objversion_,attr_,'DO');
         ELSE
              flag_ := 'FALSE';
           END IF;
        END IF;
     ELSE
        IF Scorecard_Value_API.Check_Exist_By_Object(environment_,scorecard_,period_,object_type_,measure_)='FALSE' THEN
           IF value_ IS NOT NULL THEN
              Client_SYS.Clear_Attr(attr_);
              Client_SYS.Add_To_Attr('ENVIRONMENT', environment_, attr_);
              Client_SYS.Add_To_Attr('SCORECARD', scorecard_, attr_);
              Client_SYS.Add_To_Attr('PERIOD', period_, attr_);
              Client_SYS.Add_To_Attr(object_type_, measure_, attr_);
              Scorecard_Value_API.New__(info_,objid_,objversion_,attr_,'DO');
           ELSE
              flag_ := 'FALSE';
           END IF;
        END IF;
     END IF;

     IF (flag_ = 'TRUE' AND value_ IS NOT NULL) THEN
        Update_Versions__(environment_,scorecard_,measure_ ,object_type_, period_ , version_, value_ , plan_type_ ,data_mart_enabled_);
     END IF;
  flag_ := 'FALSE';
END Publish__;
PROCEDURE Publish_Score__ (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   publish_type_ IN VARCHAR2 )
IS
  measure_ VARCHAR2(40);
  version_ VARCHAR2(15);
  target_tab_  VARCHAR2(30);

  --get measures and components for a specific environment_, scorecard_
  CURSOR get_measure IS
     select * from scorecard_input_value_tab
        where scorecard = scorecard_
        and environment = environment_
        order by scorecard_object;

  -- get Id, version of a scorecard record by keys
  CURSOR get_objid IS
     select objid,objversion from scorecard
        where scorecard = scorecard_
        and environment = environment_;

  attr_   VARCHAR2(32000);
  objid_  VARCHAR2(32000);
  objversion_ VARCHAR2(32000);
  info_  VARCHAR2(2000);
  isScorecardPlan VARCHAR2(5);
  isEnvPlan VARCHAR2(5);
BEGIN
  General_SYS.Init_Method(lu_name_, '&PKG', 'Publish_Score__');
  FOR get_rec_ in get_measure LOOP
     isEnvPlan := 'FALSE';
     isScorecardPlan := 'FALSE';

     measure_ := get_rec_.scorecard_object;
     version_ := get_rec_.version;
     if publish_type_ = 'ENV' then  --plublish only environment plan data
        isEnvPlan := MEASURE_VERSION_API.GET_ENVIRONMENT_PLANNING(version_,environment_);
     else
        isScorecardPlan := MEASURE_VERSION_API.Get_Scorecard_Planning (version_,environment_);
     end if;

     if (isScorecardPlan = 'TRUE' or isEnvPlan = 'TRUE' ) then

        if get_rec_.p1_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type, get_rec_.p1_key, version_ , get_rec_.p1_value,publish_type_);
        end if;
        if get_rec_.p2_key is not null then
           Publish__(environment_, scorecard_,measure_, get_rec_.object_type ,get_rec_.p2_key, version_ , get_rec_.p2_value,publish_type_);
        end if;
        if get_rec_.p3_key is not null then
           Publish__(environment_, scorecard_,measure_, get_rec_.object_type ,get_rec_.p3_key, version_ , get_rec_.p3_value,publish_type_);
        end if;
        if get_rec_.p4_key is not null then
           Publish__(environment_, scorecard_,measure_, get_rec_.object_type,  get_rec_.p4_key, version_ , get_rec_.p4_value,publish_type_);
        end if;
       if get_rec_.p5_key is not null then
           Publish__(environment_, scorecard_,measure_, get_rec_.object_type,  get_rec_.p5_key, version_ , get_rec_.p5_value,publish_type_);
        end if;
        if get_rec_.p6_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p6_key, version_ , get_rec_.p6_value,publish_type_);
        end if;
        if get_rec_.p7_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p7_key, version_ , get_rec_.p7_value,publish_type_);
        end if;
        if get_rec_.p8_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type, get_rec_.p8_key, version_ , get_rec_.p8_value,publish_type_);
        end if;
        if get_rec_.p9_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p9_key, version_ , get_rec_.p9_value,publish_type_);
        end if;
        if get_rec_.p10_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p10_key, version_ , get_rec_.p10_value,publish_type_);
        end if;
        -- Call Id - 85775 Fix
        if get_rec_.p11_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p11_key, version_ , get_rec_.p11_value,publish_type_);
        end if;
        if get_rec_.p12_key is not null then
           Publish__(environment_, scorecard_,measure_,  get_rec_.object_type , get_rec_.p12_key, version_ , get_rec_.p12_value,publish_type_);
        end if;
     end if;
  END LOOP;
  open get_objid;
  fetch get_objid into objid_,objversion_;
  close get_objid;

  SCORECARD_API.MODIFY__(info_,objid_,objversion_,attr_,'DO');

  isScorecardPlan := 'FALSE';
END Publish_Score__;
PROCEDURE Start_Publish_Environments__ (
   attr_ IN VARCHAR2 )
IS
   new_attr_ VARCHAR2(32000) := attr_;
   desc_     VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Start_Publish_Environments__');
   desc_ := Language_SYS.Translate_Constant (lu_name_, 'BGJOB_INPUTSSC:Publish Environment.');
   Transaction_SYS.Deferred_Call ('Scorecard_Input_Value_API.Set_Publish_Environments__',new_attr_, desc_);
END Start_Publish_Environments__;
PROCEDURE Set_Publish_Environments__ (
   attr_ IN VARCHAR2 )
IS
   env VARCHAR2(20);

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Set_Publish_Environments__');
   env:=Client_SYS.Get_Item_Value('ENVIRONMENT',attr_);
   Publish_Environment(env);

END Set_Publish_Environments__;
PROCEDURE Start_Publish_Scorecards__ (
   attr_ IN VARCHAR2 )
IS
   new_attr_ VARCHAR2(32000) := attr_;
   desc_     VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Start_Publish_Scorecards__');
   desc_ := Language_SYS.Translate_Constant (lu_name_, 'BGJOB_INPUTSSC:Publish Scorecards.');
   Transaction_SYS.Deferred_Call ('Scorecard_Input_Value_API.Prepare_Scorecard_Publish__',new_attr_, desc_);
END Start_Publish_Scorecards__;
PROCEDURE Prepare_Scorecard_Publish__ (
   attr_ IN VARCHAR2 )
IS
   env_ VARCHAR2(2000);
   scr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Prepare_Scorecard_Publish__');
   env_:=Client_SYS.Get_Item_Value('ENVIRONMENT',attr_);
   scr_:=Client_SYS.Get_Item_Value('SCORECARD',attr_);
   Set_Publish_Scorecards(env_,scr_);
END Prepare_Scorecard_Publish__;
PROCEDURE Plan__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Plan__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Plan', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Plan__;
-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------


FUNCTION Get_Year (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..year%TYPE;
   CURSOR get_attr IS
      SELECT year
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Year;
FUNCTION Get_Distributed_Attr (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   component_ IN VARCHAR2,
   year_ IN VARCHAR2,
   year_value_ IN NUMBER ) RETURN VARCHAR2
IS
   period_                  VARCHAR2(20);
   version_val_             NUMBER;
   distribute_string_       VARCHAR2(2000);
   index_value_             NUMBER;
   distribute_val_          NUMBER;
   total_val_               NUMBER;
   --distribute_str_       VARCHAR2(20);

   CURSOR version_cur_ IS
      SELECT period,v4_value
      FROM scorecard_value11
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND component = component_
      AND year = year_;

      CURSOR total_cur_ IS
      SELECT sum(v4_value)
      FROM scorecard_value11
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND component = component_
      AND year = year_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Distributed_Attr');
   OPEN total_cur_;
     FETCH total_cur_ INTO total_val_;
   CLOSE total_cur_;
   IF total_val_ IS NULL THEN
      Error_SYS.Appl_General(lu_name_,'SCDISVAL : There are no values for version6');
   END IF;

  --distribute_string_ := "";

  FOR temp_ IN version_cur_ LOOP

  version_val_ := temp_.v4_value;
  period_  := temp_.period;
  index_value_   := scorecard_index_api.Get_Value(environment_,period_,'k_index');
  distribute_val_ := (version_val_/total_val_)*year_value_*index_value_;
  distribute_string_ := distribute_string_ || '^' ||distribute_val_;

  END LOOP;
  RETURN distribute_string_;
END Get_Distributed_Attr;
FUNCTION Get_Action (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..action%TYPE;
   CURSOR get_attr IS
      SELECT action
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Action;
FUNCTION Get_Mea_State_Change_Date (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ &TABLE..mea_state_change_date%TYPE;
   CURSOR get_attr IS
      SELECT mea_state_change_date
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Mea_State_Change_Date;
FUNCTION Get_Budget_Version (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..budget_version%TYPE;
   CURSOR get_attr IS
      SELECT budget_version
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Budget_Version;
PROCEDURE Update_Sales_Values (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   component_ IN VARCHAR2,
   year_value_ IN NUMBER,
   period_count_ IN NUMBER,
   from_where_ IN VARCHAR2,
   action_value_ IN VARCHAR2 )
IS
   period_                  VARCHAR2(20);
   version_val_             NUMBER;
   distribute_string_       VARCHAR2(2000);
   index_value_             NUMBER;
   distribute_val_          NUMBER;
   total_val_               NUMBER;
   total_dist_val_          NUMBER;
   avarage_val_             NUMBER;
   count_null_              NUMBER;
   total_index_             NUMBER;
   period_index_            VARCHAR2(20);
   avarage_index_val_       NUMBER;
   distribute_index_val_    NUMBER;
   index_val_               NUMBER;

   count_                   NUMBER;
   dist_type_               VARCHAR2(30);
   dist_index_              VARCHAR2(20);
   dist_version_            VARCHAR2(20);
   dist_ver_                VARCHAR2(10);
   dist_logic_              VARCHAR2(10);
   temp1_                   VARCHAR2(1000);
   temp2_                   VARCHAR2(1000);

   TYPE RefCurTyp IS REF CURSOR;

   version_cur_      RefCurTyp;
   total_cur_        RefCurTyp;

   TYPE Val_Array_Type IS TABLE OF NUMBER
            INDEX BY BINARY_INTEGER;

   val_arr_  Val_Array_Type;
   rec_        SCORECARD_INPUT_VALUE_TAB%ROWTYPE;

   CURSOR total_index_cur_ IS
      SELECT SUM(value)
      FROM scorecard_index_tab
      WHERE environment = environment_
      AND index_type = dist_index_;

   CURSOR get_period IS
      SELECT period
      FROM scorecard_period_tab
      WHERE environment = environment_
      AND year = year_
      ORDER BY end_date;

   -- Bug 65540, begin
   final_year_value_      NUMBER;
   measure_format_        NUMBER;
   -- Bug 65540, end


BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Update_Sales_Values');
   rec_ := Lock_By_Keys___(environment_,scorecard_,year_,version_,component_);
   count_ := 0;
   --val_arr_  Val_Array_Type;

   IF (from_where_ = 'FROM_COMPONENT') THEN

   dist_type_ := measure_type_api.Encode(scorecard_Measure_api.Get_Measure_type(component_));
   dist_index_ := scorecard_Structure_api.Get_Distribution_Index(scorecard_,component_,environment_,Scorecard_Level_Type_api.Decode('COMPONENT'));
   dist_ver_ := UPPER(scorecard_Structure_api.Get_Distribution_Version(scorecard_,component_,environment_,Scorecard_Level_Type_api.Decode('COMPONENT')));
   dist_logic_ := scorecard_Structure_api.Get_Dist_Logic_Db(scorecard_,component_,environment_,'COMPONENT');

   END IF;

   IF (from_where_ = 'FROM_MEASURE') THEN

   dist_type_  := measure_type_api.Encode(scorecard_Measure_api.Get_Measure_type(component_));
   dist_index_ := scorecard_Structure_api.Get_Distribution_Index(scorecard_,component_,environment_,Scorecard_Level_Type_api.Decode('MEASURE'));
   dist_ver_   := UPPER(scorecard_Structure_api.Get_Distribution_Version(scorecard_,component_,environment_,Scorecard_Level_Type_api.Decode('MEASURE')));
   dist_logic_ := scorecard_Structure_api.Get_Dist_Logic_Db(scorecard_,component_,environment_,'MEASURE');

   END IF;

   IF (dist_logic_ = 'INDEX') THEN

      OPEN total_index_cur_;
         FETCH total_index_cur_ INTO total_index_;
      CLOSE total_index_cur_;

      IF (total_index_ IS NULL) THEN
         Error_SYS.Appl_General(lu_name_,'SCDISVAL : There are no values for indexes :P1',dist_index_);
      END IF;

      total_dist_val_ := 0;
      avarage_index_val_ := 0;
      distribute_index_val_ := 0;

      OPEN get_period;
      LOOP
         FETCH get_period INTO period_index_;
            EXIT WHEN get_period%NOTFOUND;
         count_ := count_+1;
         index_value_   := scorecard_index_api.Get_Value(environment_,period_index_,dist_index_);
         IF (index_value_ IS NULL) THEN
            CLOSE get_period;
            Error_SYS.Appl_General(lu_name_,'SCDISNOINDEXVAL1 : There are no values for index :P1',dist_index_);
         END IF;
         IF (dist_type_ = 'PERCENTAGE') THEN
            avarage_index_val_ := total_index_/period_count_;
            distribute_index_val_ := (index_value_/avarage_index_val_)*year_value_;
         ELSIF (dist_type_ = 'VALUE') THEN
            distribute_index_val_ := (index_value_/total_index_)*year_value_;
         END IF;
         val_arr_(count_) := distribute_index_val_;
         total_dist_val_ := total_dist_val_ + distribute_index_val_;
      END LOOP;
      CLOSE get_period;
   ELSIF (dist_logic_ != 'INDEX') THEN
      IF (dist_ver_ = 'ACT') THEN
          dist_version_ := 'actual_value';
      ELSIF (dist_ver_ = 'TAR') THEN
          dist_version_ := 'target_value';
      ELSIF (dist_ver_ = 'V1') THEN
          dist_version_ := 'v1_value';
      ELSIF (dist_ver_ = 'V2') THEN
          dist_version_ := 'v2_value';
      ELSIF (dist_ver_ = 'V3') THEN
          dist_version_ := 'v3_value';
      ELSIF (dist_ver_ = 'V4') THEN
          dist_version_ := 'v4_value';
      ELSIF (dist_ver_ = 'V5') THEN
          dist_version_ := 'v5_value';
      ELSIF (dist_ver_ = 'V6') THEN
          dist_version_ := 'v6_value';
      ELSIF (dist_ver_ = 'V7') THEN
          dist_version_ := 'v7_value';
      ELSIF (dist_ver_ = 'V8') THEN
          dist_version_ := 'v8_value';
      ELSIF (dist_ver_ = 'V9') THEN
          dist_version_ := 'v9_value';
      ELSIF (dist_ver_ = 'V10') THEN
          dist_version_ := 'v10_value';
      END IF;

      IF( from_where_= 'FROM_COMPONENT') THEN
         temp1_  := 'SELECT period,'|| dist_version_ ||'
                    FROM  scorecard_value11
                    WHERE environment= :p_environment
                    AND   scorecard = :p_scorecard
                    AND   component = :p_component
                    AND   year = :p_year
                    ORDER BY end_date';

         temp2_  := 'SELECT sum('|| dist_version_ ||') '||'
                    FROM  scorecard_value11
                    WHERE environment= :p_environment
                    AND   scorecard  = :p_scorecard
                    AND   component  = :p_component
                    AND   year = :p_year ';
      END IF;

      IF( from_where_= 'FROM_MEASURE') THEN
         temp1_  := 'SELECT period,'|| dist_version_ ||'
                    FROM  scorecard_value11
                    WHERE environment= :p_environment
                    AND   scorecard = :p_scorecard
                    AND   measure = :p_component
                    AND   year = :p_year
                    ORDER BY end_date';

         temp2_  := 'SELECT sum('|| dist_version_ ||') '||'
                    FROM  scorecard_value11
                    WHERE environment= :p_environment
                    AND   scorecard = :p_scorecard
                    AND   measure = :p_component
                    AND   year = :p_year ';
      END IF;

      -- ifs_assert_safe shsalk 20060117
      OPEN total_cur_ FOR temp2_ USING environment_,scorecard_,component_,year_;
         FETCH total_cur_ INTO total_val_;
      CLOSE total_cur_;

      IF (total_val_ IS NULL) THEN
         Error_SYS.Appl_General(lu_name_,'SCDISVAL : There are no values for distribution version :P1',dist_ver_);
      END IF;

      total_dist_val_ := 0;
      avarage_val_ := 0;
      -- ifs_assert_safe shsalk 20060117
      OPEN version_cur_ FOR temp1_ USING environment_,scorecard_,component_,year_;
      LOOP
         FETCH version_cur_ INTO period_,version_val_;
            EXIT WHEN version_cur_%NOTFOUND;
         count_ := count_+1;
         IF (version_val_ IS NULL) THEN
            CLOSE version_cur_;
            Error_SYS.Appl_General(lu_name_,'SCDISNOVAL1 : There are no values for distribution version :P1',dist_ver_);
         ELSE
            IF (dist_logic_ = 'SYB') THEN
               index_value_   := scorecard_index_api.Get_Value(environment_,period_,dist_index_);
               IF (index_value_ IS NULL) THEN
                  CLOSE version_cur_;
                  Error_SYS.Appl_General(lu_name_,'SCDISNOINDEXVAL1 : There are no values for distribution index :P1',dist_index_);
               END IF;
               IF (dist_type_ = 'PERCENTAGE') THEN
                  avarage_val_ := total_val_/period_count_;
                  distribute_val_ := (version_val_/avarage_val_)*year_value_*index_value_;
               ELSIF (dist_type_ = 'VALUE') THEN
                  distribute_val_ := (version_val_/total_val_)*year_value_*index_value_;
               END IF;
            ELSIF (dist_logic_ = 'VERSION') THEN
               IF (dist_type_ = 'PERCENTAGE') THEN
                  avarage_val_ := total_val_/period_count_;
                  distribute_val_ := (version_val_/avarage_val_)*year_value_;
               ELSIF (dist_type_ = 'VALUE') THEN
                  distribute_val_ := (version_val_/total_val_)*year_value_;
               END IF;
            END IF;
         END IF;

         val_arr_(count_) := distribute_val_;
         total_dist_val_ := total_dist_val_ + distribute_val_;
      END LOOP;
      CLOSE version_cur_;
   END IF;


   measure_format_      := TO_NUMBER(Scorecard_Measure_API.Get_Measure_Format(component_));

   final_year_value_    := year_value_ * measure_format_;

   IF (dist_logic_ != 'VERSION') THEN

      IF (dist_type_ = 'PERCENTAGE') THEN
         total_dist_val_ := total_dist_val_/count_;
      END IF;

      IF (year_value_ != total_dist_val_) THEN
         FOR i IN 1..count_ LOOP
            val_arr_(i) := (val_arr_(i)/total_dist_val_)*year_value_ * measure_format_;
         END LOOP;
      END IF;
   END IF;

   IF (count_= 1) THEN
     UPDATE scorecard_input_value_tab
          SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 2) THEN
     UPDATE scorecard_input_value_tab
          SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 3) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 4) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 5) THEN
     UPDATE scorecard_input_value_tab
             SET action = final_year_value_,
                 year_value = year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 6) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 7) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 8) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7),
                 p8_value = val_arr_(8)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 9) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7),
                 p8_value = val_arr_(8),
                 p9_value = val_arr_(9)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 10) THEN
     UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7),
                 p8_value = val_arr_(8),
                 p9_value = val_arr_(9),
                 p10_value = val_arr_(10)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 11) THEN
      UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7),
                 p8_value = val_arr_(8),
                 p9_value = val_arr_(9),
                 p10_value = val_arr_(10),
                 p11_value = val_arr_(11)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
   ELSIF (count_= 12) THEN
      UPDATE scorecard_input_value_tab
             SET action = action_value_,
                 year_value = final_year_value_,
                 p1_value = val_arr_(1),
                 p2_value = val_arr_(2),
                 p3_value = val_arr_(3),
                 p4_value = val_arr_(4),
                 p5_value = val_arr_(5),
                 p6_value = val_arr_(6),
                 p7_value = val_arr_(7),
                 p8_value = val_arr_(8),
                 p9_value = val_arr_(9),
                 p10_value = val_arr_(10),
                 p11_value = val_arr_(11),
                 p12_value = val_arr_(12)
             WHERE
                 environment = environment_
             AND
                 scorecard = scorecard_
             AND
                 year = year_
             AND
                 version = version_
             AND
                 scorecard_object = component_;
      END IF;

END Update_Sales_Values;
PROCEDURE Update_Distributed_Values (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   component_ IN VARCHAR2,
   year_value_ IN NUMBER,
   period_count_ IN NUMBER,
   from_where_ IN VARCHAR2,
   action_value_ IN VARCHAR2 )
IS
   dist_type_               VARCHAR2(30);
   dist_logic_              VARCHAR2(10);
   mean_value_              NUMBER;
   reference_type_          VARCHAR2(10);
   ref_type_                VARCHAR2(10);
   rec_        SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   measure_format_          NUMBER;
   final_year_value_        NUMBER;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Update_Distributed_Values');
   rec_ := Lock_By_Keys___(environment_,scorecard_,year_,version_,component_);

   IF (action_value_ = 'TRUE') THEN

      measure_format_      := TO_NUMBER(Scorecard_Measure_API.Get_Measure_Format(component_));
      IF(from_where_ = 'FROM_COMPONENT') THEN
         reference_type_ := scorecard_structure_api.Get_Planning_Type_Db(scorecard_,component_,environment_,'COMPONENT');
         ref_type_ := NVL(reference_type_,'BASE');
      END IF;

      IF(from_where_ = 'FROM_MEASURE') THEN
         ref_type_ := 'BASE';
      END IF;

      IF NOT(ref_type_ = 'REFERENCE') THEN

         IF (from_where_ = 'FROM_COMPONENT') THEN

         dist_type_ := measure_type_api.Encode(scorecard_Measure_api.Get_Measure_type(component_));
         dist_logic_ := scorecard_Structure_api.Get_Dist_Logic_Db(scorecard_,component_,environment_,'COMPONENT');

         END IF;

         IF (from_where_ = 'FROM_MEASURE') THEN

         dist_type_ := measure_type_api.Encode(scorecard_Measure_api.Get_Measure_type(component_));
         dist_logic_ := scorecard_Structure_api.Get_Dist_Logic_Db(scorecard_,component_,environment_,'MEASURE');

         END IF;

         final_year_value_ := year_value_ * measure_format_;
         IF (year_value_ IS NULL) THEN
            UPDATE scorecard_input_value_tab
                SET year_value = final_year_value_
                WHERE
                    environment = environment_
                AND
                 scorecard = scorecard_
                AND
                 year = year_
                AND
                 version = version_
                AND
                 scorecard_object = component_;
         ELSE
            IF (dist_type_ = 'PERCENTAGE' AND dist_logic_ IS NULL) THEN
               IF (period_count_ = 1) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = final_year_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                    scorecard_object = component_;
               ELSIF (period_count_ = 2) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 3) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 4) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 5) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 6) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 7) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 8) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_,
                       p8_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 9) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_,
                       p8_value = final_year_value_,
                       p9_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 10) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_,
                       p8_value = final_year_value_,
                       p9_value = final_year_value_,
                       p10_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
             ELSIF (period_count_ = 11) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_,
                       p8_value = final_year_value_,
                       p9_value = final_year_value_,
                       p10_value = final_year_value_,
                       p11_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 12) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = final_year_value_,
                       p2_value = final_year_value_,
                       p3_value = final_year_value_,
                       p4_value = final_year_value_,
                       p5_value = final_year_value_,
                       p6_value = final_year_value_,
                       p7_value = final_year_value_,
                       p8_value = final_year_value_,
                       p9_value = final_year_value_,
                       p10_value = final_year_value_,
                       p11_value = final_year_value_,
                       p12_value = final_year_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               END IF;


            ELSIF (dist_type_ = 'VALUE' AND dist_logic_ IS NULL) THEN
               mean_value_ := (year_value_ * measure_format_)/period_count_;
               IF (period_count_ = 1) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 2) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 3) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 4) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 5) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 6) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 7) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 8) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_,
                       p8_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 9) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_,
                       p8_value = mean_value_,
                       p9_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 10) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_,
                       p8_value = mean_value_,
                       p9_value = mean_value_,
                       p10_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 11) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_,
                       p8_value = mean_value_,
                       p9_value = mean_value_,
                       p10_value = mean_value_,
                       p11_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;
               ELSIF (period_count_ = 12) THEN
                   UPDATE scorecard_input_value_tab
                   SET action = action_value_,
                       year_value = final_year_value_,
                       p1_value = mean_value_,
                       p2_value = mean_value_,
                       p3_value = mean_value_,
                       p4_value = mean_value_,
                       p5_value = mean_value_,
                       p6_value = mean_value_,
                       p7_value = mean_value_,
                       p8_value = mean_value_,
                       p9_value = mean_value_,
                       p10_value = mean_value_,
                       p11_value = mean_value_,
                       p12_value = mean_value_
                   WHERE
                       environment = environment_
                   AND
                       scorecard = scorecard_
                   AND
                       year = year_
                   AND
                       version = version_
                   AND
                       scorecard_object = component_;

               END IF;
            ELSIF ((dist_logic_ = 'SYB' OR dist_logic_ = 'VERSION' OR dist_logic_ = 'INDEX') AND (dist_type_ IS NOT NULL)) THEN
               Update_Sales_Values(environment_,scorecard_,year_,version_,component_,year_value_,period_count_,from_where_,action_value_);
            END IF;
         END IF;
      END IF;
   ELSIF (action_value_ = 'FALSE') THEN
      UPDATE scorecard_input_value_tab
      SET action = action_value_
      WHERE
         environment = environment_
      AND
         scorecard = scorecard_
      AND
         year = year_
      AND
         version = version_
      AND
         scorecard_object = component_;
   END IF;
END Update_Distributed_Values;
PROCEDURE Publish_Scorecard (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2 )
IS
   can_modify_  VARCHAR2(5);
BEGIN
     General_SYS.Init_Method(lu_name_, '&PKG', 'Publish_Scorecard');
     can_modify_ := Scorecard_User_Access_Api.Check_Modify_Acc(environment_,scorecard_);
     if can_modify_ = 'TRUE' then
        Publish_Score__(environment_, scorecard_, 'SCORE');
     end if;
END Publish_Scorecard;
PROCEDURE Publish_Environment (
   environment_ IN VARCHAR2 )
IS
   attr_ VARCHAR2(2000);
   info_ VARCHAR2(2000);

   CURSOR get_scorecard IS
     SELECT DISTINCT scorecard, objstate
     FROM   scorecard_input
     WHERE  environment = environment_
     AND   (objstate = 'Open' OR     objstate = 'Planned');

   can_modify_  VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Publish_Environment');
   FOR get_rec in get_scorecard  loop
      IF (get_rec.objstate = 'Open')  THEN
         info_ := Language_SYS.Translate_Constant(lu_name_,'TRANS: The operation "Publish" is not allowed for Scorecard :P1 in state "Open"',Fnd_Session_API.Get_Language,get_rec.scorecard);
         Transaction_SYS.Set_Status_Info(info_);
      ELSE
         can_modify_ := Scorecard_User_Access_Api.Check_Modify_Acc(environment_,get_rec.scorecard);
         if can_modify_ = 'TRUE' then
            Publish_Score__(environment_, get_rec.scorecard, 'ENV');
            Client_SYS.Clear_Attr(attr_);
            Scorecard_Api.Force_Publish__(info_,attr_,'DO',environment_,get_rec.scorecard);
            Client_SYS.Clear_Attr(attr_);
         end if;
      END IF;
   end loop;
END Publish_Environment;


PROCEDURE Calculate_Measures (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   measure_ IN VARCHAR2,
   period_count_ IN NUMBER,
   from_budpro_ IN VARCHAR2 DEFAULT 'FALSE' )
IS
   plan_formula_            VARCHAR2(2000);
   plan_formula_year_       VARCHAR2(2000);
   plan_formula_p1_         VARCHAR2(2000);
   plan_formula_p2_         VARCHAR2(2000);
   plan_formula_p3_         VARCHAR2(2000);
   plan_formula_p4_         VARCHAR2(2000);
   plan_formula_p5_         VARCHAR2(2000);
   plan_formula_p6_         VARCHAR2(2000);
   plan_formula_p7_         VARCHAR2(2000);
   plan_formula_p8_         VARCHAR2(2000);
   plan_formula_p9_         VARCHAR2(2000);
   plan_formula_p10_        VARCHAR2(2000);
   plan_formula_p11_        VARCHAR2(2000);
   plan_formula_p12_        VARCHAR2(2000);
   count_                   NUMBER;
   p1_value_                NUMBER;
   p2_value_                NUMBER;
   p3_value_                NUMBER;
   p4_value_                NUMBER;
   p5_value_                NUMBER;
   p6_value_                NUMBER;
   p7_value_                NUMBER;
   p8_value_                NUMBER;
   p9_value_                NUMBER;
   p10_value_               NUMBER;
   p11_value_               NUMBER;
   p12_value_               NUMBER;
   year_value_              NUMBER;
   level_id_                VARCHAR2(30);

   formula_year_            NUMBER;
   formula_p1_              NUMBER;
   formula_p2_              NUMBER;
   formula_p3_              NUMBER;
   formula_p4_              NUMBER;
   formula_p5_              NUMBER;
   formula_p6_              NUMBER;
   formula_p7_              NUMBER;
   formula_p8_              NUMBER;
   formula_p9_              NUMBER;
   formula_p10_             NUMBER;
   formula_p11_             NUMBER;
   formula_p12_             NUMBER;

   check_year_value_        VARCHAR2(10);
   check_p1_value_          VARCHAR2(10);
   check_p2_value_          VARCHAR2(10);
   check_p3_value_          VARCHAR2(10);
   check_p4_value_          VARCHAR2(10);
   check_p5_value_          VARCHAR2(10);
   check_p6_value_          VARCHAR2(10);
   check_p7_value_          VARCHAR2(10);
   check_p8_value_          VARCHAR2(10);
   check_p9_value_          VARCHAR2(10);
   check_p10_value_          VARCHAR2(10);
   check_p11_value_          VARCHAR2(10);
   check_p12_value_          VARCHAR2(10);
   level_type_val_           VARCHAR2(20);

   stmt_                   VARCHAR2(2000);

   rec_        SCORECARD_INPUT_VALUE_TAB%ROWTYPE;

   CURSOR measure_components_ IS
      SELECT level_id
      FROM scorecard_structure_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND parent_level_type = 'MEASURE'
      AND parent_id = measure_;
   CURSOR version_value_ IS
      SELECT Year_Value,P1_Value,P2_Value,P3_Value,P4_Value,P5_Value,P6_Value,P7_Value,P8_Value,P9_Value,P10_Value,P11_Value,P12_Value
      FROM scorecard_input_value_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND year = year_
      AND version = version_
      AND scorecard_object = level_id_;
   CURSOR measure_value_ IS
      SELECT Year_Value,P1_Value,P2_Value,P3_Value,P4_Value,P5_Value,P6_Value,P7_Value,P8_Value,P9_Value,P10_Value,P11_Value,P12_Value
      FROM scorecard_input_value_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND year = year_
      AND version = version_
      AND scorecard_object = measure_;

   byteOffSet_ Number := 0;

   invalid_comp_ NUMBER;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Calculate_Measures');
   rec_ := Lock_By_Keys___(environment_,scorecard_,year_,version_,measure_);
   level_type_val_ := Scorecard_Level_Type_API.Decode('MEASURE');
   plan_formula_ := scorecard_structure_api.Get_Measure_Calc_Formula(scorecard_,measure_,environment_,level_type_val_);
   check_year_value_  := 'FALSE';
   check_p1_value_    := 'FALSE';
   check_p2_value_    := 'FALSE';
   check_p3_value_    := 'FALSE';
   check_p4_value_    := 'FALSE';
   check_p5_value_    := 'FALSE';
   check_p6_value_    := 'FALSE';
   check_p7_value_    := 'FALSE';
   check_p8_value_    := 'FALSE';
   check_p9_value_    := 'FALSE';
   check_p10_value_   := 'FALSE';
   check_p11_value_   := 'FALSE';
   check_p12_value_   := 'FALSE';

   IF plan_formula_ IS NOT NULL THEN
      plan_formula_ := REPLACE(plan_formula_,' ','');
      plan_formula_ := UPPER(plan_formula_);
      plan_formula_year_ := plan_formula_;
      plan_formula_p1_ := plan_formula_;
      plan_formula_p2_ := plan_formula_;
      plan_formula_p3_ := plan_formula_;
      plan_formula_p4_ := plan_formula_;
      plan_formula_p5_ := plan_formula_;
      plan_formula_p6_ := plan_formula_;
      plan_formula_p7_ := plan_formula_;
      plan_formula_p8_ := plan_formula_;
      plan_formula_p9_ := plan_formula_;
      plan_formula_p10_ := plan_formula_;
      plan_formula_p11_ := plan_formula_;
      plan_formula_p12_ := plan_formula_;
      count_ := 0;
      FOR measure_comp_ IN measure_components_ LOOP
         level_id_ := measure_comp_.level_id;
         byteOffset_ := INSTR(plan_formula_,'COMP.'||level_id_);

         IF byteOffSet_ > 0 THEN
            OPEN version_value_;
            FETCH version_value_ INTO year_value_,p1_value_,p2_value_,p3_value_,p4_value_,p5_value_,p6_value_,p7_value_,p8_value_,p9_value_,p10_value_,p11_value_,p12_value_;
            CLOSE version_value_;
            IF (year_value_ IS NULL) THEN
               check_year_value_  := 'TRUE';
            END IF;
            IF (p1_value_ IS NULL) THEN
               check_p1_value_  := 'TRUE';
            END IF;
            IF (p2_value_ IS NULL) THEN
               check_p2_value_  := 'TRUE';
            END IF;
            IF (p3_value_ IS NULL) THEN
               check_p3_value_  := 'TRUE';
            END IF;
            IF (p4_value_ IS NULL) THEN
               check_p4_value_  := 'TRUE';
            END IF;
            IF (p5_value_ IS NULL) THEN
               check_p5_value_  := 'TRUE';
            END IF;
            IF (p6_value_ IS NULL) THEN
               check_p6_value_  := 'TRUE';
            END IF;
            IF (p7_value_ IS NULL) THEN
               check_p7_value_  := 'TRUE';
            END IF;
            IF (p8_value_ IS NULL) THEN
               check_p8_value_  := 'TRUE';
            END IF;
            IF (p9_value_ IS NULL) THEN
               check_p9_value_  := 'TRUE';
            END IF;
            IF (p10_value_ IS NULL) THEN
               check_p10_value_  := 'TRUE';
            END IF;
            IF (p11_value_ IS NULL) THEN
               check_p11_value_  := 'TRUE';
            END IF;
            IF (p12_value_ IS NULL) THEN
               check_p12_value_  := 'TRUE';
            END IF;

            plan_formula_year_ := REPLACE(plan_formula_year_,'COMP.'||level_id_,year_value_);
            plan_formula_p1_   := REPLACE(plan_formula_p1_,'COMP.'||level_id_,p1_value_);
            plan_formula_p2_   := REPLACE(plan_formula_p2_,'COMP.'||level_id_,p2_value_);
            plan_formula_p3_   := REPLACE(plan_formula_p3_,'COMP.'||level_id_,p3_value_);
            plan_formula_p4_   := REPLACE(plan_formula_p4_,'COMP.'||level_id_,p4_value_);
            plan_formula_p5_   := REPLACE(plan_formula_p5_,'COMP.'||level_id_,p5_value_);
            plan_formula_p6_   := REPLACE(plan_formula_p6_,'COMP.'||level_id_,p6_value_);
            plan_formula_p7_   := REPLACE(plan_formula_p7_,'COMP.'||level_id_,p7_value_);
            plan_formula_p8_   := REPLACE(plan_formula_p8_,'COMP.'||level_id_,p8_value_);
            plan_formula_p9_   := REPLACE(plan_formula_p9_,'COMP.'||level_id_,p9_value_);
            plan_formula_p10_  := REPLACE(plan_formula_p10_,'COMP.'||level_id_,p10_value_);
            plan_formula_p11_  := REPLACE(plan_formula_p11_,'COMP.'||level_id_,p11_value_);
            plan_formula_p12_  := REPLACE(plan_formula_p12_,'COMP.'||level_id_,p12_value_);
         END IF;
      END LOOP;

      Get_Error_Msg_For_Comp(plan_formula_year_,check_year_value_);
      Get_Error_Msg_For_Comp(plan_formula_p1_,check_p1_value_);
      Get_Error_Msg_For_Comp(plan_formula_p2_,check_p2_value_);
      Get_Error_Msg_For_Comp(plan_formula_p3_,check_p3_value_);
      Get_Error_Msg_For_Comp(plan_formula_p4_,check_p4_value_);
      Get_Error_Msg_For_Comp(plan_formula_p5_,check_p5_value_);
      Get_Error_Msg_For_Comp(plan_formula_p6_,check_p6_value_);
      Get_Error_Msg_For_Comp(plan_formula_p7_,check_p7_value_);
      Get_Error_Msg_For_Comp(plan_formula_p8_,check_p8_value_);
      Get_Error_Msg_For_Comp(plan_formula_p9_,check_p9_value_);
      Get_Error_Msg_For_Comp(plan_formula_p10_,check_p10_value_);
      Get_Error_Msg_For_Comp(plan_formula_p11_,check_p11_value_);
      Get_Error_Msg_For_Comp(plan_formula_p12_,check_p12_value_);

      IF (period_count_ = 1) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||' from dual'
         INTO
         formula_year_,formula_p1_;

         formula_p2_ := NULL;
         formula_p3_ := NULL;
         formula_p4_ := NULL;
         formula_p5_ := NULL;
         formula_p6_ := NULL;
         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 2) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_;

         formula_p3_ := NULL;
         formula_p4_ := NULL;
         formula_p5_ := NULL;
         formula_p6_ := NULL;
         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 3) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_;

         formula_p4_ := NULL;
         formula_p5_ := NULL;
         formula_p6_ := NULL;
         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 4) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_;

         formula_p5_ := NULL;
         formula_p6_ := NULL;
         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 5) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_;

         formula_p6_ := NULL;
         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 6) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_;

         formula_p7_ := NULL;
         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 7) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_;

         formula_p8_ := NULL;
         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 8) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||','||plan_formula_p8_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_,
         formula_p8_;

         formula_p9_ := NULL;
         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 9) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||','||plan_formula_p8_||','||plan_formula_p9_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_,
         formula_p8_,formula_p9_;

         formula_p10_ := NULL;
         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 10) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||','||plan_formula_p8_||','||plan_formula_p9_||','||plan_formula_p10_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_,
         formula_p8_,formula_p9_,formula_p10_;

         formula_p11_ := NULL;
         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 11) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||','||plan_formula_p8_||','||plan_formula_p9_||','||plan_formula_p10_||','
         ||plan_formula_p11_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_,
         formula_p8_,formula_p9_,formula_p10_,formula_p11_;

         formula_p12_ := NULL;
      END IF;
      IF (period_count_ = 12) THEN
         -- ifs_assert_safe samwlk 070515
         EXECUTE IMMEDIATE 'select '||plan_formula_year_||','||plan_formula_p1_||','||plan_formula_p2_||','
         ||plan_formula_p3_||','||plan_formula_p4_||','||plan_formula_p5_||','||plan_formula_p6_||','
         ||plan_formula_p7_||','||plan_formula_p8_||','||plan_formula_p9_||','||plan_formula_p10_||','
         ||plan_formula_p11_||','||plan_formula_p12_||' from dual'
         INTO
         formula_year_,formula_p1_,formula_p2_,formula_p3_,formula_p4_,formula_p5_,formula_p6_,formula_p7_,
         formula_p8_,formula_p9_,formula_p10_,formula_p11_,formula_p12_;
      END IF;
      UPDATE scorecard_input_value_tab
         SET
            year_value = formula_year_,
            p1_value = formula_p1_,
            p2_value = formula_p2_,
            p3_value = formula_p3_,
            p4_value = formula_p4_,
            p5_value = formula_p5_,
            p6_value = formula_p6_,
            p7_value = formula_p7_,
            p8_value = formula_p8_,
            p9_value = formula_p9_,
            p10_value = formula_p10_,
            p11_value = formula_p11_,
            p12_value = formula_p12_
         WHERE
            environment = environment_ AND
            scorecard = scorecard_     AND
            year = year_               AND
            version = version_         AND
            scorecard_object = measure_;
      -- Bug 76573 Begin. Set the measure to planned state
      Set_To_Planned(environment_, scorecard_, year_, version_, measure_);
      -- Bug 76573 End
      
   ELSE
       Error_SYS.Appl_General(lu_name_,'ERRPLANFOR : No Calculation formula is connected to the measure :P1 in Scorecard :P2',Scorecard_Measure_API.Get_Description(measure_),Scorecard_API.Get_Description(scorecard_,environment_));
   END IF;

END Calculate_Measures;
PROCEDURE Update_Referred_Component (
   check_reference_ IN OUT VARCHAR2,
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 )
IS
   rec_        SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   CURSOR value_cur IS
      SELECT year_value,p1_value,p2_value,p3_value,p4_value,p5_value,p6_value,p7_value,p8_value,p9_value,p10_value,
      p11_value,p12_value
      FROM scorecard_input_value_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND year = year_
      AND version = version_
      AND scorecard_object = scorecard_object_;
   CURSOR component_cur IS
      SELECT level_id
      FROM scorecard_structure_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND planning_type = 'REFERENCE'
      AND planning_reference = scorecard_object_
      AND child_level_type = 'COMPONENT';
      measure_format_        NUMBER;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Update_Referred_Component');
   FOR component_cur_ IN component_cur LOOP
      check_reference_ := 'TRUE';
      rec_ := Lock_By_Keys___(environment_,scorecard_,year_,version_,component_cur_.level_id);
      FOR value_cur_ IN value_cur LOOP
         measure_format_      := TO_NUMBER(Scorecard_Measure_API.Get_Measure_Format(component_cur_.level_id));
         UPDATE scorecard_input_value_tab
         SET year_value = value_cur_.year_value * measure_format_,
             p1_value = value_cur_.p1_value     * measure_format_,
             p2_value = value_cur_.p2_value     * measure_format_,
             p3_value = value_cur_.p3_value     * measure_format_,
             p4_value = value_cur_.p4_value     * measure_format_,
             p5_value = value_cur_.p5_value     * measure_format_,
             p6_value = value_cur_.p6_value     * measure_format_,
             p7_value = value_cur_.p7_value     * measure_format_,
             p8_value = value_cur_.p8_value     * measure_format_,
             p9_value = value_cur_.p9_value     * measure_format_,
             p10_value = value_cur_.p10_value   * measure_format_,
             p11_value = value_cur_.p11_value   * measure_format_,
             p12_value = value_cur_.p12_value   * measure_format_         
         WHERE
             environment = environment_ AND
             scorecard = scorecard_     AND
             year = year_               AND
             version = version_         AND
             scorecard_object = component_cur_.level_id;
       END LOOP;
       Set_To_Planned(environment_,scorecard_,year_,version_,component_cur_.level_id);
   END LOOP;
END Update_Referred_Component;
PROCEDURE Delete_By_Passed_Value (
   key_value_ IN VARCHAR2,
   year_ IN VARCHAR2 )
IS
   dummy_ SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   info_  VARCHAR2(2000);
   --objversion_ VARCHAR2(2000);
   CURSOR Get_rows IS
      SELECT objid,objversion FROM scorecard_input_value
      WHERE environment=key_value_
      AND   year=year_ ;
BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API', 'Delete_By_Passed_Value');
   FOR get_rec in Get_rows  loop
     --  Delete___(get_rec.objid,get_rec);
       Remove__ (info_ ,get_rec.objid ,get_rec.objversion,'DO' );
   end loop;
END Delete_By_Passed_Value;
PROCEDURE Delete_Version_Passed (
   environment_ IN VARCHAR2,
   version_ IN VARCHAR2 )
IS
   info_  VARCHAR2(2000);
   CURSOR Get_rows IS
      SELECT objid,objversion FROM scorecard_input_value
      WHERE  environment=environment_
      AND    version=version_ ;

BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API', 'Delete_Version_passed');
   FOR get_rec in Get_rows  loop
       Remove__ (info_ ,get_rec.objid ,get_rec.objversion,'DO' );
   end loop;
END Delete_Version_Passed;
PROCEDURE Delete_Scorecard_Passed (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2 )
IS

   info_  VARCHAR2(2000);
   CURSOR Get_rows IS
      SELECT objid,objversion FROM scorecard_input_value
      WHERE  environment=environment_
      AND    scorecard=scorecard_ ;
BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API', 'Delete_Scorecard_passed');
   FOR get_rec in Get_rows  loop
       Remove__ (info_ ,get_rec.objid ,get_rec.objversion,'DO' );
   end loop;
END Delete_Scorecard_Passed;
PROCEDURE Insert_Data (
   env_ IN VARCHAR2,
   scr_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   obj_ IN VARCHAR2,
   type_ IN VARCHAR2,
   p1_ IN VARCHAR2,
   p2_ IN VARCHAR2,
   p3_ IN VARCHAR2,
   p4_ IN VARCHAR2,
   p5_ IN VARCHAR2,
   p6_ IN VARCHAR2,
   p7_ IN VARCHAR2,
   p8_ IN VARCHAR2,
   p9_ IN VARCHAR2,
   p10_ IN VARCHAR2,
   p11_ IN VARCHAR2,
   p12_ IN VARCHAR2 )
IS
    newrec_ SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
    objid_ VARCHAR2(2000);
    objversion_ VARCHAR2(2000);
    attr_  VARCHAR2(2000);

BEGIN
    General_SYS.Init_Method(lu_name_, '&PKG', 'Insert_Data');
    newrec_.environment := env_;
    newrec_.scorecard := scr_;
    newrec_.year := year_;
    newrec_.version := version_ ;
    newrec_.scorecard_object := obj_;
    newrec_.object_type := type_;
    newrec_.p1_key := p1_;
    newrec_.p2_key := p2_;
    newrec_.p3_key := p3_;
    newrec_.p4_key := p4_;
    newrec_.p5_key := p5_;
    newrec_.p6_key := p6_;
    newrec_.p7_key := p7_;
    newrec_.p8_key := p8_;
    newrec_.p9_key := p9_;
    newrec_.p10_key :=p10_;
    newrec_.p11_key :=p11_;
    newrec_.p12_key :=p12_;
    newrec_.p12_key :=p12_;
    newrec_.action :='TRUE';

    Insert___(objid_, objversion_, newrec_, attr_);
END Insert_Data;
PROCEDURE Modify_Data (
   p1_ IN VARCHAR2,
   p2_ IN VARCHAR2,
   p3_ IN VARCHAR2,
   p4_ IN VARCHAR2,
   p5_ IN VARCHAR2,
   p6_ IN VARCHAR2,
   p7_ IN VARCHAR2,
   p8_ IN VARCHAR2,
   p9_ IN VARCHAR2,
   p10_ IN VARCHAR2,
   p11_ IN VARCHAR2,
   p12_ IN VARCHAR2,
   env_ IN VARCHAR2,
   scr_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   level_ IN VARCHAR2 )
IS
   objid_ VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   info_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify_Data');
   Get_Id_Version_By_Keys___(objid_,objversion_,env_ ,scr_,year_,version_,level_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('P1_KEY', p1_, attr_);
   Client_SYS.Add_To_Attr('P2_KEY', p2_, attr_);
   Client_SYS.Add_To_Attr('P3_KEY', p3_, attr_);
   Client_SYS.Add_To_Attr('P4_KEY', p4_, attr_);
   Client_SYS.Add_To_Attr('P5_KEY', p5_, attr_);
   Client_SYS.Add_To_Attr('P6_KEY', p6_, attr_);
   Client_SYS.Add_To_Attr('P7_KEY', p7_, attr_);
   Client_SYS.Add_To_Attr('P8_KEY', p8_, attr_);
   Client_SYS.Add_To_Attr('P9_KEY', p9_, attr_);
   Client_SYS.Add_To_Attr('P10_KEY', p10_, attr_);
   Client_SYS.Add_To_Attr('P11_KEY', p11_, attr_);
   Client_SYS.Add_To_Attr('P12_KEY', p12_, attr_);
   Client_SYS.Add_To_Attr('ACTION', 'TRUE',attr_);
   Modify__(info_,objid_,objversion_,attr_,'DO');


END Modify_Data;
PROCEDURE Delete_Data (
   env_ IN VARCHAR2,
   scr_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   level_ IN VARCHAR2 )
IS

   objid_ VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   info_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Delete_Data');
   Get_Id_Version_By_Keys___(objid_,objversion_,env_ ,scr_,year_,version_,level_);
   Remove__ (info_ ,objid_,objversion_,'DO' );
END Delete_Data;
PROCEDURE Scorecard_Inputs_By_Batch (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   years_ IN VARCHAR2,
   version_ IN VARCHAR2,
   execution_ IN VARCHAR2 )
IS
   job_id_     NUMBER;
   method_     VARCHAR2(32000);
   attr_       VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API','Scorecard_Inputs_By_Batch');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ENVIRONMENT',environment_,attr_);
   Client_SYS.Add_To_Attr('SCORECARD',scorecard_ ,attr_);
   Client_SYS.Add_To_Attr('YEAR',years_,attr_);
   Client_SYS.Add_To_Attr('VERSION',version_,attr_);
   method_ := 'Scorecard_Input_Value_API.Start_Inputing_Scorecards('''''||attr_||''''')';
   IF (execution_ != 'NOW') THEN
      Batch_SYS.New_Job(job_id_,method_,execution_);
   ELSE
      Input_Scorecard_Data (attr_);
   END IF;
END Scorecard_Inputs_By_Batch;
PROCEDURE Input_Scorecard_Data (
   attr_ IN VARCHAR2 )
IS

   TYPE RefCurTyp IS REF CURSOR;
   rcScr      RefCurTyp;
   rcYear     RefCurTyp;
   rcVer      RefCurTyp;
   ssql_      varchar2(32000);
   ssql2_     varchar2(32000);
   ssql3_     varchar2(32000);
   tempscr_   varchar2(20);
   tempver_   varchar2(20);
   tempyear_  varchar2(20);
   env        VARCHAR2(10);
   scorecard_ VARCHAR2(32000);
   years_     VARCHAR2(2000);
   version_   VARCHAR2(2000);
   period1_   VARCHAR2(10);
   period2_   VARCHAR2(10);
   period3_   VARCHAR2(10);
   period4_   VARCHAR2(10);
   period5_   VARCHAR2(10);
   period6_   VARCHAR2(10);
   period7_   VARCHAR2(10);
   period8_   VARCHAR2(10);
   period9_   VARCHAR2(10);
   period10_  VARCHAR2(10);
   period11_  VARCHAR2(10);
   period12_  VARCHAR2(10);
   ExistEnv   VARCHAR2(10);
   dummy2_    VARCHAR2(10);
   dummy_               NUMBER;
   scr_exist            NUMBER;
   mea_exist            NUMBER;
   mea_ver_exist        NUMBER;
   mea_year_exist       NUMBER;
   mea_year_conn_exist  NUMBER;
   comp_exist           NUMBER;
   comp_ver_exist       NUMBER;
   comp_year_exist      NUMBER;
   comp_year_conn_exist NUMBER;
   del_mea_rec          NUMBER;
   del_comp_rec         NUMBER;
   insert_mea_rec       NUMBER;
   insert_comp_rec      NUMBER;
   rec_exists           NUMBER;
   rec_exists2          NUMBER;
   rec_not_exist        NUMBER;
   rec_not_exist2       NUMBER;
   rec_exists_del       NUMBER;
   rec_exists_del2      NUMBER;

   CURSOR get_year_conn(env_ varchar2, year_ varchar2) IS
      SELECT year
      FROM scorecard_period_tab
      WHERE environment = env_
      AND year = year_;

   CURSOR get_mea(env_ varchar2, scr_ varchar2) IS
      SELECT level_id
      FROM scorecard_structure_tab
      WHERE environment = env_
      AND scorecard = scr_
      AND child_level_type = 'MEASURE';

   CURSOR get_comp(env_ varchar2, scr_ varchar2, mea_ varchar2) IS
      SELECT level_id
      FROM scorecard_structure_tab
      WHERE environment = env_
      AND scorecard = scr_
      AND child_level_type = 'COMPONENT'
      AND parent_id = mea_;

   CURSOR chk_exist(env_ varchar2, scr_ varchar2, year_ varchar2, ver_ varchar2, scr_obj_ varchar2) IS
      SELECT 1
      FROM scorecard_input_value_tab
      WHERE environment = env_
      AND scorecard = scr_
      AND year = year_
      AND version = ver_
      AND scorecard_object = scr_obj_;
BEGIN
     General_SYS.Init_Method(lu_name_, '&PKG', 'Input_Scorecard_Data');
     env:=Client_SYS.Get_Item_Value('ENVIRONMENT',attr_);
     scorecard_:= Client_SYS.Get_Item_Value('SCORECARD',attr_);
     version_  := Client_SYS.Get_Item_Value('VERSION',attr_);
     years_    := Client_SYS.Get_Item_Value('YEAR',attr_);
     scorecard_:= Replace(scorecard_,'^','''');
     version_  := Replace(version_,'^','''');
     years_    := Replace(years_,'^','''');
     scr_exist := 0;
     mea_exist := 0;
     mea_ver_exist        := 0;
     mea_year_exist       := 0;
     mea_year_conn_exist  := 0;
     comp_exist           := 0;
     comp_ver_exist       := 0;
     comp_year_exist      := 0;
     comp_year_conn_exist := 0;
     del_mea_rec     := 0;
     del_comp_rec    := 0;
     insert_mea_rec  := 0;
     insert_comp_rec := 0;
     rec_exists      := 0;
     rec_exists2     := 0;
     rec_not_exist   := 0;
     rec_not_exist2  := 0;
     rec_exists_del  := 0;
     rec_exists_del2 := 0;

     IF scorecard_ IS null then
         ssql_:='SELECT scorecard FROM scorecard_tab WHERE environment='|| '''' || env || '''' || ' AND (rowstate = '||'''Open''' || ' OR  rowstate = '||'''Published'''||')';
     else
         ssql_ := 'SELECT scorecard FROM scorecard_tab WHERE environment='|| '''' || env || '''' || ' AND SCORECARD IN (' ||  scorecard_ || ')' ;
     end if;

     if version_ IS null then
         ssql2_:= 'SELECT version FROM measure_version_tab WHERE environment ='|| '''' || env || '''' || 'AND USE_VERSIONS = ' || '''TRUE''' || ' AND (VERSION NOT IN (' || '''ASS'''||','||'''IND'''||','||'''TRN'''||')) AND rowstate='|| '''Open''';
     else
         ssql2_:= 'SELECT version FROM measure_version_tab WHERE environment ='|| '''' || env || '''' || ' AND VERSION IN (' ||  version_ || ')' ;
     end if;

     if years_ IS null then
         ssql3_:= 'SELECT year FROM environment_year_tab WHERE environment ='|| '''' || env || '''' ||' AND rowstate= '||'''Open''';
     else
         ssql3_:= 'SELECT year FROM environment_year_tab WHERE environment ='|| '''' || env || '''' || ' AND YEAR IN (' ||  years_ || ')' ;
     end if;

     -- ifs_assert_safe shsalk 20060117
     open rcScr for ssql_;

     LOOP
         FETCH rcScr INTO tempscr_;
         EXIT WHEN rcScr%NOTFOUND;
         scr_exist := 1;

         FOR meaNo IN get_mea(env, tempscr_) LOOP
           -- ifs_assert_safe shsalk 20060117
           open rcVer for ssql2_;
           LOOP
              FETCH rcVer INTO tempver_;
              EXIT WHEN rcVer%NOTFOUND;
              -- ifs_assert_safe shsalk 20060117
              open rcYear for ssql3_;
              LOOP
                FETCH rcYear INTO tempyear_;
                EXIT WHEN rcYear%NOTFOUND;
                  Return_Periods(period1_,period2_,period3_,period4_,period5_,period6_,period7_,
                                 period8_,period9_,period10_,period11_,period12_,env, tempyear_);

                  IF (tempver_ != 'ASS') THEN

                     OPEN get_year_conn(env, tempyear_);
                     FETCH get_year_conn INTO dummy2_;
                     IF (get_year_conn%FOUND) THEN
                        rec_not_exist := 1;
                     ELSE
                        rec_not_exist := 0;
                     END IF;
                     CLOSE get_year_conn;

                     IF (rec_not_exist = 1) THEN
                        mea_year_conn_exist := 1;

                        OPEN chk_exist(env, tempscr_, tempyear_, tempver_, meaNo.level_id);
                        FETCH chk_exist INTO dummy_;
                        IF (chk_exist%FOUND) THEN
                           rec_exists := 1;
                        ELSE
                           rec_exists := 0;
                        END IF;
                        CLOSE chk_exist;

                        IF (rec_exists = 1) THEN
                            Modify_Data(period1_,period2_,period3_,period4_,period5_,period6_,
                                        period7_,period8_,period9_,period10_,period11_,period12_,
                                        env,tempscr_,tempyear_,tempver_,meaNo.level_id);
                        ELSE
                           Insert_Data(env,tempscr_,tempyear_,tempver_,meaNo.level_id,'MEASURE',
                                       period1_,period2_,period3_,period4_,period5_,period6_,
                                       period7_,period8_,period9_,period10_,period11_,period12_);
                        END IF;
                        Environment_Year_Api.Force_Open(env,tempyear_);
                        Scorecard_Api.Force_Open(env,tempscr_);
                        Measure_Version_Api.Force_Open(env,tempver_);
                        insert_mea_rec := 1;

                     ELSE

                        OPEN chk_exist(env, tempscr_, tempyear_, tempver_, meaNo.level_id);
                        FETCH chk_exist INTO dummy_;
                        IF (chk_exist%FOUND) THEN
                           rec_exists_del := 1;
                        ELSE
                           rec_exists_del:= 0;
                        END IF;
                        CLOSE chk_exist;

                        IF (rec_exists_del = 1) THEN
                           Delete_Data(env,tempscr_,tempyear_,tempver_,meaNo.level_id);
                           del_mea_rec := 1;
                        END IF;
                     END IF;

                  END IF;

               END LOOP;
               close rcYear;
            END LOOP;
             close rcVer;
           END LOOP;

         FOR meaNo IN get_mea(env, tempscr_) LOOP
            FOR compNo IN get_comp(env, tempscr_, meaNo.level_id) LOOP
               comp_exist := 1;
               -- ifs_assert_safe shsalk 20060117
               open rcVer for ssql2_;
               LOOP
                  FETCH rcVer INTO tempver_;
                  EXIT WHEN rcVer%NOTFOUND;
                  comp_ver_exist := 1;
                  -- ifs_assert_safe shsalk 20060117
                  open rcYear for ssql3_;
                  LOOP
                    FETCH rcYear INTO tempyear_;
                    EXIT WHEN rcYear%NOTFOUND;
                     comp_year_exist := 1;

                     Return_Periods(period1_,period2_,period3_,period4_,period5_,period6_,period7_,
                                    period8_,period9_,period10_,period11_,period12_,env, tempyear_);

                     IF (tempver_ != 'ASS') THEN

                        OPEN get_year_conn(env, tempyear_);
                        FETCH get_year_conn INTO dummy2_;
                        IF (get_year_conn%FOUND) THEN
                           rec_not_exist2 := 1;
                        ELSE
                           rec_not_exist2 := 0;
                        END IF;
                        CLOSE get_year_conn;

                        IF (rec_not_exist2 = 1) THEN
                           comp_year_conn_exist := 1;

                           OPEN chk_exist(env, tempscr_, tempyear_, tempver_, compNo.level_id);
                           FETCH chk_exist INTO dummy_;
                           IF (chk_exist%FOUND) THEN
                              rec_exists2 := 1;
                           ELSE
                              rec_exists2 := 0;
                           END IF;
                           CLOSE chk_exist;

                           IF (rec_exists2 = 1) THEN
                              Modify_Data(period1_,period2_,period3_,period4_,period5_,period6_,
                                          period7_,period8_,period9_,period10_,period11_,period12_,
                                          env,tempscr_,tempyear_,tempver_,compNo.level_id);
                           ELSE
                              Insert_Data(env,tempscr_,tempyear_,tempver_,compNo.level_id,'COMPONENT',
                                          period1_,period2_,period3_,period4_,period5_,period6_,
                                          period7_,period8_,period9_,period10_,period11_,period12_);
                           END IF;
                           Environment_Year_Api.Force_Open(env,tempyear_);
                           Scorecard_Api.Force_Open(env,tempscr_);
                           Measure_Version_Api.Force_Open(env,tempver_);
                           insert_comp_rec := 1;

                        ELSE

                           OPEN chk_exist(env, tempscr_, tempyear_, tempver_, compNo.level_id);
                           FETCH chk_exist INTO dummy_;
                           IF (chk_exist%FOUND) THEN
                              rec_exists_del2 := 1;
                           ELSE
                              rec_exists_del2 := 0;
                           END IF;
                           CLOSE chk_exist;

                           IF (rec_exists_del2 = 1) THEN
                              Delete_Data(env,tempscr_,tempyear_,tempver_, compNo.level_id);
                              del_comp_rec := 1;
                           END IF;
                        END IF;

                     END IF;
                  END LOOP;
                  close rcYear;
               END LOOP;
                close rcVer;

            END LOOP;
         END LOOP;

      END LOOP;
      close rcScr;

END Input_Scorecard_Data;

PROCEDURE Start_Inputing_Scorecards (
   attr_ IN VARCHAR2 )
IS
   new_attr_ VARCHAR2(32000) := attr_;
   desc_     VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Start_Inputing_Scorecards');
   desc_ := Language_SYS.Translate_Constant (lu_name_, 'BGJOB_INPUTSSC:Update Scorecard Input Value Table.');
   Transaction_SYS.Deferred_Call ('Scorecard_Input_Value_API.Input_Scorecard_Data',new_attr_, desc_);
END Start_Inputing_Scorecards;
PROCEDURE Hierachical_Distribution (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_count_ IN NUMBER,
   measure_ IN VARCHAR2 DEFAULT NULL )
IS
   CURSOR get_scorecard_objects IS
   SELECT scorecard_object
   FROM scorecard_input_value_tab
   WHERE scorecard=scorecard_
   AND environment=environment_
   AND object_type=object_type_
   AND year=year_
   AND version=version_
   AND action='TRUE';

   CURSOR get_components(scorecard_id_  VARCHAR2) IS       -- Move to scorecard structure
   SELECT level_id
   FROM scorecard_structure
   WHERE parent_id=measure_
   AND parent_level_type_db='MEASURE'
   AND scorecard=scorecard_id_
   AND environment=environment_;

   CURSOR get_child_scorecards IS         -- Move to scorecard
   SELECT scorecard
   FROM scorecard
   WHERE parent=scorecard_
   AND environment=environment_;

   CURSOR check_component_selected (component_  VARCHAR2)IS
   SELECT 1
   FROM scorecard_input_value_tab
   WHERE action='TRUE'
   AND object_type='COMPONENT'
   AND year=year_
   AND version=version_
   AND environment=environment_
   AND scorecard=scorecard_
   AND scorecard_object=component_;

   TYPE component_arr_type           IS TABLE OF VARCHAR2(10)
                                     INDEX BY BINARY_INTEGER;
   component_arr_                    component_arr_type;
   index_                            NUMBER;
   parent_component_count_           NUMBER;
   child_component_count_            NUMBER;
   component_exist_                  BOOLEAN;
   sel_component_arr_                component_arr_type;
   sel_index_                        NUMBER;
   temp_                             NUMBER;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Hierachical_Distribution');
   IF object_type_ = 'COMPONENT' THEN
      -- Get measure components in parent
      index_:=0;
      sel_index_:=0;
      FOR components_ IN get_components(scorecard_) LOOP
         index_:=index_+1;
         component_arr_(index_):=components_.level_id;
         OPEN check_component_selected (components_.level_id);
         FETCH check_component_selected INTO temp_;
         IF check_component_selected%FOUND THEN
            sel_index_:=sel_index_+1;
            sel_component_arr_(sel_index_):=components_.level_id;
         END IF;
         CLOSE check_component_selected;
      END LOOP;

      IF index_>0 THEN
         parent_component_count_:=index_;
         FOR child_scorecards_ IN get_child_scorecards LOOP
            child_component_count_:=0;
            FOR components_ IN get_components(child_scorecards_.scorecard) LOOP
               component_exist_:=FALSE;
               FOR index_ IN 1 .. parent_component_count_ LOOP
                  IF component_arr_(index_)=components_.level_id THEN
                     component_exist_:=TRUE;
                     EXIT;
                  END IF;
               END LOOP;
               IF NOT component_exist_ THEN
                  Error_SYS.Appl_General(lu_name_,'SAMESTRUCT1: Child scorecard :P1 does not contain component :P2 .',child_scorecards_.scorecard,components_.level_id);
               END IF;
               child_component_count_:=child_component_count_+1;
            END LOOP;
            IF child_component_count_!=parent_component_count_ THEN
               Error_SYS.Appl_General(lu_name_,'SAMESTRUCT2: Child scorecard :P1 does not contain the same structure as parent.',child_scorecards_.scorecard);
            END IF;
         END LOOP;
      ELSE
         Error_SYS.Appl_General(lu_name_,'NOCOMPSEL1: Selected scorecard does not contain any components.');
      END IF;

      IF sel_index_>0 THEN
         FOR index_ IN 1..sel_index_ LOOP
            Distribute_Input_Values___(environment_,scorecard_,year_,version_,object_type_,period_count_,sel_component_arr_(index_));
         END LOOP;
      ELSE
         Error_SYS.Appl_General(lu_name_,'NOCOMPSEL2: No components are selected for hierachical distribution.');
      END IF;
      FOR child_scorecards_ IN get_child_scorecards LOOP
         Calculate_Measures (environment_,child_scorecards_.scorecard ,year_,version_,measure_,period_count_);
         -- Bug 76573 Removed the call to Set_To_Planned() since it is called inside Calculate_Measures() method
      END LOOP;
   ELSE
      FOR scorecard_objects_ IN get_scorecard_objects LOOP   -- fetch the measures that are selected in planning page
         Distribute_Input_Values___(environment_,scorecard_,year_,version_,object_type_,period_count_,scorecard_objects_.scorecard_object);
      END LOOP;
   END IF;

END Hierachical_Distribution;

PROCEDURE Publish_Environment_Batch (
   environment_ IN VARCHAR2,
   schedule_ IN VARCHAR2 )
IS
   job_id_     NUMBER;
   method_     VARCHAR2(2000);
   attr_       VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API','Publish_Environment_Batch');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ENVIRONMENT',environment_,attr_);
   --Start_Publish_Environments___(attr_);
   method_ := 'Scorecard_Input_Value_API.Start_Publish_Environments__('''''||attr_||''''')';
   IF (schedule_ != 'NOW') THEN
      Batch_SYS.New_Job(job_id_,method_,schedule_);
   ELSE
      Start_Publish_Environments__(attr_);
   END IF;
END Publish_Environment_Batch;
PROCEDURE Set_Publish_Scorecards (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2 )
IS
   rec_    SCORECARD%ROWTYPE;
   rec2_   SCORECARD_TAB%ROWTYPE;
   attr_   VARCHAR2(2000);
   info_   VARCHAR2(32000);
   objver_ VARCHAR2(2000);

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Set_Publish_Scorecards');
   Publish_Scorecard(environment_,scorecard_);
   Client_SYS.Clear_Attr(attr_);
   Scorecard_Api.Force_Publish__(info_,attr_,'DO',environment_,scorecard_);
   Client_SYS.Clear_Attr(attr_);
END Set_Publish_Scorecards;
PROCEDURE Publish_Scorecard_Batch (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   schedule_ IN VARCHAR2 )
IS
   job_id_     NUMBER;
   method_     VARCHAR2(2000);
   attr_       VARCHAR2(32000);

BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API','Publish_Scorecard_Batch');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ENVIRONMENT',environment_,attr_);
   Client_SYS.Add_To_Attr('SCORECARD',scorecard_,attr_);
   --Start_Publish_Environments___(attr_);
   method_ := 'Scorecard_Input_Value_API.Start_Publish_Scorecards__('''''||attr_||''''')';
   IF (schedule_ != 'NOW') THEN
      Batch_SYS.New_Job(job_id_,method_,schedule_);
   ELSE
      Start_Publish_Scorecards__(attr_);
   END IF;

END Publish_Scorecard_Batch;
PROCEDURE Hierarchical_Consolidation (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_count_ IN NUMBER,
   measure_ IN VARCHAR2 )
IS
   CURSOR get_scorecard_objects IS
   SELECT scorecard_object
   FROM scorecard_input_value_tab
   WHERE scorecard=scorecard_
   AND environment=environment_
   AND object_type=object_type_
   AND year=year_
   AND version=version_
   AND action='TRUE';

   CURSOR get_components(scorecard_id_  VARCHAR2) IS       -- Move to scorecard structure
   SELECT level_id
   FROM scorecard_structure
   WHERE parent_id=measure_
   AND parent_level_type_db='MEASURE'
   AND scorecard=scorecard_id_
   AND environment=environment_;

   CURSOR get_child_scorecards IS         -- Move to scorecard
   SELECT scorecard
   FROM scorecard
   WHERE parent=scorecard_
   AND environment=environment_;

   CURSOR check_child_scorecards IS        --- Move to scorecard
   SELECT 1
   FROM scorecard
   WHERE parent=scorecard_
   AND environment=environment_;

   CURSOR check_component_selected (component_  VARCHAR2)IS
   SELECT 1
   FROM scorecard_input_value_tab
   WHERE action='TRUE'
   AND object_type='COMPONENT'
   AND year=year_
   AND version=version_
   AND environment=environment_
   AND scorecard=scorecard_
   AND scorecard_object=component_;

   TYPE component_arr_type           IS TABLE OF VARCHAR2(10)
                                     INDEX BY BINARY_INTEGER;
   component_arr_                    component_arr_type;
   index_                            NUMBER;
   parent_component_count_           NUMBER;
   child_component_count_            NUMBER;
   component_exist_                  BOOLEAN;
   sel_component_arr_                component_arr_type;
   sel_index_                        NUMBER;
   temp_                             NUMBER;
   check_child_                      NUMBER;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Hierarchical_Consolidation');
   OPEN check_child_scorecards;
      FETCH check_child_scorecards INTO check_child_;
      IF (check_child_scorecards%NOTFOUND) THEN
         CLOSE check_child_scorecards;
         Error_SYS.Appl_General(lu_name_,'CHECHISC1: No child scorecards found for the scorecard :P1.',scorecard_);
      END IF;
   CLOSE check_child_scorecards;


   IF object_type_ = 'COMPONENT' THEN
      -- Get measure components in parent
      index_:=0;
      sel_index_:=0;
      FOR components_ IN get_components(scorecard_) LOOP
         index_:=index_+1;
         component_arr_(index_):=components_.level_id;
         OPEN check_component_selected (components_.level_id);
         FETCH check_component_selected INTO temp_;
         IF check_component_selected%FOUND THEN
            sel_index_:=sel_index_+1;
            sel_component_arr_(sel_index_):=components_.level_id;
         END IF;
         CLOSE check_component_selected;
      END LOOP;

      IF index_>0 THEN
         parent_component_count_:=index_;
         FOR child_scorecards_ IN get_child_scorecards LOOP
            child_component_count_:=0;
            FOR components_ IN get_components(child_scorecards_.scorecard) LOOP
               component_exist_:=FALSE;
               FOR index_ IN 1 .. parent_component_count_ LOOP
                  IF component_arr_(index_)=components_.level_id THEN
                     component_exist_:=TRUE;
                     EXIT;
                  END IF;
               END LOOP;
               IF NOT component_exist_ THEN
                  Error_SYS.Appl_General(lu_name_,'SAMESTRUCT1: Child scorecard :P1 does not contain component :P2 .',child_scorecards_.scorecard,components_.level_id);
               END IF;
               child_component_count_:=child_component_count_+1;
            END LOOP;
            IF child_component_count_!=parent_component_count_ THEN
               Error_SYS.Appl_General(lu_name_,'SAMESTRUCT2: Child scorecard :P1 does not contain the same structure as parent.',child_scorecards_.scorecard);
            END IF;
         END LOOP;
      ELSE
         Error_SYS.Appl_General(lu_name_,'NOCOMPSEL1: Selected scorecard does not contain any components.');
      END IF;

      IF sel_index_>0 THEN
         FOR index_ IN 1..sel_index_ LOOP
            Consolidate_Values(environment_,scorecard_,year_,version_,object_type_,period_count_,sel_component_arr_(index_));
         END LOOP;
         Calculate_Measures (environment_,scorecard_ ,year_,version_,measure_,period_count_);
         -- Bug 76573 Removed the call to Set_To_Planned() since it is called inside Calculate_Measures() method
      ELSE
         Error_SYS.Appl_General(lu_name_,'NOCOMPSEL2: No components are selected for hierachical distribution.');
      END IF;


   ELSE

      FOR scorecard_objects_ IN get_scorecard_objects LOOP   -- fetch the measures that are selected in planning page
         Consolidate_Values(environment_,scorecard_,year_,version_,object_type_,period_count_,scorecard_objects_.scorecard_object);
      END LOOP;

   END IF;

END Hierarchical_Consolidation;
PROCEDURE Consolidate_Values (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   object_type_ IN VARCHAR2,
   period_count_ IN NUMBER,
   scorecard_object_ IN VARCHAR2 )
IS

   year_value_                       NUMBER;
   newrec_                           SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   oldrec_                           SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   objid_                            VARCHAR2(2000);
   attr_                             VARCHAR2(2000);
   objversion_                       VARCHAR2(2000);
   child_count_                      NUMBER;
   TYPE ValArrType                   IS TABLE OF NUMBER
                                     INDEX BY BINARY_INTEGER;
   period_val_arr_                   ValArrType;
   temp_period_count_                NUMBER;
   value_distribution_type_          VARCHAR2(20);
   period_val_                       VARCHAR2(30);
   child_scr_                        VARCHAR2(20);
   temp_val_                         VARCHAR2(5);
   temp_period_value_                NUMBER;


   CURSOR get_child_scorecards IS        --- Move to scorecard
      SELECT scorecard
      FROM scorecard
      WHERE parent=scorecard_
      AND environment=environment_;

   CURSOR get_open_child_scr IS
      SELECT '1'
      FROM scorecard
      WHERE scorecard = child_scr_
      AND environment=environment_
      AND objstate NOT IN ('Open','Planned');


   CURSOR get_total_period_val_ (period_value_  NUMBER) IS
      SELECT SUM(DECODE(period_value_,1,p1_value,2,p2_value,3,p3_value,
                                   4,p4_value,5,p5_value,6,p6_value,7,p7_value,
                                   8,p8_value,9,p9_value,10,p10_value,11,p11_value,
                                   12,p12_value))
      FROM  scorecard_input_value_tab
      WHERE environment= environment_
      AND   scorecard IN (SELECT sc.scorecard
                          FROM scorecard_tab sc
                          WHERE sc.environment = environment_
                          AND sc.parent = scorecard_
                          AND (sc.scorecard IN (SELECT scorecard
                                                FROM scorecard_user_access_tab
                                                WHERE identity = (SELECT fnd_user
                                                                  FROM   fnd_session)
                                                AND environment=sc.environment
                                                AND scorecard=sc.scorecard)
                          OR sc.scorecard IN (SELECT scorecard
                                           FROM scorecard_role_access_tab
                                           WHERE environment=sc.environment
                                           AND scorecard=sc.scorecard
                                           AND role IN (SELECT oracle_role
                                           FROM fnd_user_role_runtime
                                           WHERE identity = (SELECT fnd_user
                                                             FROM   fnd_session)))))
      AND   year = year_
      AND version = version_
      AND scorecard_object = scorecard_object_
      AND object_type_=object_type_;


   CURSOR get_period_val_ (period_value_  NUMBER) IS
      SELECT DECODE(period_value_,1,p1_value,2,p2_value,3,p3_value,
                                   4,p4_value,5,p5_value,6,p6_value,7,p7_value,
                                   8,p8_value,9,p9_value,10,p10_value,11,p1_value,
                                   12,p12_value)
      FROM  scorecard_input_value_tab
      WHERE environment= environment_
      AND   scorecard IN (SELECT sc.scorecard
                          FROM scorecard_tab sc
                          WHERE sc.environment = environment_
                          AND sc.parent = scorecard_
                          AND (sc.scorecard IN (SELECT scorecard
                                                FROM scorecard_user_access_tab
                                                WHERE identity = (SELECT fnd_user
                                                                  FROM   fnd_session)
                                                AND environment=sc.environment
                                                AND scorecard=sc.scorecard)
                          OR sc.scorecard IN (SELECT scorecard
                                           FROM scorecard_role_access_tab
                                           WHERE environment=sc.environment
                                           AND scorecard=sc.scorecard
                                           AND role IN (SELECT oracle_role
                                           FROM fnd_user_role_runtime
                                           WHERE identity = (SELECT fnd_user
                                                             FROM   fnd_session)))))
      AND   year = year_
      AND version = version_
      AND scorecard_object = scorecard_object_
      AND object_type_=object_type_;

BEGIN
    General_SYS.Init_Method(lu_name_, '&PKG', 'Consolidate_Values');
   year_value_ := 0;
   --value_distribution_type_ := scorecard_Structure_api.Get_Value_Dist_Type_Db(scorecard_,scorecard_object_,environment_,object_type_);
   value_distribution_type_ := measure_type_api.Encode(scorecard_Measure_api.Get_Measure_type(scorecard_object_));

   IF value_distribution_type_ IS NULL THEN
      IF object_type_='MEASURE' THEN
         Error_SYS.Appl_General(lu_name_,'VALDIST1: Value distribution type must have a value for measure :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
      ELSE
         Error_SYS.Appl_General(lu_name_,'VALDIST2: Value distribution type must have a value for component :P1 in parent scorecard :P2.',scorecard_object_,scorecard_);
      END IF;
   END IF;


   FOR child_scorecards_ IN get_child_scorecards LOOP  -- fetch the child scorecards

      child_scr_ := child_scorecards_.scorecard;
      OPEN get_open_child_scr;
      FETCH get_open_child_scr INTO temp_val_;
      CLOSE get_open_child_scr;

      IF (temp_val_ = '1') THEN
         Error_SYS.Appl_General(lu_name_,'TMPVAL: Not all scorecards in the hierarchy are opened for planning. Consolidation not possible.');
      END IF;

      IF NOT Check_Exist___(environment_,child_scorecards_.scorecard,year_,version_,scorecard_object_) THEN
         Error_SYS.Appl_General(lu_name_,'INPVAL: Scorecard object :P1 does not exist in scorecard :P2.',scorecard_object_,child_scorecards_.scorecard);
      END IF;

   END LOOP;

   FOR temp_period_count_ IN 1..period_count_ LOOP

      OPEN get_period_val_(temp_period_count_);
      LOOP
            FETCH get_period_val_ INTO temp_period_value_;
            EXIT WHEN get_period_val_%NOTFOUND;

         IF (temp_period_value_ IS NULL) THEN
            Error_SYS.Appl_General(lu_name_,'SCINPUTVALNO :  One of the child scorecard objects does not have values for the periods');
         END IF;
      END LOOP;
      CLOSE get_period_val_;
   END LOOP;


   oldrec_:=Lock_By_Keys___(environment_,scorecard_,year_,version_,scorecard_object_);


   period_val_arr_(1)  := oldrec_.p1_value;
   period_val_arr_(2)  := oldrec_.p2_value;
   period_val_arr_(3)  := oldrec_.p3_value;
   period_val_arr_(4)  := oldrec_.p4_value;
   period_val_arr_(5)  := oldrec_.p5_value;
   period_val_arr_(6)  := oldrec_.p6_value;
   period_val_arr_(7)  := oldrec_.p7_value;
   period_val_arr_(8)  := oldrec_.p8_value;
   period_val_arr_(9)  := oldrec_.p9_value;
   period_val_arr_(10) := oldrec_.p10_value;
   period_val_arr_(11) := oldrec_.p11_value;
   period_val_arr_(12) := oldrec_.p12_value;

   newrec_:=oldrec_;

   IF (value_distribution_type_ = 'PERCENTAGE') THEN

      child_count_:=Scorecard_API.Get_Child_Count(scorecard_,environment_);

      FOR temp_period_count_ IN 1..period_count_ LOOP

         OPEN get_total_period_val_ (temp_period_count_);
         FETCH get_total_period_val_ INTO period_val_arr_(temp_period_count_);
         period_val_arr_(temp_period_count_) := (period_val_arr_(temp_period_count_)/child_count_);
         year_value_:=year_value_ +period_val_arr_(temp_period_count_);
         CLOSE get_total_period_val_;

      END LOOP;
      year_value_:=year_value_ /period_count_;

   ELSIF (value_distribution_type_ = 'VALUE') THEN

      FOR temp_period_count_ IN 1..period_count_ LOOP

         OPEN get_total_period_val_ (temp_period_count_);
         FETCH get_total_period_val_ INTO period_val_arr_(temp_period_count_);
         year_value_:=year_value_ +period_val_arr_(temp_period_count_);
         CLOSE get_total_period_val_;

      END LOOP;

   END IF;

   newrec_.year_value:=year_value_;
   newrec_.p1_value :=period_val_arr_(1);
   newrec_.p2_value :=period_val_arr_(2);
   newrec_.p3_value :=period_val_arr_(3);
   newrec_.p4_value :=period_val_arr_(4);
   newrec_.p5_value :=period_val_arr_(5);
   newrec_.p6_value :=period_val_arr_(6);
   newrec_.p7_value :=period_val_arr_(7);
   newrec_.p8_value :=period_val_arr_(8);
   newrec_.p9_value :=period_val_arr_(9);
   newrec_.p10_value:=period_val_arr_(10);
   newrec_.p11_value:=period_val_arr_(11);
   newrec_.p12_value:=period_val_arr_(12);

   Update___(objid_,oldrec_,newrec_,attr_,objversion_,TRUE);
   Scorecard_api.Set_To_Planned(environment_,scorecard_);
   Scorecard_Input_Value_api.Set_To_Planned(environment_,scorecard_,year_,version_,scorecard_object_);
END Consolidate_Values;
PROCEDURE All_Hierarchical_Logic (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   action_ IN VARCHAR2 )
IS
   comp_level_             VARCHAR2(5);
   period_count_           NUMBER;
   measures_               VARCHAR2(10);
   scorecard_object_       VARCHAR2(10);
   newrec_                 SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   oldrec_                 SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   attr_                   VARCHAR2(2000);
   objid_                  VARCHAR2(2000);
   objversion_             VARCHAR2(2000);
   get_childs_             VARCHAR2(10);
   child_exists_           VARCHAR2(10);


   CURSOR get_scorecard_objects(scorecard_ VARCHAR2) IS
      SELECT scorecard_object
      FROM scorecard_input_value_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND year = year_
      AND version = version_;

   CURSOR get_period_count IS
     SELECT count(1)
     FROM scorecard_period_tab
     WHERE environment = environment_
     AND year = year_;

   CURSOR get_scorecard_measures(scorecard_ VARCHAR2) IS
      SELECT level_id
      FROM scorecard_structure_tab
      WHERE environment = environment_
      AND scorecard = scorecard_
      AND child_level_type = 'MEASURE';

   CURSOR get_childs IS
      SELECT scorecard
      FROM scorecard
      WHERE environment = environment_
      AND parent = scorecard_
      AND objstate IN ('Open','Planned');

   CURSOR get_childs_for_cons IS
      SELECT scorecard
      FROM   scorecard
      WHERE  environment = environment_
      START WITH parent = scorecard_
      CONNECT BY parent = PRIOR scorecard
      AND   environment = PRIOR environment
      AND objstate IN ('Open','Planned')
      ORDER BY level_sequence desc;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'All_Hierarchical_Logic');
   child_exists_ := 'TRUE';
   OPEN get_childs;
   FETCH get_childs INTO get_childs_;
   IF (get_childs%NOTFOUND) THEN
      CLOSE get_childs;
      child_exists_ := 'FALSE';
   ELSE
      CLOSE get_childs;
   END IF;

   IF (child_exists_ = 'TRUE') THEN

      FOR get_scorecard_objects_ IN get_scorecard_objects(scorecard_) LOOP
        scorecard_object_ := get_scorecard_objects_.scorecard_object;
        oldrec_:=Lock_By_Keys___(environment_,scorecard_,year_,version_,scorecard_object_);
        newrec_:=oldrec_;
        newrec_.action:='TRUE';
        Update___(objid_,oldrec_,newrec_,attr_,objversion_,TRUE);
      END LOOP;

      measures_ := null;
      comp_level_ := scorecard_environment_api.Get_Component_Level(environment_ );

      OPEN get_period_count;
      FETCH get_period_count INTO period_count_;
      CLOSE get_period_count;

      IF (action_ = 'DISTRIBUTION') THEN
         IF (comp_level_ = 'TRUE') THEN
            FOR get_scorecard_measures_ IN get_scorecard_measures(scorecard_) LOOP
                measures_ := get_scorecard_measures_.level_id;
                Hierachical_Distribution(environment_,scorecard_,year_,version_ ,'COMPONENT',period_count_,measures_);
            END LOOP;
         ELSE
            Hierachical_Distribution(environment_,scorecard_,year_,version_ ,'MEASURE',period_count_,measures_);
         END IF;
         FOR get_childs_ IN get_childs LOOP
            All_Hierarchical_Logic(environment_,get_childs_.scorecard,year_,version_ ,action_);
         END LOOP;

      ELSIF (action_ = 'CONSOLIDATION') THEN
         FOR get_childs_for_cons_ IN  get_childs_for_cons LOOP
            FOR get_scorecard_objects_ IN get_scorecard_objects(get_childs_for_cons_.scorecard) LOOP
                scorecard_object_ := get_scorecard_objects_.scorecard_object;
                oldrec_:=Lock_By_Keys___(environment_,get_childs_for_cons_.scorecard,year_,version_,scorecard_object_);
                newrec_:=oldrec_;
                newrec_.action:='TRUE';
                Update___(objid_,oldrec_,newrec_,attr_,objversion_,TRUE);
            END LOOP;
            IF (Scorecard_API.Get_Child_Count(get_childs_for_cons_.scorecard,environment_) >=1) THEN
               IF (comp_level_ = 'TRUE') THEN
                  FOR get_scorecard_measures_ IN get_scorecard_measures(get_childs_for_cons_.scorecard) LOOP
                     measures_ := get_scorecard_measures_.level_id;
                     Hierarchical_Consolidation(environment_,get_childs_for_cons_.scorecard,year_,version_ ,'COMPONENT',period_count_,measures_);
                  END LOOP;
               ELSE
                  Hierarchical_Consolidation(environment_,get_childs_for_cons_.scorecard,year_,version_ ,'MEASURE',period_count_,measures_);
               END IF;
            END IF;
         END LOOP;
         -- for the selected scorecard
         IF (Scorecard_API.Get_Child_Count(scorecard_,environment_) >=1) THEN
            IF (comp_level_ = 'TRUE') THEN
               FOR get_scorecard_measures_ IN get_scorecard_measures(scorecard_) LOOP
                  measures_ := get_scorecard_measures_.level_id;
                  Hierarchical_Consolidation(environment_,scorecard_,year_,version_ ,'COMPONENT',period_count_,measures_);
               END LOOP;
            ELSE
               Hierarchical_Consolidation(environment_,scorecard_,year_,version_ ,'MEASURE',period_count_,measures_);
            END IF;
         END IF;
      END IF;
   END IF;
END All_Hierarchical_Logic;
PROCEDURE Call_Hierarchical_Logic (
   attr_ IN VARCHAR2 )
IS
   environment_          Scorecard_Environment_Tab.environment%TYPE;
   scorecard_            Scorecard_Tab.scorecard%TYPE;
   year_                 VARCHAR2(20);
   version_              VARCHAR2(20);
   action_               VARCHAR2(30);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Call_Hierarchical_Logic');
   environment_         := Client_SYS.Get_Item_Value('ENVIRONMENT'       ,attr_);
   scorecard_           := Client_SYS.Get_Item_Value('SCORECARD'         ,attr_);
   year_                := Client_SYS.Get_Item_Value('YEAR'              ,attr_);
   version_             := Client_SYS.Get_Item_Value('VERSION'           ,attr_);
   action_              := Client_SYS.Get_Item_Value('ACTION'            ,attr_);
   Scorecard_Input_Value_API.All_Hierarchical_Logic(environment_,scorecard_,year_,version_,action_);
END Call_Hierarchical_Logic;
PROCEDURE Start_Hierarchical_Logic (
   attr_ IN VARCHAR2 )
IS
   new_attr_  VARCHAR2(2000) := attr_;
   desc_         VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Start_Hierarchical_Logic');
   desc_ := Language_SYS.Translate_Constant (lu_name_, 'BGJOB_HR_LOGIC:Update Scorecard objects in the scorecard input value according to the hierarchical logic.');
   Transaction_SYS.Deferred_Call ('Scorecard_Input_Value_API.Call_Hierarchical_Logic',new_attr_, desc_);
END Start_Hierarchical_Logic;
PROCEDURE Background_Hierarchical_Logic (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   action_ IN VARCHAR2,
   execution_plan_ IN VARCHAR2 )
IS
   job_id_             NUMBER;
   method_             VARCHAR2(2000);
   attr_               VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'Scorecard_Input_Value_API','Background_Hierarchical_Logic');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ENVIRONMENT',environment_,attr_);
   Client_SYS.Add_To_Attr('SCORECARD',scorecard_ ,attr_);
   Client_SYS.Add_To_Attr('YEAR',year_ ,attr_);
   Client_SYS.Add_To_Attr('VERSION',version_ ,attr_);
   Client_SYS.Add_To_Attr('ACTION',action_ ,attr_);
   method_:='Scorecard_Input_Value_API.Start_Hierarchical_Logic_('''''||attr_||''''')';
   IF (execution_plan_ != 'NOW') THEN
      Batch_SYS.New_Job(job_id_,method_,execution_plan_);
   ELSE
      Start_Hierarchical_Logic(attr_);
   END IF;
END Background_Hierarchical_Logic;
PROCEDURE Set_To_Planned (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 )
IS
  rec_    SCORECARD_INPUT_VALUE%ROWTYPE;
  rec2_   SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
  attr_   VARCHAR2(2000);
  info_   VARCHAR2(32000);
  objver_ VARCHAR2(2000);
  CURSOR get_attr IS
     SELECT *
     FROM SCORECARD_INPUT_VALUE
     WHERE environment=environment_
     AND   scorecard=scorecard_
     AND   year=year_
     AND   version=version_
     AND   scorecard_object=scorecard_object_;
BEGIN
   General_SYS.Init_Method(lu_name_, 'SCORECARD_INPUT_VALUE_API', 'Set_To_Planned');
   OPEN get_attr;
   FETCH get_attr INTO rec_;
   CLOSE get_attr;
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr ('OBJID', rec_.objid, attr_);
   Client_SYS.Add_To_Attr ('OBJVERSION', rec_.objversion, attr_);
   --rec2_:=Lock_By_Keys___(environment_,scorecard_,year_,version_,scorecard_object_);
   --objver_:= to_char(rec2_.rowversion,'YYYYMMDDHH24MISS');
   --Plan__(info_,rec_.objid,objver_,attr_,'DO');
   Plan__(info_,rec_.objid,rec_.objversion,attr_,'DO');
   Client_SYS.Clear_Attr(attr_);
END Set_To_Planned;
FUNCTION Get_Sco_Obj_State_Date (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   measure_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ &TABLE..mea_state_change_date%TYPE;
   CURSOR get_attr IS
      SELECT max(mea_state_change_date)
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   scorecard_object = measure_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Sco_Obj_State_Date;
PROCEDURE Budget_And_Calculate (
   components_not_used_ OUT VARCHAR2,
   company_ IN VARCHAR2,
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   measure_ IN VARCHAR2,
   version_ IN VARCHAR2,
   budget_version_ IN VARCHAR2,
   component_list_ IN VARCHAR2 )
IS

   TYPE RefCurTyp IS        REF CURSOR;
   scorecard_input_rec_     RefCurTyp;
   budget_period_rec_       RefCurTyp;
   source_stmt_             VARCHAR2(2000);
   code_part_str_           VARCHAR2(50);
   code_part_values_        VARCHAR2(2000);
   account_list_            VARCHAR2(2000);
   component_rec_           SCORECARD_MEASURE_TAB%ROWTYPE;
   period_val_              SCORECARD_PERIOD_TAB.PERIOD_MATCH_IDENTITY%TYPE;
   temp_input_val_rec_      SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   code_part_value_         VARCHAR2(20);
   scr_code_part_           VARCHAR2(20);
   in_values_               VARCHAR2(2000);
   input_value_tab_stmt_    VARCHAR2(2000);
   table_name_              VARCHAR2(50);
   aggregated_value_        NUMBER;
   budget_year_             NUMBER;
   new_account_list_        VARCHAR2(2000);
   replace_from_            VARCHAR2(1) ;
   replace_with_            VARCHAR2(4);
   count_period_            NUMBER;
   TYPE PeriodMatchType     IS TABLE OF NUMBER
                         INDEX BY BINARY_INTEGER;
   per_match_identity_type_ PeriodMatchType;
   newrec_                  SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   oldrec_                  SCORECARD_INPUT_VALUE_TAB%ROWTYPE;
   objid_                   VARCHAR2(2000);
   attr_                    VARCHAR2(2000);
   objversion_              VARCHAR2(2000);
   is_visited_              BOOLEAN:=false;
   field_separator_         CONSTANT VARCHAR2(1)  := chr(31);
   i                        NUMBER;
   count_                   NUMBER;
   mea_type_                VARCHAR2(20);
   total_value_             NUMBER;
   avg_value_               NUMBER;

CURSOR get_comp_details (comp_ VARCHAR2) IS
   SELECT * FROM  SCORECARD_MEASURE_TAB
   WHERE measure = comp_;

CURSOR get_period_details IS
   SELECT period_match_identity FROM  SCORECARD_PERIOD_TAB
   WHERE Environment = environment_
   AND   YEAR        = year_
   ORDER BY end_date;

CURSOR get_code_part IS
   SELECT scorecard_code_part FROM SCORECARD_ENVIRONMENT_TAB
   WHERE environment = environment_;


BEGIN
      General_SYS.Init_Method(lu_name_, 'Scorecard_Input_Value_API','Budget_And_Calculate');
      replace_from_:=',';
      replace_with_:=''',''';
      count_period_ :=1;

      in_values_:=Replace(component_list_,'^','''');

      table_name_ :='SCORECARD_INPUT_VALUE_TAB';
      input_value_tab_stmt_ :=  ' SELECT * FROM  ' || table_name_ ||
                                ' WHERE  environment ='|| '''' ||environment_ || '''' ||
                                ' AND    scorecard ='  ||'''' ||scorecard_   ||  '''' ||
                                ' AND    year ='       ||'''' ||year_       || '''' ||
                                ' AND    version ='    ||'''' || version_    || '''' ||
                                ' AND    scorecard_object in (' || in_values_ || ')';

      OPEN get_code_part;
         FETCH get_code_part INTO scr_code_part_;
      CLOSE get_code_part;

      IF NOT scr_code_part_ IS NULL THEN
         code_part_values_ := scorecard_attribute_api.Get_Value(environment_,scorecard_,'CODE_PART_VALUE');
         code_part_values_:=Replace(code_part_values_,replace_from_,replace_with_);
         code_part_str_ :=' AND CODE_' || scr_code_part_ || ' IN ( ' || '''' || code_part_values_ || '''' ||' )';
      ELSE
          code_part_str_ :='';
      END IF;

      -- since table_name_ is hardcoded we can set asserted
      -- ifs_assert_safe shsalk 20060117
      open scorecard_input_rec_ for input_value_tab_stmt_;

      OPEN get_period_details;
      LOOP
         FETCH get_period_details INTO period_val_;
         EXIT WHEN get_period_details%NOTFOUND;
         per_match_identity_type_(count_period_):=period_val_;
         count_period_ :=count_period_+1;
      END LOOP;

      CLOSE get_period_details;

      count_:= count_period_ - 1 ;

      LOOP
         source_stmt_ :='SELECT ';

         FETCH scorecard_input_rec_ INTO temp_input_val_rec_;
         EXIT WHEN scorecard_input_rec_%NOTFOUND;

         OPEN get_comp_details(temp_input_val_rec_.scorecard_object);
           FETCH get_comp_details INTO component_rec_;
         CLOSE get_comp_details;

         -- check amount type
         --'AMTBAL^CURBAL^QTYBAL^PROJBAL^PROJQTY^PRJCURBAL^';
         IF component_rec_.amount_type = 'AMTBAL' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-AMOUNT' || ',' || '''' || 'R' || '''' ||  ',' ||'-AMOUNT' || ',' || 'AMOUNT'|| '))' || ',YEAR_PERIOD_KEY ';
         ELSIF component_rec_.amount_type = 'CURBAL' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-THIRD_CURRENCY_AMOUNT' || ',' || '''' || 'R' || '''' ||  ',' ||'-THIRD_CURRENCY_AMOUNT' || ',' || 'THIRD_CURRENCY_AMOUNT'|| '))' || ',YEAR_PERIOD_KEY ';
         ELSIF component_rec_.amount_type = 'QTYBAL' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-QUANTITY' || ',' || '''' || 'R' || '''' ||  ',' ||'-QUANTITY' || ',' || 'QUANTITY'|| '))' || ',YEAR_PERIOD_KEY ';
         ELSIF component_rec_.amount_type = 'PROJBAL' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-AMOUNT' || ',' || '''' || 'R' || '''' ||  ',' ||'-AMOUNT' || ',' || 'AMOUNT'|| '))' || ',YEAR_PERIOD_KEY ';
         ELSIF component_rec_.amount_type = 'PRJCURBAL' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-THIRD_CURRENCY_AMOUNT' || ',' || '''' || 'R' || '''' ||  ',' ||'-THIRD_CURRENCY_AMOUNT' || ',' || 'THIRD_CURRENCY_AMOUNT'|| '))' || ',YEAR_PERIOD_KEY ';
         ELSIF component_rec_.amount_type = 'PROJQTY' THEN
            source_stmt_ := source_stmt_ || 'SUM(DECODE(LOGICAL_ACCOUNT_TYPE,' || '''' ||'L' || '''' ||',' || '-QUANTITY' || ',' || '''' || 'R' || '''' ||  ',' ||'-QUANTITY' || ',' || 'QUANTITY'|| '))' || ',YEAR_PERIOD_KEY ';
         END IF;

         source_stmt_ :=source_stmt_ || ' FROM budget_period_amount_pub
                        WHERE COMPANY=:c_company
                        AND BUDGET_VERSION=:b_budget_Version
                        AND BUDGET_YEAR=:b_budget_year';

         source_stmt_ := source_stmt_ || code_part_str_ ;


         -- Add ledger Id
          source_stmt_ := source_stmt_ || ' AND LEDGER_ID=:l_ledger_id ' ;

         -- Add account list
         account_list_:=bp_measure_accounts_api.Get_Measure_Accounts(temp_input_val_rec_.scorecard_object);
         IF NOT account_list_ IS null THEN
            new_account_list_ := '''' || Replace(account_list_,replace_from_,replace_with_) || '''' ;
            source_stmt_ := source_stmt_ || ' AND ACCOUNT IN ( ' || new_account_list_ || ')  ' ;
         END IF;

         -- check amount type
         IF component_rec_.amount_type = 'PROJBAL'  OR component_rec_.amount_type = 'PROJQTY' OR component_rec_.amount_type ='PRJCURBAL' THEN
            source_stmt_ := source_stmt_ || 'AND Project_Id IS NOT NULL';
         END IF;
         source_stmt_ := source_stmt_ || 'GROUP BY  year_period_key';

         oldrec_:=scorecard_input_value_api.Lock_By_Keys___(environment_,scorecard_,year_,version_,temp_input_val_rec_.scorecard_object);
         newrec_:=oldrec_;

         -- Initialize field values

         newrec_.p1_value  :=NULL;
         newrec_.p2_value  :=NULL;
         newrec_.p3_value  :=NULL;
         newrec_.p4_value  :=NULL;
         newrec_.p4_value  :=NULL;
         newrec_.p5_value  :=NULL;
         newrec_.p6_value  :=NULL;
         newrec_.p7_value  :=NULL;
         newrec_.p8_value  :=NULL;
         newrec_.p9_value  :=NULL;
         newrec_.p10_value :=NULL;
         newrec_.p11_value :=NULL;
         newrec_.p12_value :=NULL;

         -- ifs_assert_safe shsalk 20060117
         OPEN budget_period_rec_ FOR source_stmt_ USING company_,budget_version_,year_,component_rec_.ledger_id;
         count_period_ :=1;
         is_visited_:=false;
         LOOP
            FETCH budget_period_rec_ INTO aggregated_value_,budget_year_;
               EXIT WHEN budget_period_rec_%NOTFOUND;

            FOR i IN 1..count_ LOOP
                IF budget_year_ = per_match_identity_type_(i) THEN
                   count_period_:=i;
                   EXIT;
                END IF;
            END LOOP;

            CASE count_period_
                   WHEN 1  THEN newrec_.p1_value :=aggregated_value_;
                   WHEN 2  THEN newrec_.p2_value :=aggregated_value_;
                   WHEN 3  THEN newrec_.p3_value :=aggregated_value_;
                   WHEN 4  THEN newrec_.p4_value :=aggregated_value_;
                   WHEN 5  THEN newrec_.p5_value :=aggregated_value_;
                   WHEN 6  THEN newrec_.p6_value :=aggregated_value_;
                   WHEN 7  THEN newrec_.p7_value :=aggregated_value_;
                   WHEN 8  THEN newrec_.p8_value :=aggregated_value_;
                   WHEN 9  THEN newrec_.p9_value :=aggregated_value_;
                   WHEN 10 THEN newrec_.p10_value:=aggregated_value_;
                   WHEN 11 THEN newrec_.p11_value:=aggregated_value_;
                   WHEN 12 THEN newrec_.p12_value:=aggregated_value_;
                   ELSE Error_SYS.Appl_General(lu_name_,'SCOINPUTVALLOADMES22: Invaild no of periods');
            END CASE;

            is_visited_:=true;

         END LOOP;
         CLOSE budget_period_rec_;

         IF NOT is_visited_ THEN
            components_not_used_:=components_not_used_|| scorecard_measure_api.Get_Description(temp_input_val_rec_.scorecard_object) || field_separator_;
         END IF;

         newrec_.budget_version:=budget_version_;

         newrec_.p1_value :=NVL(newrec_.p1_value,0);
         newrec_.p2_value :=NVL(newrec_.p2_value,0);
         newrec_.p3_value :=NVL(newrec_.p3_value,0);
         newrec_.p4_value :=NVL(newrec_.p4_value,0);
         newrec_.p5_value :=NVL(newrec_.p5_value,0);
         newrec_.p6_value :=NVL(newrec_.p6_value,0);
         newrec_.p7_value :=NVL(newrec_.p7_value,0);
         newrec_.p8_value :=NVL(newrec_.p8_value,0);
         newrec_.p9_value :=NVL(newrec_.p9_value,0);
         newrec_.p10_value:=NVL(newrec_.p10_value,0);
         newrec_.p11_value:=NVL(newrec_.p11_value,0);
         newrec_.p12_value:=NVL(newrec_.p12_value,0);

         mea_type_ := scorecard_Measure_api.Get_Measure_Type_Db(temp_input_val_rec_.scorecard_object);
         total_value_ := newrec_.p1_value+newrec_.p2_value+newrec_.p3_value+newrec_.p4_value+newrec_.p5_value+newrec_.p6_value+newrec_.p7_value+newrec_.p8_value+newrec_.p9_value+newrec_.p10_value+newrec_.p11_value+newrec_.p12_value;
         IF mea_type_ = 'PERCENTAGE' THEN
            avg_value_ := total_value_/count_;
            newrec_.year_value := avg_value_;
         ELSIF mea_type_ = 'VALUE' THEN
            newrec_.year_value := total_value_;
         END IF;
         scorecard_input_value_api.Update___(objid_,oldrec_,newrec_,attr_,objversion_,TRUE);
      END LOOP;
      close scorecard_input_rec_;
      scorecard_input_value_api.Calculate_Measures (environment_,scorecard_ ,year_,version_,measure_,12);
END Budget_And_Calculate;

PROCEDURE Get_Error_Msg_For_Comp (
   plan_formula_ IN OUT VARCHAR2,
   check_value_ IN VARCHAR2 )
IS
  invalid_comp_ NUMBER;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Error_Msg_For_Comp');
   IF (check_value_ = 'TRUE') THEN
      plan_formula_ := 'NULL';
   ELSE
      invalid_comp_ := INSTR(plan_formula_,'COMP', 1, 1);
      IF invalid_comp_ <> 0 THEN
         Error_SYS.Appl_General(lu_name_,'INPVALCOMPNFND: A component in Calculation formula is not found ');
      END IF;
   END IF;
END Get_Error_Msg_For_Comp;
PROCEDURE Return_Periods (
   period1_ OUT VARCHAR2,
   period2_ OUT VARCHAR2,
   period3_ OUT VARCHAR2,
   period4_ OUT VARCHAR2,
   period5_ OUT VARCHAR2,
   period6_ OUT VARCHAR2,
   period7_ OUT VARCHAR2,
   period8_ OUT VARCHAR2,
   period9_ OUT VARCHAR2,
   period10_ OUT VARCHAR2,
   period11_ OUT VARCHAR2,
   period12_ OUT VARCHAR2,
   env_ IN VARCHAR2,
   year_ IN VARCHAR2 )
IS
   per_no NUMBER;
   period_ VARCHAR2(10);
   CURSOR get_period IS
      SELECT period
      FROM   scorecard_period_tab
      WHERE  environment = env_
      AND    year = year_
      ORDER BY end_date;

   CURSOR get_periodCount IS
      SELECT count (1)
      FROM   scorecard_period_tab
      WHERE  environment = env_
      AND    year = year_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Return_Periods');
   OPEN get_periodCount;
   FETCH get_periodCount INTO per_no;
   CLOSE get_periodCount;

   OPEN get_period;
   period1_  := null;
   period2_  := null;
   period3_  := null;
   period4_  := null;
   period5_  := null;
   period6_  := null;
   period7_  := null;
   period8_  := null;
   period9_  := null;
   period10_ := null;
   period11_ := null;
   period12_ := null;

   FOR i IN 1..per_no LOOP
      FETCH get_period INTO period_;
         IF (i = 1) THEN
            period1_ := period_;
         ELSIF (i = 2) THEN
            period2_ := period_;
         ELSIF (i = 3) THEN
            period3_ := period_;
         ELSIF (i = 4) THEN
            period4_ := period_;
         ELSIF (i = 5) THEN
            period5_ := period_;
         ELSIF (i = 6) THEN
            period6_ := period_;
         ELSIF (i = 7) THEN
            period7_ := period_;
         ELSIF (i = 8) THEN
            period8_ := period_;
         ELSIF (i = 9) THEN
            period9_ := period_;
         ELSIF (i = 10) THEN
            period10_ := period_;
         ELSIF (i = 11) THEN
            period11_ := period_;
         ELSIF (i = 12) THEN
            period12_ := period_;
         END IF;
   END LOOP;
   CLOSE get_period;

END Return_Periods;
PROCEDURE Import_Planned_Values(
   environment_      IN VARCHAR2,
   scorecard_        IN VARCHAR2,
   p_year_           IN VARCHAR2,
   version_          IN VARCHAR2,
   scorecard_object_ IN VARCHAR2,
   key_value_attr_   IN VARCHAR2)
IS
   year_        &TABLE..year%TYPE;
   key_         &TABLE..p1_key%TYPE;
   trans_value_ &TABLE..p1_value%TYPE;

   ptr_         NUMBER;
   name_        VARCHAR2(30);
   column_      VARCHAR2(30);
   value_       VARCHAR2(2000);
   info_        VARCHAR2(2000);
   objid_       VARCHAR2(2000);
   objversion_  VARCHAR2(2000);
   attr_        VARCHAR2(2000);

   CURSOR get_update_record IS
      SELECT objid, objversion
      FROM   &VIEW
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    scorecard_object = scorecard_object_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Import_Planned_Values');
   ptr_ := NULL;

   LOOP

      WHILE ( Client_SYS.Get_Next_From_Attr(key_value_attr_, ptr_, name_, value_) ) LOOP

         IF (name_ = 'KEY') THEN
            key_  := value_;
            year_ := Scorecard_Period_API.Get_Year(environment_,
                                                   key_);
         ELSIF (name_ = 'VALUE') THEN
            trans_value_ := value_;
            EXIT;
         END IF;

      END LOOP;

      column_ := Find_Column___(environment_,
                                scorecard_,
                                year_,
                                version_,
                                scorecard_object_,
                                key_);
      OPEN  get_update_record;
      FETCH get_update_record INTO objid_, objversion_;

      IF ((get_update_record%FOUND) AND (column_ IS NOT NULL)) THEN
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr(column_, trans_value_, attr_);
         Client_SYS.Add_To_Attr('FROM_BUDPRO', 'TRUE', attr_);
         Modify__(info_, objid_, objversion_, attr_, 'DO');
         Calculate_Year_Value(environment_,
                              scorecard_,
                              year_,
                              version_,
                              scorecard_object_,
                              'TRUE');
         /*Calculate_Measures(environment_,
                            scorecard_,
                            year_,
                            version_,
                            scorecard_object_,
                            12);*/
      END IF;

      CLOSE get_update_record;
      EXIT WHEN NOT (Client_SYS.Get_Next_From_Attr(key_value_attr_, ptr_, name_, value_));

   END LOOP;

END Import_Planned_Values;

PROCEDURE Calculate_Year_Value (
   environment_  IN VARCHAR2,
   scorecard_    IN VARCHAR2,
   year_         IN VARCHAR2,
   version_      IN VARCHAR2,
   measure_      IN VARCHAR2,
   from_budpro_ IN VARCHAR2 DEFAULT 'FALSE' )
IS
   total_        &TABLE..year_value%TYPE := 0;
   measure_type_ scorecard_measure_tab.measure_type%TYPE;

   objid_                   VARCHAR2(2000);
   objversion_              VARCHAR2(2000);
   info_                    VARCHAR2(2000);
   attr_                    VARCHAR2(2000);
   count_                   NUMBER := 0;
   formula_p1_              NUMBER;
   formula_p2_              NUMBER;
   formula_p3_              NUMBER;
   formula_p4_              NUMBER;
   formula_p5_              NUMBER;
   formula_p6_              NUMBER;
   formula_p7_              NUMBER;
   formula_p8_              NUMBER;
   formula_p9_              NUMBER;
   formula_p10_             NUMBER;
   formula_p11_             NUMBER;
   formula_p12_             NUMBER;

   CURSOR    measure_value IS
      SELECT objid,objversion,P1_Value,P2_Value,P3_Value,P4_Value,P5_Value,P6_Value,P7_Value,P8_Value,P9_Value,P10_Value,P11_Value,P12_Value
      FROM   &VIEW
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    scorecard_object = measure_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Calculate_Year_Value');
   measure_type_ := Scorecard_measure_API.Get_Measure_Type_Db(measure_);
   OPEN  measure_value;
   FETCH measure_value INTO objid_, objversion_, formula_p1_, formula_p2_, formula_p3_, formula_p4_, formula_p5_,
                            formula_p6_, formula_p7_, formula_p8_, formula_p9_, formula_p10_, formula_p11_, formula_p12_;
   CLOSE measure_value;

   IF (formula_p1_ IS NOT NULL) THEN
      total_ := total_ + formula_p1_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p2_ IS NOT NULL) THEN
      total_ := total_ + formula_p2_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p3_ IS NOT NULL) THEN
      total_ := total_ + formula_p3_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p4_ IS NOT NULL) THEN
      total_ := total_ + formula_p4_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p5_ IS NOT NULL) THEN
      total_ := total_ + formula_p5_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p6_ IS NOT NULL) THEN
      total_ := total_ + formula_p6_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p7_ IS NOT NULL) THEN
      total_ := total_ + formula_p7_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p8_ IS NOT NULL) THEN
      total_ := total_ + formula_p8_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p9_ IS NOT NULL) THEN
      total_ := total_ + formula_p9_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p10_ IS NOT NULL) THEN
      total_ := total_ + formula_p10_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p11_ IS NOT NULL) THEN
      total_ := total_ + formula_p11_;
      count_ := count_ + 1;
   END IF;

   IF (formula_p12_ IS NOT NULL) THEN
      total_ := total_ + formula_p12_;
      count_ := count_ + 1;
   END IF;

   IF (measure_type_ = 'PERCENTAGE' AND count_ > 0) THEN
      total_ := total_ / count_;
   ELSIF NOT(measure_type_ = 'VALUE') THEN
      total_ := NULL;
   END IF;

   IF (total_ IS NOT NULL) THEN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('YEAR_VALUE', total_, attr_);
      Client_SYS.Add_To_Attr('FROM_BUDPRO', from_budpro_, attr_);
      Modify__(info_, objid_, objversion_, attr_ , 'DO');
   END IF;

END Calculate_Year_Value;
PROCEDURE Aggregate_Planned_Values(
   environment_      IN VARCHAR2,
   scorecard_        IN VARCHAR2,
   year_             IN VARCHAR2,
   version_          IN VARCHAR2,
   scorecard_object_ IN VARCHAR2,
   type_             IN VARCHAR2)
IS
   my_year_ &TABLE..year%TYPE;
   num_     NUMBER;

   CURSOR get_update_record IS
      SELECT 1
      FROM   &VIEW
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    scorecard_object = scorecard_object_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Aggregate_Planned_Values');
   OPEN  get_update_record;
   FETCH get_update_record INTO num_;

   IF (get_update_record%FOUND) THEN
      my_year_ := Scorecard_Period_API.Get_Year(environment_,
                                                year_);
      Hierarchical_Consolidation(environment_,
                                 scorecard_,
                                 my_year_,
                                 version_,
                                 type_,
                                 12,
                                 scorecard_object_);
      /*Calculate_Measures(environment_,
                         scorecard_,
                         year_,
                         version_,
                         scorecard_object_,
                         12);*/
   END IF;

   CLOSE get_update_record;
END Aggregate_Planned_Values;

PROCEDURE Load_Planned_Values (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2,
   from_ IN VARCHAR2,
   period_count_ IN VARCHAR2 )
IS
   stmt_bp_call_ VARCHAR2(2000);
   attr_         VARCHAR2(2000);
   dummy_        VARCHAR2(2000);

   TYPE GetTemplateNode IS REF CURSOR;
   get_budpro           GetTemplateNode;
   --Bug 66984 Begin
   get_budpro_node      GetTemplateNode;
   --Bug 66984 End
   TYPE BudTemplateRec  IS RECORD (company VARCHAR2(60),
                                   budget_process_id VARCHAR2(30),
                                   budget_template_id VARCHAR2(60));
   template_rec_        BudTemplateRec;
   TYPE BudNodeRec      IS RECORD (company VARCHAR2(60),
                                   budget_process_id VARCHAR2(30),
                                   budget_structure_id VARCHAR2(90),
                                   budget_node_id VARCHAR2(90));
   node_rec_            BudNodeRec;

   rec_                 &TABLE.%ROWTYPE;

   CURSOR get_keys IS
      SELECT *
      FROM   &TABLE
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Load_Planned_Values');

   IF ( bp_installed_ ) THEN
      Client_SYS.Clear_Attr(attr_);

      OPEN  get_keys;
      FETCH get_keys INTO rec_;
      CLOSE get_keys;

      Client_SYS.Add_To_Attr('FROM', from_, attr_);

      IF (rec_.p1_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P1_KEY', rec_.p1_key, attr_);
      END IF;

      IF (rec_.p2_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P2_KEY', rec_.p2_key, attr_);
      END IF;

      IF (rec_.p3_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P3_KEY', rec_.p3_key, attr_);
      END IF;

      IF (rec_.p4_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P4_KEY', rec_.p4_key, attr_);
      END IF;

      IF (rec_.p5_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P5_KEY', rec_.p5_key, attr_);
      END IF;

      IF (rec_.p6_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P6_KEY', rec_.p6_key, attr_);
      END IF;

      IF (rec_.p7_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P7_KEY', rec_.p7_key, attr_);
      END IF;

      IF (rec_.p8_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P8_KEY', rec_.p8_key, attr_);
      END IF;

      IF (rec_.p9_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P9_KEY', rec_.p9_key, attr_);
      END IF;

      IF (rec_.p10_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P10_KEY', rec_.p10_key, attr_);
      END IF;

      IF (rec_.p11_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P11_KEY', rec_.p11_key, attr_);
      END IF;

      IF (rec_.p12_key IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('P12_KEY', rec_.p12_key, attr_);
      END IF;

      IF (attr_ IS NOT NULL) THEN
         attr_ := attr_ || scorecard_object_;
      END IF;
      -- Bug 66984 Begin,Added the line for Budget_Template_API.Is_Period_Matching() method call to stop loading values from templates which don't have matching periods
      -- To handle multiple Budget Templates the single fetch was put inside a loop
      stmt_bp_call_ := 'SELECT company, budget_process_id, budget_template_id
                        FROM   budget_template_tab
                        WHERE  scorecard = :scorecard
                        AND    Budget_Process_API.Get_Environment(company,budget_process_id) = :environment
                        AND    Budget_Template_API.Is_Period_Matching(company, budget_process_id, budget_template_id)= :value ';
      
      -- ifs_assert_safe iswalk 060111
      OPEN  get_budpro FOR  stmt_bp_call_ USING scorecard_, environment_,'TRUE';
      LOOP
         FETCH get_budpro INTO template_rec_;
         --Bug 66984 Begin,Added the if condition line and the else part
         IF  get_budpro%FOUND THEN
            IF ((template_rec_.company IS NULL) AND (attr_ IS NOT NULL)) THEN
                stmt_bp_call_ := 'SELECT company, budget_process_id, budget_structure_id, budget_node_id
                                  FROM   budget_node_tab
                                  WHERE  scorecard = :scorecard
                                  AND    Budget_Process_API.Get_Environment(company,
                                                                     budget_process_id) = :environment';

               -- ifs_assert_safe iswalk 060111
               OPEN  get_budpro_node FOR  stmt_bp_call_ USING scorecard_, environment_;
               FETCH get_budpro_node INTO node_rec_;
               CLOSE get_budpro_node;

               IF (node_rec_.company IS NOT NULL) THEN
                  --Load the value from Budget Node
                  dummy_ := 'NODE';
                  stmt_bp_call_ := 'BEGIN
                                    Budget_Node_API.Export_Planned_Values(:company,
                                                                       :budget_process_id,
                                                                       :budget_structure_id,
                                                                       :budget_node_id,
                                                                       :record_type,
                                                                       :attr);
                              END;';
                  -- ifs_assert_safe iswalk 060111
                  EXECUTE IMMEDIATE stmt_bp_call_ USING  IN node_rec_.company,
                                                   IN node_rec_.budget_process_id,
                                                   IN node_rec_.budget_structure_id,
                                                   IN node_rec_.budget_node_id,
                                                   IN dummy_,
                                                   IN attr_;
               ELSE
                  Error_SYS.Appl_General(lu_name_, 'BUSPERSCOIPNOBUD: Selected scorecard object is not connected to any budget template or budget node');
               END IF;
            ELSIF (attr_ IS NOT NULL) THEN
            --Load the value from Budget Template
               stmt_bp_call_ := 'BEGIN
                                 Budget_Template_API.Export_Planned_Values(:company,
                                                                        :budget_process_id,
                                                                        :budget_template_id,
                                                                        :attr);
                              END;';
            -- ifs_assert_safe iswalk 060111
               EXECUTE IMMEDIATE stmt_bp_call_ USING  IN template_rec_.company,
                                                IN template_rec_.budget_process_id,
                                                IN template_rec_.budget_template_id,
                                                IN attr_;
            END IF;
            IF (attr_ IS NOT NULL) THEN
               Import_Fin_Values(environment_,
                                 scorecard_,
                                 year_,
                                 version_,
                                 scorecard_object_);
            END IF;
         ELSE
            CLOSE get_budpro;
            EXIT;
         END IF;
         --Bug 66984 End
      END LOOP;
      --Bug 66984 End
   END IF;
      
END Load_Planned_Values;

FUNCTION Get_No_Of_Periods (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN NUMBER
IS
   no_of_periods_ NUMBER  := 0;
   rec_           &TABLE.%ROWTYPE;

   CURSOR get_record IS
      SELECT *
      FROM   &TABLE
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    scorecard_object = scorecard_object_;
BEGIN
   OPEN  get_record;
   FETCH get_record INTO rec_;
   CLOSE get_record;

   IF (rec_.p1_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p2_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p3_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p4_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p5_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p6_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p7_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p8_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p9_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p10_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p11_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   IF (rec_.p12_key IS NOT NULL) THEN
      no_of_periods_ := no_of_periods_ + 1;
   END IF;

   RETURN no_of_periods_;
END Get_No_Of_Periods;

PROCEDURE Import_Fin_Values(
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2)
IS
   TYPE GetTemplateNode IS REF CURSOR;
   get_budpro           GetTemplateNode;
   -- Bug 71089, Begin
   get_measure_acc      GetTemplateNode;      
   -- Bug 71089, End
   TYPE BudTemplateRec  IS RECORD (company VARCHAR2(60),
                                   budget_process_id VARCHAR2(30),
                                   budget_template_id VARCHAR2(60));
   template_rec_        BudTemplateRec;
   TYPE BudNodeRec      IS RECORD (company VARCHAR2(60),
                                   budget_process_id VARCHAR2(30),
                                   budget_structure_id VARCHAR2(90),
                                   budget_node_id VARCHAR2(90));
   node_rec_            BudNodeRec;
   TYPE Totals          IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

   name_               VARCHAR2(30);
   mea_name_           VARCHAR2(30);
   value_              VARCHAR2(2000);
   mea_value_          VARCHAR2(2000);
   stmt_bp_call_       VARCHAR2(2000);
   -- Bug 71089, Begin
   stmt_bp_temp_call_  VARCHAR2(2000);
   -- Bug 71089, End
   attr_               VARCHAR2(2000);
   current_            VARCHAR2(2000);
   p_value_attr_       VARCHAR2(2000);
   cum_val_attr_       VARCHAR2(4000);
   info_               VARCHAR2(2000);
   objversion_         VARCHAR2(2000);

   measure_attr_       VARCHAR2(32000);
   ptr_                NUMBER;
   mea_ptr_            NUMBER;
   totals_tab          Totals;

   rec_                &VIEW.%ROWTYPE;
   temp_rec_           &VIEW.%ROWTYPE;

   -- Bug 68118, Begin
   company_            VARCHAR2(20);
   budget_process_id_  VARCHAR2(10) ;
   budget_template_id_ VARCHAR2(20);
   item_value_id_      VARCHAR2(20);
   temp_measure_       VARCHAR2(10);
   -- Bug 68118, End

   CURSOR get_keys IS
      SELECT *
      FROM   &VIEW
      WHERE  environment      = environment_
      AND    scorecard        = scorecard_
      AND    year             = year_
      AND    version          = version_
      AND    'AUTOFIN'        = Scorecard_Measure_API.Get_Measure_Update_Type_Db(scorecard_object);
   CURSOR get_measure_accounts IS
      SELECT account
      FROM   bp_measure_accounts_tab
      WHERE  measure = current_;
     
   -- Bug 68118, Begin
   -- Bug 71089, Begin
   -- The cursor get_measure_acc was removed 
   -- Bug 71089, End
   -- Bug 68118, End
   
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Import_Fin_Values');

   IF ( bp_installed_ ) THEN
      Client_SYS.Clear_Attr(attr_);

      -- Bug 71089, Begin
      stmt_bp_temp_call_ := 'SELECT item_value_id 
                             FROM   budget_template_row_tab
                             WHERE  company = :company
                             AND    budget_process_id = :budget_process_id
                             AND    budget_template_id = :budget_template_id
                             AND    item_value_id = :item_value_id';

      -- ifs_assert_safe makrlk 080205
      -- Bug 71089, End

      OPEN  get_keys;
      FETCH get_keys INTO temp_rec_;
      CLOSE get_keys;

      IF (temp_rec_.p1_key IS NOT NULL) THEN
         temp_rec_.p1_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p1_key);
         Client_SYS.Add_To_Attr('P1_KEY',
                                temp_rec_.p1_key,
                                attr_);
      END IF;

      IF (temp_rec_.p2_key IS NOT NULL) THEN
         temp_rec_.p2_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p2_key);
         Client_SYS.Add_To_Attr('P2_KEY',
                                temp_rec_.p2_key,
                                attr_);
      END IF;

      IF (temp_rec_.p3_key IS NOT NULL) THEN
         temp_rec_.p3_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p3_key);
         Client_SYS.Add_To_Attr('P3_KEY',
                                temp_rec_.p3_key,
                                attr_);
      END IF;

      IF (temp_rec_.p4_key IS NOT NULL) THEN
         temp_rec_.p4_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p4_key);
         Client_SYS.Add_To_Attr('P4_KEY',
                                temp_rec_.p4_key,
                                attr_);
      END IF;

      IF (temp_rec_.p5_key IS NOT NULL) THEN
         temp_rec_.p5_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p5_key);
         Client_SYS.Add_To_Attr('P5_KEY',
                                temp_rec_.p5_key,
                                attr_);
      END IF;

      IF (temp_rec_.p6_key IS NOT NULL) THEN
         temp_rec_.p6_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p6_key);
         Client_SYS.Add_To_Attr('P6_KEY',
                                temp_rec_.p6_key,
                                attr_);
      END IF;

      IF (temp_rec_.p7_key IS NOT NULL) THEN
         temp_rec_.p7_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p7_key);
         Client_SYS.Add_To_Attr('P7_KEY',
                                temp_rec_.p7_key,
                                attr_);
      END IF;

      IF (temp_rec_.p8_key IS NOT NULL) THEN
         temp_rec_.p8_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p8_key);
         Client_SYS.Add_To_Attr('P8_KEY',
                                temp_rec_.p8_key,
                                attr_);
      END IF;

      IF (temp_rec_.p9_key IS NOT NULL) THEN
         temp_rec_.p9_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                            temp_rec_.p9_key);
         Client_SYS.Add_To_Attr('P9_KEY',
                                temp_rec_.p9_key,
                                attr_);
      END IF;

      IF (temp_rec_.p10_key IS NOT NULL) THEN
         temp_rec_.p10_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                             temp_rec_.p10_key);
         Client_SYS.Add_To_Attr('P10_KEY',
                                temp_rec_.p10_key,
                                attr_);
      END IF;

      IF (temp_rec_.p11_key IS NOT NULL) THEN
         temp_rec_.p11_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                             temp_rec_.p11_key);
         Client_SYS.Add_To_Attr('P11_KEY',
                                temp_rec_.p11_key,
                                attr_);
      END IF;

      IF (temp_rec_.p12_key IS NOT NULL) THEN
         temp_rec_.p12_key := Scorecard_Period_API.Get_Period_Match_Identity(environment_,
                                                                             temp_rec_.p12_key);
         Client_SYS.Add_To_Attr('P12_KEY',
                                temp_rec_.p12_key,
                                attr_);
      END IF;

      IF (attr_ IS NOT NULL) THEN

         stmt_bp_call_ := 'SELECT company, budget_process_id, budget_template_id
                           FROM   budget_template_tab
                           WHERE  scorecard = :scorecard
                           AND    Budget_Process_API.Get_Environment(company,
                                                                     budget_process_id) = :environment';

         -- ifs_assert_safe iswalk 060220
         OPEN  get_budpro FOR  stmt_bp_call_ USING scorecard_, environment_;
         FETCH get_budpro INTO template_rec_;
         CLOSE get_budpro;

         Client_SYS.Clear_Attr(measure_attr_); 
         IF (template_rec_.company IS NOT NULL) THEN

            FOR rec_ IN get_keys LOOP
               Client_SYS.Clear_Attr(cum_val_attr_);

               FOR i IN 0..11 LOOP
                  totals_tab(i) := 0;
               END LOOP;

               current_ := rec_.scorecard_object;

               Client_SYS.Add_To_Attr('OBJECT_ID',current_,measure_attr_); 
               mea_ptr_ := NULL;

               --the call has been made from busper side which means only selected measures should be updated
               WHILE (Client_SYS.Get_Next_From_Attr(scorecard_object_, mea_ptr_, mea_name_, mea_value_)) LOOP

                  IF (current_ = mea_value_) THEN
                     --get the list of accounts connected to the current measure...
                     FOR acc_rec_ IN get_measure_accounts LOOP
                      -- Bug 68118, Begin
                        company_            := template_rec_.company;
                        budget_process_id_  := template_rec_.budget_process_id;
                        budget_template_id_ := template_rec_.budget_template_id;
                        item_value_id_      := acc_rec_.account; 
                      
                        -- Bug 71089, Begin. change the OPEN line
                        -- ifs_assert_safe nsillk 20080318
                        OPEN  get_measure_acc FOR stmt_bp_temp_call_ USING company_, budget_process_id_, budget_template_id_, item_value_id_;                      
                        FETCH get_measure_acc INTO temp_measure_;
                        CLOSE get_measure_acc;
                        -- Bug 71089, End
                        -- Bug 68118, End

                        -- Bug 68118, Begin added IF condition

                        IF (temp_measure_ = acc_rec_.account) THEN
                           stmt_bp_call_ := 'BEGIN
                                             :p_value_attr := Budget_Template_API.Get_Period_Fin_Values(:company,
                                                                                                        :budget_process_id,
                                                                                                        :budget_template_id,
                                                                                                        :account,
                                                                                                        :attr);
                                          END;';
                           -- ifs_assert_safe iswalk 060220
                           EXECUTE IMMEDIATE stmt_bp_call_ USING  OUT p_value_attr_,
                                                               IN  template_rec_.company,
                                                               IN  template_rec_.budget_process_id,
                                                               IN  template_rec_.budget_template_id,
                                                               IN  acc_rec_.account,
                                                               IN  attr_;
                           cum_val_attr_ := cum_val_attr_ || p_value_attr_;
                        END IF;
                        -- Bug 68118, End the IF condition  
                     END LOOP;
                  END IF;

               END LOOP;

               --the call has been made from budpro side which means all measures should be updated
               IF (scorecard_object_ IS NULL) THEN
                  --get the list of accounts connected to the current measure...
                  FOR acc_rec_ IN get_measure_accounts LOOP
                     -- Bug 68118, Begin
                     company_            := template_rec_.company;
                     budget_process_id_  := template_rec_.budget_process_id;
                     budget_template_id_ := template_rec_.budget_template_id;
                     item_value_id_      := acc_rec_.account; 
                      
                     -- Bug 71089, Begin. change the OPEN line
                     -- ifs_assert_safe nsillk 20080318
                     OPEN  get_measure_acc FOR stmt_bp_temp_call_ USING company_, budget_process_id_, budget_template_id_, item_value_id_;                      
                     FETCH get_measure_acc INTO temp_measure_;
                     CLOSE get_measure_acc;
                     -- Bug 71089, End
                     -- Bug 68118, End

                     -- Bug 68118, Begin added IF condition
                     IF (temp_measure_ = acc_rec_.account) THEN
                        stmt_bp_call_ := 'BEGIN
                                          :p_value_attr := Budget_Template_API.Get_Period_Fin_Values(:company,
                                                                                                     :budget_process_id,
                                                                                                     :budget_template_id,
                                                                                                     :account,
                                                                                                     :attr);
                                       END;';
                        -- ifs_assert_safe iswalk 060220
                        EXECUTE IMMEDIATE stmt_bp_call_ USING  OUT p_value_attr_,
                                                            IN  template_rec_.company,
                                                            IN  template_rec_.budget_process_id,
                                                            IN  template_rec_.budget_template_id,
                                                            IN  acc_rec_.account,
                                                            IN  attr_;
                        cum_val_attr_ := cum_val_attr_ || p_value_attr_;
                     END IF;
                     -- Bug 68118, End the IF condition

                  END LOOP;
               END IF;

               IF (cum_val_attr_ IS NOT NULL) THEN

                  ptr_ := NULL;

                  WHILE (Client_SYS.Get_Next_From_Attr(cum_val_attr_, ptr_, name_, value_)) LOOP

                     IF (temp_rec_.p1_key = name_) THEN
                        totals_tab(0) := totals_tab(0) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p2_key = name_) THEN
                        totals_tab(1) := totals_tab(1) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p3_key = name_) THEN
                        totals_tab(2) := totals_tab(2) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p4_key = name_) THEN
                        totals_tab(3) := totals_tab(3) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p5_key = name_) THEN
                        totals_tab(4) := totals_tab(4) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p6_key = name_) THEN
                        totals_tab(5) := totals_tab(5) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p7_key = name_) THEN
                        totals_tab(6) := totals_tab(6) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p8_key = name_) THEN
                        totals_tab(7) := totals_tab(7) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p9_key = name_) THEN
                        totals_tab(8) := totals_tab(8) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p10_key = name_) THEN
                        totals_tab(9) := totals_tab(9) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p11_key = name_) THEN
                        totals_tab(10) := totals_tab(10) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                     IF (temp_rec_.p12_key = name_) THEN
                        totals_tab(11) := totals_tab(11) + Client_SYS.Attr_Value_To_Number(value_);
                     END IF;

                  END LOOP;

                  Client_SYS.Clear_Attr(cum_val_attr_);

                  FOR i IN 0..11  LOOP

                     -- Bug 68118, Begin remove the the IF condition
                     Client_SYS.Add_To_Attr('P'|| (i + 1) || '_VALUE', totals_tab(i), cum_val_attr_);
                     -- Bug 68118, End

                  END LOOP;

                  objversion_ := rec_.objversion;
                  Client_SYS.Add_To_Attr('FROM_BUDPRO', 'TRUE', cum_val_attr_);
                  Modify__(info_, rec_.objid, objversion_, cum_val_attr_, 'DO');
                  Calculate_Year_Value(environment_,
                                       scorecard_,
                                       year_,
                                       version_,
                                       rec_.scorecard_object);

               END IF;

            END LOOP;

         Calc_Measure_From_Budpro (environment_ ,scorecard_,measure_attr_);
         END IF;

      END IF;

   END IF;
END Import_Fin_Values;
PROCEDURE Calc_Measure_From_Budpro (
   environment_ IN VARCHAR2,
   scorecard_   IN VARCHAR2,
   comp_attr_   IN VARCHAR2 )
IS
   ptr_                  NUMBER;
   count_                NUMBER;
   period_count_         NUMBER;

   name_                 VARCHAR2(30);
   value_                VARCHAR2(2000);
   level_type_val_       VARCHAR2(20);
   measure_version_      VARCHAR2(30);

   object_id_            scorecard_measure_tab.measure%TYPE;
   level_type_           scorecard_structure_tab.child_level_type%TYPE;
   year_                 scorecard_period_tab.year%TYPE;
   budget_version_       measure_version_tab.version%TYPE;

   CURSOR get_level_type IS
      SELECT child_level_type
      FROM   Scorecard_structure_tab
      WHERE  environment        = environment_
      AND    scorecard          = scorecard_
      AND    level_id           = object_id_;

   CURSOR get_measures_planform IS
      SELECT level_id,measure_calc_formula
      FROM   Scorecard_Structure_TAB
      WHERE  environment        = environment_
      AND    scorecard          = scorecard_
      AND    measure_calc_formula IS NOT NULL;

   CURSOR get_years IS
      SELECT DISTINCT year
      FROM   Scorecard_Period_TAB
      WHERE  environment        = environment_;

   CURSOR get_period_count IS
      SELECT COUNT(period)
      FROM   Scorecard_Period_TAB
      WHERE  environment        = environment_
      AND    year               = year_;

    TYPE MeasuresTable IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
    measures_tab        MeasuresTable ;



BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Calc_Measure_From_Budpro');
   ptr_ := NULL;

   WHILE ( Client_SYS.Get_Next_From_Attr(comp_attr_, ptr_, name_, value_) ) LOOP
      IF (name_ = 'OBJECT_ID') THEN
         object_id_ := value_;
      END IF;

      OPEN  get_level_type;
      FETCH get_level_type INTO level_type_;
      CLOSE get_level_type;

      IF(level_type_ = 'COMPONENT') THEN
         count_ := 0;
         FOR get_measures_planform_ IN get_measures_planform  LOOP
           IF( INSTR(get_measures_planform_.measure_calc_formula,object_id_) > 0) THEN
               measures_tab(count_) := get_measures_planform_.level_id;
           END IF;
         END LOOP;
         budget_version_ := Scorecard_Environment_API.Get_Budget_Version(environment_);

         IF( measures_tab.COUNT > 0 ) THEN

            FOR x IN measures_tab.FIRST..measures_tab.LAST LOOP
               FOR get_years_ IN get_years LOOP
                  year_    := get_years_.year;

                  OPEN  get_period_count;
                  FETCH get_period_count INTO period_count_;
                  CLOSE get_period_count;

                  IF( Check_Exist___ (environment_,scorecard_,year_,budget_version_,measures_tab(x))) THEN
                     Calculate_Measures (environment_,
                                         scorecard_,
                                         year_,
                                         budget_version_,
                                         measures_tab(x),
                                         period_count_,
                                         'TRUE' );
                  END IF;
               END LOOP;
            END LOOP;
         END IF;
      END IF;
   END LOOP;
END Calc_Measure_From_Budpro;


FUNCTION Get (
   environment_ IN VARCHAR2,
   scorecard_ IN VARCHAR2,
   year_ IN VARCHAR2,
   version_ IN VARCHAR2,
   scorecard_object_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
   CURSOR get_attr IS
      SELECT action, mea_state_change_date
      FROM &TABLE
      WHERE environment = environment_
      AND   scorecard = scorecard_
      AND   year = year_
      AND   version = version_
      AND   scorecard_object = scorecard_object_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get;
-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW2
UNDEFINE VIEW3
UNDEFINE VIEW4
UNDEFINE VIEW5
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJVERSION
UNDEFINE OBJSTATE
UNDEFINE OBJEVENTS
UNDEFINE STATE
-----------------------------------------------------------------------------
