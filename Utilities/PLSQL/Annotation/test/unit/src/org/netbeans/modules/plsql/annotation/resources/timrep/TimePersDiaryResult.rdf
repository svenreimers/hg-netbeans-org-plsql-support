-----------------------------------------------------------------------------
--
--  Logical unit: TimePersDiaryResultRep
--
--  Report:       TimePersDiaryResult
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TIME_PERS_DIARY_RESULT_RPI specification

CREATE OR REPLACE PACKAGE TIME_PERS_DIARY_RESULT_RPI AS

module_ CONSTANT VARCHAR2(6) := 'TIMREP';
lu_name_ CONSTANT VARCHAR2(25) := 'TimePersDiaryResultRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END TIME_PERS_DIARY_RESULT_RPI;
/
SHOW ERROR
SAVEPOINT A;
-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report view TIME_PERS_DIARY_RESULT_REP

CREATE OR REPLACE VIEW TIME_PERS_DIARY_RESULT_REP AS
SELECT NULL company_id,
       NULL display_type,
       NULL to_date,
       NULL from_date,
       NULL sup_emp_no,
       NULL emp_no,
       NULL emp_name,
       NULL account_date,
       NULL in_stamp,
       NULL in_pers_class,
       NULL out_stamp,
       NULL out_pers_class,
       NULL wage_code,
       NULL org_code,
       NULL wage_name,
       NULL total_time,
       NULL wage_grp
FROM   dual
WITH   read only;

COMMENT ON TABLE TIME_PERS_DIARY_RESULT_REP
   IS 'LU=TimePersDiaryResultRep^PROMPT=Time Pers Diary Result^MODULE=TIMREP^';

COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.company_id
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Company ID:^TITLE=Company ID^QUERY=Company ID:^QFLAGS=MCS--^QVALUE=:TIME_PERS_DIARY_RESULT_RPI.Default_Company_Id__^REF=PersonCompany^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.display_type
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Display Type:^TITLE=Display Type^QUERY=Display Type:^QFLAGS=MCS--^QVALUE=:TIME_PERS_DIARY_RESULT_RPI.Default_Display_Type__^ENUMERATE=Time_Pers_Report_Type_API.Enumerate^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.to_date
   IS 'FLAGS=A----^DATATYPE=DATE^PROMPT=To Date:^TITLE=To Date^QUERY=To Date:^QFLAGS=MCS--^QVALUE=:TIME_PERS_DIARY_RESULT_RPI.Default_Date__^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.from_date
   IS 'FLAGS=A----^DATATYPE=DATE^PROMPT=From Date:^TITLE=From Date^QUERY=From Date:^QFLAGS=MCS--^QVALUE=:TIME_PERS_DIARY_RESULT_RPI.Default_Date__^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.sup_emp_no
   IS 'FLAGS=A----^DATATYPE=STRING(11)^PROMPT=Sup Emp No:^TITLE=Sup Emp No^QUERY=Sup Emp No:^QFLAGS=-CS--^QVALUE=:TIME_PERS_DIARY_RESULT_RPI.Default_Sup_Emp_No__^REF=CompanyPers(company_id)^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.emp_no
   IS 'FLAGS=A----^DATATYPE=STRING(11)^PROMPT=Emp No:^TITLE=Emp No^QUERY=Emp No:^QFLAGS=-C-BL^REF=CompanyPers(company_id)^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.emp_name
   IS 'FLAGS=A----^DATATYPE=STRING(80)^PROMPT=Emp Name^TITLE=Emp Name^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.account_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^PROMPT=Account Date^TITLE=Account Date^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.in_stamp
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^PROMPT=In Stamp^TITLE=In Stamp^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.in_pers_class
   IS 'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=In Pers Class^TITLE=In Pers Class^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.out_stamp
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^PROMPT=Out Stamp^TITLE=Out Stamp^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.out_pers_class
   IS 'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Out Pers Class^TITLE=Out Pers Class^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.wage_code
   IS 'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Wage Code^TITLE=Wage Code^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.org_code
   IS 'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Org Code^TITLE=Org Code^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.wage_name
   IS 'FLAGS=A----^DATATYPE=STRING(40)^PROMPT=Wage Name^TITLE=Wage Name^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.total_time
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Time^TITLE=Total Time^';
COMMENT ON COLUMN TIME_PERS_DIARY_RESULT_REP.wage_grp
   IS 'FLAGS=A----^DATATYPE=STRING(40)^PROMPT=Wage Grp^TITLE=Wage Grp^';
ROLLBACK TO A;
-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('TIME_PERS_DIARY_RESULT_REP', 'TIMREP', 'TimePersDiaryResultRep', 'Time Pers Diary Result', 'dual', 'TIME_PERS_DIARY_RESULT_RPI..Execute_Report', 0);
   --Report_SYS.Define_Report_Layout_('TIME_PERS_DIARY_RESULT_REP', 'TimePersDiaryResultRep.xsl', 'Landscape', 'DYNAMIC', NULL, 'DESIGNER');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXCLOCKINGS', 'Clockings:');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXEMPLOYEE', 'Employee:');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXPERIOD', 'Period:');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXRESULT', 'Result:');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXHEADER', 'Time and Attendance Result');
   Report_SYS.Define_Report_Text_('TIME_PERS_DIARY_RESULT_REP', 'TXTOTALRESULT', 'Total:');
   Report_SYS.Refresh_('TIME_PERS_DIARY_RESULT_REP');
END;
/
ROLLBACK;
-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TIME_PERS_DIARY_RESULT_RPI implementation

CREATE OR REPLACE PACKAGE BODY TIME_PERS_DIARY_RESULT_RPI IS

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_               NUMBER;
   company_id_               VARCHAR2(20);
   display_type_             VARCHAR2(20);
   to_date_                  DATE;
   from_date_                DATE;
   sup_emp_no_               VARCHAR2(11);
   emp_no_                   VARCHAR2(11);
   
   xml_                      CLOB;

   CURSOR get_emp_detail IS
      SELECT
         to_date(NULL)   from_date,   
         to_date(NULL)   to_date,   
         NULL            emp_no,   
         NULL            emp_name
      FROM dual;

CURSOR get_clocking_detail IS
   SELECT
      to_date(NULL)   account_date,   
      to_date(NULL)   in_stamp,   
      NULL            in_pers_class,   
      to_date(NULL)   out_stamp,   
      NULL            out_pers_class,   
      NULL            wage_code,   
      NULL            org_code
   FROM dual;

CURSOR get_result_detail IS
   SELECT
      to_date(NULL)   account_date,   
      NULL            wage_code,   
      NULL            org_code,   
      NULL            wage_name,   
      to_number(NULL) total_time,   
      NULL            wage_grp
   FROM dual;

CURSOR get_total_result IS
   SELECT
      NULL            wage_code,   
      NULL            org_code,   
      NULL            wage_name,   
      to_number(NULL) total_time,   
      NULL            wage_grp
   FROM dual;

BEGIN
   General_SYS.Init_Method(lu_name_, 'TIME_PERS_DIARY_RESULT_RPI', 'Execute_Report');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));

   company_id_               := Client_SYS.Get_Item_Value('COMPANY_ID', parameter_attr_);
   display_type_             := Client_SYS.Get_Item_Value('DISPLAY_TYPE', parameter_attr_);
   to_date_                  := Client_SYS.Get_Item_Value('TO_DATE', parameter_attr_);
   from_date_                := Client_SYS.Get_Item_Value('FROM_DATE', parameter_attr_);
   sup_emp_no_               := Client_SYS.Get_Item_Value('SUP_EMP_NO', parameter_attr_);
   emp_no_                   := Client_SYS.Get_Item_Value('EMP_NO', parameter_attr_);

   Xml_Record_Writer_SYS.Create_Report_Header(xml_,'TIME_PERS_DIARY_RESULT_REP','Time Pers Diary Result');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'EMP_DETAILS');
   FOR emp_detail_ IN get_emp_detail LOOP
      Xml_Record_Writer_SYS.Start_Element(xml_, 'EMP_DETAIL');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FROM_DATE', emp_detail_.from_date);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_DATE', emp_detail_.to_date);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'EMP_NO', emp_detail_.emp_no);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'EMP_NAME', emp_detail_.emp_name);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'CLOCKINGS');
      FOR clocking_ IN get_clocking LOOP
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CLOCKING');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CLOCKING_DETAILS');
         FOR clocking_detail_ IN get_clocking_detail LOOP
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CLOCKING_DETAIL');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACCOUNT_DATE', clocking_detail_.account_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IN_STAMP', clocking_detail_.in_stamp);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IN_PERS_CLASS', clocking_detail_.in_pers_class);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUT_STAMP', clocking_detail_.out_stamp);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUT_PERS_CLASS', clocking_detail_.out_pers_class);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_CODE', clocking_detail_.wage_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORG_CODE', clocking_detail_.org_code);
            Xml_Record_Writer_SYS.End_Element(xml_, 'CLOCKING_DETAIL');
         END LOOP;
         Xml_Record_Writer_SYS.End_Element(xml_, 'CLOCKING_DETAILS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CLOCKING');
      END LOOP;
      Xml_Record_Writer_SYS.End_Element(xml_, 'CLOCKINGS');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'RESULTS');
      FOR result_ IN get_result LOOP
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RESULT');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RESULT_DETAILS');
         FOR result_detail_ IN get_result_detail LOOP
            Xml_Record_Writer_SYS.Start_Element(xml_, 'RESULT_DETAIL');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACCOUNT_DATE', result_detail_.account_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_CODE', result_detail_.wage_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORG_CODE', result_detail_.org_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_NAME', result_detail_.wage_name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_TIME', result_detail_.total_time);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_GRP', result_detail_.wage_grp);
            Xml_Record_Writer_SYS.End_Element(xml_, 'RESULT_DETAIL');
         END LOOP;
         Xml_Record_Writer_SYS.End_Element(xml_, 'RESULT_DETAILS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'RESULT');
      END LOOP;
      Xml_Record_Writer_SYS.End_Element(xml_, 'RESULTS');
      Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_RESULTS');
      FOR total_result_ IN get_total_result LOOP
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_RESULT');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_CODE', total_result_.wage_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORG_CODE', total_result_.org_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_NAME', total_result_.wage_name);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_TIME', total_result_.total_time);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAGE_GRP', total_result_.wage_grp);
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_RESULT');
      END LOOP;
      Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_RESULTS');
      Xml_Record_Writer_SYS.End_Element(xml_, 'EMP_DETAIL');
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'EMP_DETAILS');
   Xml_Record_Writer_SYS.End_Element(xml_,'TIME_PERS_DIARY_RESULT_REP');

   Report_SYS.Finish_Xml_Report('TIME_PERS_DIARY_RESULT_REP',result_key_,xml_);
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END TIME_PERS_DIARY_RESULT_RPI;
/
COMMIT;
SHOW ERROR