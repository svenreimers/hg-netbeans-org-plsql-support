-----------------------------------------------------------------------------
--
--  Logical unit: ShopOrderProp
--
--  Purpose:
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

DEFINE MODULE        = SHPORD
DEFINE LU            = ShopOrderProp
DEFINE TABLE         = SHOP_ORDER_PROP_TAB
DEFINE VIEW          = SHOP_ORDER_PROP
DEFINE PKG           = SHOP_ORDER_PROP_API

DEFINE OBJID         = rowid
DEFINE OBJVERSION    = "ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))"
DEFINE OBJSTATE      = rowstate
DEFINE OBJEVENTS     = &PKG..Finite_State_Events__(&OBJSTATE)
DEFINE STATE         = &PKG..Finite_State_Decode__(&OBJSTATE)

-----------------------------------------------------------------------------
-------------------- VIEWS FOR SELECTS --------------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &VIEW view

CREATE OR REPLACE VIEW &VIEW AS
SELECT proposal_no                    proposal_no,
       part_no                        part_no,
       contract                       contract,
       counter                        counter,
       org_counter                    org_counter,
       revised_due_date               revised_due_date,
       org_due_date                   org_due_date,
       org_qty_due                    org_qty_due,
       period_no                      period_no,
       plan_order_rec                 plan_order_rec,
       prop_start_date                prop_start_date,
       date_entered                   date_entered,
       source                         source,
       note_text                      note_text,
       Shop_Proposal_Type_API.Decode(shop_proposal_type) shop_proposal_type,
       shop_proposal_type             shop_proposal_type_db,
       alternative_no                 alternative_no,
       header_req_no                  header_req_no,
       balance_id                     balance_id,
       eng_chg_level                  eng_chg_level,
       shrinkage_factor               shrinkage_factor,
       process_type                   process_type,
       serial_begin                   serial_begin,
       serial_end                     serial_end,
       proposed_location              proposed_location,
       condition_code                 condition_code,
       Part_Ownership_API.Decode(part_ownership) part_ownership,
       part_ownership                 part_ownership_db,
       owning_customer_no             owning_customer_no,
       activity_seq                   activity_seq,
       project_id                     project_id,
       Fnd_Boolean_API.Decode(alternate_component_used) alternate_component_used,
       alternate_component_used       alternate_component_used_db,
       &OBJID                         objid,
       &OBJVERSION                    objversion,
       &OBJSTATE                      objstate,
       &OBJEVENTS                     objevents,
       &STATE                         state
FROM   shop_order_prop_tab
WITH   read only;

COMMENT ON TABLE &VIEW
   IS 'LU=&LU^PROMPT=Shop Order Prop^MODULE=&MODULE^';

COMMENT ON COLUMN &VIEW..proposal_no
   IS 'FLAGS=KMI-L^DATATYPE=STRING(12)^PROMPT=Requisition No^';
COMMENT ON COLUMN &VIEW..part_no
   IS 'FLAGS=AMI-L^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^REF=InventoryPart(contract)^';
COMMENT ON COLUMN &VIEW..contract
   IS 'FLAGS=AMI-L^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^';
COMMENT ON COLUMN &VIEW..counter
   IS 'FLAGS=AMIU-^DATATYPE=NUMBER(4)^PROMPT=Counter^';
COMMENT ON COLUMN &VIEW..org_counter
   IS 'FLAGS=AMI--^DATATYPE=NUMBER(4)^PROMPT=Org Counter^';
COMMENT ON COLUMN &VIEW..revised_due_date
   IS 'FLAGS=AMIUL^DATATYPE=DATE/DATE^PROMPT=Revised Due Date^';
COMMENT ON COLUMN &VIEW..org_due_date
   IS 'FLAGS=AMI-L^DATATYPE=DATE/DATE^PROMPT=Org Due Date^';
COMMENT ON COLUMN &VIEW..org_qty_due
   IS 'FLAGS=AMI-L^DATATYPE=NUMBER^PROMPT=Org Qty Due^';
COMMENT ON COLUMN &VIEW..period_no
   IS 'FLAGS=A-IU-^DATATYPE=NUMBER(3)^PROMPT=Period No^';
COMMENT ON COLUMN &VIEW..plan_order_rec
   IS 'FLAGS=AMIUL^DATATYPE=NUMBER^PROMPT=Plan Order Rec^';
COMMENT ON COLUMN &VIEW..prop_start_date
   IS 'FLAGS=AMIUL^DATATYPE=DATE/DATE^PROMPT=Prop Start Date^';
COMMENT ON COLUMN &VIEW..date_entered
   IS 'FLAGS=AMIU-^DATATYPE=DATE/DATE^PROMPT=Date Entered^';
COMMENT ON COLUMN &VIEW..source
   IS 'FLAGS=A-IU-^DATATYPE=STRING(100)^PROMPT=Source^';
COMMENT ON COLUMN &VIEW..note_text
   IS 'FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Note Text^';
COMMENT ON COLUMN &VIEW..shop_proposal_type
   IS 'FLAGS=AMIUL^DATATYPE=STRING(200)^PROMPT=Shop Proposal Type^REF=ShopProposalType^';
COMMENT ON COLUMN &VIEW..shop_proposal_type_db
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Shop Proposal Type^';
COMMENT ON COLUMN &VIEW..alternative_no
   IS 'FLAGS=AMIUL^DATATYPE=STRING(20)^PROMPT=Alternative No^REF=ManufStructureHead(contract,part_no,eng_chg_level)^';
COMMENT ON COLUMN &VIEW..header_req_no
   IS 'FLAGS=A--U-^DATATYPE=STRING(12)^PROMPT=Header Req No^';
COMMENT ON COLUMN &VIEW..balance_id
   IS 'FLAGS=A--U-^DATATYPE=NUMBER^PROMPT=Balance Id^';
COMMENT ON COLUMN &VIEW..eng_chg_level
   IS 'FLAGS=AMIUL^DATATYPE=STRING(2)^PROMPT=Revision No^REF=PartRevision(contract,part_no)^';
COMMENT ON COLUMN &VIEW..shrinkage_factor
   IS 'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Shrinkage Factor^';
COMMENT ON COLUMN &VIEW..process_type
   IS 'FLAGS=A-IU-^DATATYPE=STRING(6)/UPPERCASE^PROMPT=Process Type^REF=ShopOrderProcessType^';
COMMENT ON COLUMN &VIEW..serial_begin
   IS 'FLAGS=A-IU-^DATATYPE=STRING(50)^PROMPT=Serial Begin^';
COMMENT ON COLUMN &VIEW..serial_end
   IS 'FLAGS=A-IU-^DATATYPE=STRING(50)^PROMPT=Serial End^';
COMMENT ON COLUMN &VIEW..proposed_location
   IS 'FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Proposed Location^';
COMMENT ON COLUMN &VIEW..condition_code
   IS 'FLAGS=A-IUL^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Condition Code^REF=ConditionCode^';
COMMENT ON COLUMN &VIEW..part_ownership
   IS 'FLAGS=AMIU-^DATATYPE=STRING(200)^PROMPT=Part Ownership^REF=PartOwnership^';
COMMENT ON COLUMN &VIEW..part_ownership_db
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Part Ownership^';
COMMENT ON COLUMN &VIEW..owning_customer_no
   IS 'FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Owning Customer No^REF=CustOrdCustomer^';
COMMENT ON COLUMN &VIEW..activity_seq
   IS 'FLAGS=A-I-L^DATATYPE=NUMBER^PROMPT=Activity seq^REF=Activity^';
COMMENT ON COLUMN &VIEW..project_id
   IS 'FLAGS=A-I-L^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Project id^REF=Project^';
COMMENT ON COLUMN &VIEW..alternate_component_used
   IS 'FLAGS=AMIUL^DATATYPE=STRING(200)^PROMPT=Alternate Component Used^REF=FndBoolean^';
COMMENT ON COLUMN &VIEW..alternate_component_used_db
   IS 'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Alternate Component Used^';

-----------------------------------------------------------------------------
-------------------- PACKAGES FOR METHODS -----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- FINITE STATE DECLARATIONS ------------------------------
-----------------------------------------------------------------------------

state_separator_   CONSTANT VARCHAR2(1)   := Client_SYS.field_separator_;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHOD DECLARATIONS ---------
-----------------------------------------------------------------------------

PROCEDURE Do_Create_Shop_Order___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 );

PROCEDURE Refresh_Connected_Objects___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 );

FUNCTION Do_Cancel_Shop_Order___ (
   rec_  IN     &TABLE%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Lock_By_Id___
--    Client-support to lock a specific instance of the logical unit.
--
-- Lock_By_Keys___
--    Server support to lock a specific instance of the logical unit.
--
-- Get_Object_By_Id___
--    Get LU-record from the database with a specified object identity.
--
-- Get_Object_By_Keys___
--    Get LU-record from the database with specified key columns.
--
-- Check_Exist___
--    Check if a specific LU-instance already exist in the database.
--
-- Get_Id_Version_By_Keys___
--    Get the current OBJID and OBJVERSION for a specific LU-instance.
-----------------------------------------------------------------------------

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_changed EXCEPTION;
   row_deleted EXCEPTION;
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        &TABLE%ROWTYPE;
   dummy_      NUMBER;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE &OBJID = objid_
      AND   &OBJVERSION = objversion_
      FOR UPDATE NOWAIT;
   CURSOR exist_control IS
      SELECT 1
      FROM  &TABLE
      WHERE &OBJID = objid_;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   END IF;
   CLOSE lock_control;
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RAISE row_changed;
   ELSE
      CLOSE exist_control;
      --RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Record_Locked(lu_name_);
   WHEN row_changed THEN
      Error_SYS.Record_Modified(lu_name_);
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   proposal_no_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   row_deleted EXCEPTION;
   rec_        &TABLE%ROWTYPE;
   CURSOR lock_control IS
      SELECT *
      FROM  &TABLE
      WHERE proposal_no = proposal_no_
      FOR UPDATE;
BEGIN
   OPEN lock_control;
   FETCH lock_control INTO rec_;
   IF (lock_control%FOUND) THEN
      CLOSE lock_control;
      RETURN rec_;
   ELSE
      CLOSE lock_control;
      RAISE row_deleted;
   END IF;
EXCEPTION
   WHEN row_deleted THEN
      Error_SYS.Record_Removed(lu_name_);
END Lock_By_Keys___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE &OBJID = objid_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   IF (getrec%NOTFOUND) THEN
      CLOSE getrec;
      Error_SYS.Record_Removed(lu_name_);
   END IF;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Id___;


FUNCTION Get_Object_By_Keys___ (
   proposal_no_ IN VARCHAR2 ) RETURN &TABLE%ROWTYPE
IS
   lu_rec_ &TABLE%ROWTYPE;
   CURSOR getrec IS
      SELECT *
      FROM  &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN getrec;
   FETCH getrec INTO lu_rec_;
   CLOSE getrec;
   RETURN(lu_rec_);
END Get_Object_By_Keys___;


FUNCTION Check_Exist___ (
   proposal_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM  &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   --RETURN(FALSE);
END Check_Exist___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   proposal_no_ IN VARCHAR2 )
IS
   CURSOR get_version IS
      SELECT &OBJID, &OBJVERSION
      FROM  &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_version;
   FETCH get_version INTO objid_, objversion_;
   CLOSE get_version;
END Get_Id_Version_By_Keys___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION FINITE STATE MACHINE --------------------
-----------------------------------------------------------------------------
-- Finite_State_Set___
--    Updates the finite state indicator for an existing LU-instance.
--
-- Finite_State_Machine___
--    Processes an event by:
--    1. Fetching the current state
--    2. Evaluating any conditions for given event at current state
--    3. executing any exit code for the old state
--    4. Performing any action associated with given event
--    5. update the database to the new state
--    6. execute any entry code for the new state
--    7. Executing a state change to the new state
--
-- Finite_State_Add_To_Attr___
--    Adds the current state and allowed events to the attribute string.
--
-- Finite_State_Init___
--    Sets the initial finite state indicator for an existing LU-instance
--    and processes any automatic events.
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
BEGIN
   rec_.rowversion := sysdate;
   UPDATE shop_order_prop_tab
      SET &OBJSTATE = state_,
          rowversion = rec_.rowversion
      WHERE proposal_no = rec_.proposal_no;
   rec_.rowstate := state_;
END Finite_State_Set___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT &TABLE%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.rowstate;
   IF (state_ IS NULL) THEN
      IF (event_ IS NULL) THEN
         Finite_State_Set___(rec_, 'ProposalCreated');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'ProposalCreated') THEN
      IF (event_ = 'CreateShopOrder') THEN
         Do_Create_Shop_Order___(rec_, attr_);
         Refresh_Connected_Objects___(rec_, attr_);
         Finite_State_Set___(rec_, 'ShopOrderCreated');
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'ShopOrderCreated') THEN
      IF (event_ = 'CancelShopOrder') THEN
         IF (Do_Cancel_Shop_Order___(rec_)) THEN
            Refresh_Connected_Objects___(rec_, attr_);
            Finite_State_Set___(rec_, 'ProposalCreated');
         END IF;
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSE
      Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
   END IF;
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   state_ := rec_.rowstate;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   state_ VARCHAR2(30);
BEGIN
   Finite_State_Machine___(rec_, NULL, attr_);
   Finite_State_Add_To_Attr___(rec_, attr_);
END Finite_State_Init___;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('ProposalCreated^ShopOrderCreated^');
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('ProposalCreated^ShopOrderCreated^');
END Get_Client_Values___;

-----------------------------------------------------------------------------
-------------------- PRIVATE FINITE STATE MACHINE ---------------------------
-----------------------------------------------------------------------------
-- Finite_State_Decode__
--   Returns the client equivalent for any database representation of
--   a state name = objstate.
--
-- Finite_State_Encode__
--   Returns the database equivalent for any client representation of
--   a state name = state.
--
-- Enumerate_States__
--   Returns a list of all possible finite states in client terminology.
--
-- Enumerate_States_Db__
--   Returns a list of all possible finite states in database terminology.
--
-- Finite_State_Events__
--   Returns a list of allowed events for a given state
--   NOTE! Regardless of conditions if not otherwize encoded
--
-- Enumerate_Events__
--   Returns a list of all possible events.
-----------------------------------------------------------------------------

FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
END Finite_State_Decode__;


FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
END Finite_State_Encode__;


PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
END Enumerate_States__;


PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
BEGIN
   db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
END Enumerate_States_Db__;


FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'ProposalCreated') THEN
      RETURN 'CreateShopOrder^';
   ELSIF (db_state_ = 'ShopOrderCreated') THEN
      RETURN 'CancelShopOrder^';
   ELSE
      --RETURN NULL;
   END IF;
END Finite_State_Events__;


PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'CancelShopOrder^CreateShopOrder^';
END Enumerate_Events__;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR INSERT -----------------
-----------------------------------------------------------------------------
-- Prepare_Insert___
--    Set all default values for a new instance (ON-NEW-RECORD) of this
--    logical unit by calling procedure Add_Attr.
--
-- Unpack_Check_Insert___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before creation of the new object.
--
-- Insert___
--    Insert a new LU-instance into the database and return the values
--    for OBJID and OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(attr_);
END Prepare_Insert___;


PROCEDURE Unpack_Check_Insert___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'PROPOSAL_NO') THEN
         newrec_.proposal_no := value_;
      ELSIF (name_ = 'PART_NO') THEN
         newrec_.part_no := value_;
         Inventory_Part_API.Exist(newrec_.part_no, newrec_.part_no);
      ELSIF (name_ = 'CONTRACT') THEN
         newrec_.contract := value_;
      ELSIF (name_ = 'COUNTER') THEN
         newrec_.counter := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ORG_COUNTER') THEN
         newrec_.org_counter := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'REVISED_DUE_DATE') THEN
         newrec_.revised_due_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'ORG_DUE_DATE') THEN
         newrec_.org_due_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'ORG_QTY_DUE') THEN
         newrec_.org_qty_due := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'PERIOD_NO') THEN
         newrec_.period_no := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'PLAN_ORDER_REC') THEN
         newrec_.plan_order_rec := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'PROP_START_DATE') THEN
         newrec_.prop_start_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'DATE_ENTERED') THEN
         newrec_.date_entered := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'SOURCE') THEN
         newrec_.source := value_;
      ELSIF (name_ = 'NOTE_TEXT') THEN
         newrec_.note_text := value_;
      ELSIF (name_ = 'SHOP_PROPOSAL_TYPE') THEN
         newrec_.shop_proposal_type := Shop_Proposal_Type_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Shop_Proposal_Type_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'SHOP_PROPOSAL_TYPE_DB') THEN
         newrec_.shop_proposal_type := value_;
         IF (value_ IS NOT NULL) THEN
            Shop_Proposal_Type_API.Exist_Db(value_);
         END IF;
      ELSIF (name_ = 'ALTERNATIVE_NO') THEN
         newrec_.alternative_no := value_;
         Manuf_Structure_Head_API.Exist(newrec_.alternative_no, newrec_.alternative_no, newrec_.alternative_no, newrec_.alternative_no);
      ELSIF (name_ = 'HEADER_REQ_NO') THEN
         Error_SYS.Item_Insert(lu_name_, 'HEADER_REQ_NO');
      ELSIF (name_ = 'BALANCE_ID') THEN
         Error_SYS.Item_Insert(lu_name_, 'BALANCE_ID');
      ELSIF (name_ = 'ENG_CHG_LEVEL') THEN
         newrec_.eng_chg_level := value_;
         Part_Revision_API.Exist(newrec_.eng_chg_level, newrec_.eng_chg_level, newrec_.eng_chg_level);
      ELSIF (name_ = 'SHRINKAGE_FACTOR') THEN
         Error_SYS.Item_Insert(lu_name_, 'SHRINKAGE_FACTOR');
      ELSIF (name_ = 'PROCESS_TYPE') THEN
         newrec_.process_type := value_;
        IF (value_ IS NOT NULL) THEN
            Shop_Order_Process_Type_API.Exist(newrec_.process_type);
         END IF;
      ELSIF (name_ = 'SERIAL_BEGIN') THEN
         newrec_.serial_begin := value_;
      ELSIF (name_ = 'SERIAL_END') THEN
         newrec_.serial_end := value_;
      ELSIF (name_ = 'PROPOSED_LOCATION') THEN
         newrec_.proposed_location := value_;
      ELSIF (name_ = 'CONDITION_CODE') THEN
         newrec_.condition_code := value_;
        IF (value_ IS NOT NULL) THEN
            Condition_Code_API.Exist(newrec_.condition_code);
         END IF;
      ELSIF (name_ = 'PART_OWNERSHIP') THEN
         newrec_.part_ownership := Part_Ownership_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Part_Ownership_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'PART_OWNERSHIP_DB') THEN
         newrec_.part_ownership := value_;
         IF (value_ IS NOT NULL) THEN
            Part_Ownership_API.Exist_Db(value_);
         END IF;
      ELSIF (name_ = 'OWNING_CUSTOMER_NO') THEN
         newrec_.owning_customer_no := value_;
        IF (value_ IS NOT NULL) THEN
            Cust_Ord_Customer_API.Exist(newrec_.owning_customer_no);
         END IF;
      ELSIF (name_ = 'ACTIVITY_SEQ') THEN
         newrec_.activity_seq := Client_SYS.Attr_Value_To_Number(value_);
        IF (value_ IS NOT NULL) THEN
            Activity_API.Exist(newrec_.activity_seq);
         END IF;
      ELSIF (name_ = 'PROJECT_ID') THEN
         newrec_.project_id := value_;
        IF (value_ IS NOT NULL) THEN
            Project_API.Exist(newrec_.project_id);
         END IF;
      ELSIF (name_ = 'ALTERNATE_COMPONENT_USED') THEN
         newrec_.alternate_component_used := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Fnd_Boolean_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'ALTERNATE_COMPONENT_USED_DB') THEN
         newrec_.alternate_component_used := value_;
         IF (value_ IS NOT NULL) THEN
            Fnd_Boolean_API.Exist_Db(value_);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'PROPOSAL_NO', newrec_.proposal_no);
   Error_SYS.Check_Not_Null(lu_name_, 'PART_NO', newrec_.part_no);
   Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
   Error_SYS.Check_Not_Null(lu_name_, 'COUNTER', newrec_.counter);
   Error_SYS.Check_Not_Null(lu_name_, 'ORG_COUNTER', newrec_.org_counter);
   Error_SYS.Check_Not_Null(lu_name_, 'REVISED_DUE_DATE', newrec_.revised_due_date);
   Error_SYS.Check_Not_Null(lu_name_, 'ORG_DUE_DATE', newrec_.org_due_date);
   Error_SYS.Check_Not_Null(lu_name_, 'ORG_QTY_DUE', newrec_.org_qty_due);
   Error_SYS.Check_Not_Null(lu_name_, 'PLAN_ORDER_REC', newrec_.plan_order_rec);
   Error_SYS.Check_Not_Null(lu_name_, 'PROP_START_DATE', newrec_.prop_start_date);
   Error_SYS.Check_Not_Null(lu_name_, 'DATE_ENTERED', newrec_.date_entered);
   Error_SYS.Check_Not_Null(lu_name_, 'SHOP_PROPOSAL_TYPE', newrec_.shop_proposal_type);
   Error_SYS.Check_Not_Null(lu_name_, 'ALTERNATIVE_NO', newrec_.alternative_no);
   Error_SYS.Check_Not_Null(lu_name_, 'ENG_CHG_LEVEL', newrec_.eng_chg_level);
   Error_SYS.Check_Not_Null(lu_name_, 'PART_OWNERSHIP', newrec_.part_ownership);
   Error_SYS.Check_Not_Null(lu_name_, 'ALTERNATE_COMPONENT_USED', newrec_.alternate_component_used);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   INSERT
      INTO shop_order_prop_tab (
         proposal_no,
         part_no,
         contract,
         counter,
         org_counter,
         revised_due_date,
         org_due_date,
         org_qty_due,
         period_no,
         plan_order_rec,
         prop_start_date,
         date_entered,
         source,
         note_text,
         shop_proposal_type,
         alternative_no,
         header_req_no,
         balance_id,
         eng_chg_level,
         shrinkage_factor,
         process_type,
         serial_begin,
         serial_end,
         proposed_location,
         condition_code,
         part_ownership,
         owning_customer_no,
         activity_seq,
         project_id,
         alternate_component_used,
         rowversion,
         rowstate)
      VALUES (
         newrec_.proposal_no,
         newrec_.part_no,
         newrec_.contract,
         newrec_.counter,
         newrec_.org_counter,
         newrec_.revised_due_date,
         newrec_.org_due_date,
         newrec_.org_qty_due,
         newrec_.period_no,
         newrec_.plan_order_rec,
         newrec_.prop_start_date,
         newrec_.date_entered,
         newrec_.source,
         newrec_.note_text,
         newrec_.shop_proposal_type,
         newrec_.alternative_no,
         newrec_.header_req_no,
         newrec_.balance_id,
         newrec_.eng_chg_level,
         newrec_.shrinkage_factor,
         newrec_.process_type,
         newrec_.serial_begin,
         newrec_.serial_end,
         newrec_.proposed_location,
         newrec_.condition_code,
         newrec_.part_ownership,
         newrec_.owning_customer_no,
         newrec_.activity_seq,
         newrec_.project_id,
         newrec_.alternate_component_used,
         newrec_.rowversion,
         newrec_.rowstate)
      RETURNING &OBJID INTO objid_;
   Finite_State_Init___(newrec_, attr_);
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Insert___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR UPDATE -----------------
-----------------------------------------------------------------------------
-- Unpack_Check_Update___
--    Unpack the attribute list, check all attributes from the client
--    and generate all default values before modifying the object.
--
-- Update___
--    Update an existing LU-instance in the database and return the
--    the new OBJVERSION.
-----------------------------------------------------------------------------

PROCEDURE Unpack_Check_Update___ (
   attr_   IN OUT VARCHAR2,
   newrec_ IN OUT &TABLE%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(2000);
BEGIN
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'PROPOSAL_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'PROPOSAL_NO');
      ELSIF (name_ = 'PART_NO') THEN
         Error_SYS.Item_Update(lu_name_, 'PART_NO');
      ELSIF (name_ = 'CONTRACT') THEN
         Error_SYS.Item_Update(lu_name_, 'CONTRACT');
      ELSIF (name_ = 'COUNTER') THEN
         newrec_.counter := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ORG_COUNTER') THEN
         Error_SYS.Item_Update(lu_name_, 'ORG_COUNTER');
      ELSIF (name_ = 'REVISED_DUE_DATE') THEN
         newrec_.revised_due_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'ORG_DUE_DATE') THEN
         Error_SYS.Item_Update(lu_name_, 'ORG_DUE_DATE');
      ELSIF (name_ = 'ORG_QTY_DUE') THEN
         Error_SYS.Item_Update(lu_name_, 'ORG_QTY_DUE');
      ELSIF (name_ = 'PERIOD_NO') THEN
         newrec_.period_no := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'PLAN_ORDER_REC') THEN
         newrec_.plan_order_rec := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'PROP_START_DATE') THEN
         newrec_.prop_start_date := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'DATE_ENTERED') THEN
         newrec_.date_entered := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'SOURCE') THEN
         newrec_.source := value_;
      ELSIF (name_ = 'NOTE_TEXT') THEN
         newrec_.note_text := value_;
      ELSIF (name_ = 'SHOP_PROPOSAL_TYPE') THEN
         newrec_.shop_proposal_type := Shop_Proposal_Type_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Shop_Proposal_Type_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'SHOP_PROPOSAL_TYPE_DB') THEN
         newrec_.shop_proposal_type := value_;
         IF (value_ IS NOT NULL) THEN
            Shop_Proposal_Type_API.Exist_Db(value_);
         END IF;
      ELSIF (name_ = 'ALTERNATIVE_NO') THEN
         newrec_.alternative_no := value_;
         Manuf_Structure_Head_API.Exist(newrec_.alternative_no, newrec_.alternative_no, newrec_.alternative_no, newrec_.alternative_no);
      ELSIF (name_ = 'HEADER_REQ_NO') THEN
         newrec_.header_req_no := value_;
      ELSIF (name_ = 'BALANCE_ID') THEN
         newrec_.balance_id := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF (name_ = 'ENG_CHG_LEVEL') THEN
         newrec_.eng_chg_level := value_;
         Part_Revision_API.Exist(newrec_.eng_chg_level, newrec_.eng_chg_level, newrec_.eng_chg_level);
      ELSIF (name_ = 'SHRINKAGE_FACTOR') THEN
         Error_SYS.Item_Update(lu_name_, 'SHRINKAGE_FACTOR');
      ELSIF (name_ = 'PROCESS_TYPE') THEN
         newrec_.process_type := value_;
        IF (value_ IS NOT NULL) THEN
            Shop_Order_Process_Type_API.Exist(newrec_.process_type);
         END IF;
      ELSIF (name_ = 'SERIAL_BEGIN') THEN
         newrec_.serial_begin := value_;
      ELSIF (name_ = 'SERIAL_END') THEN
         newrec_.serial_end := value_;
      ELSIF (name_ = 'PROPOSED_LOCATION') THEN
         newrec_.proposed_location := value_;
      ELSIF (name_ = 'CONDITION_CODE') THEN
         newrec_.condition_code := value_;
        IF (value_ IS NOT NULL) THEN
            Condition_Code_API.Exist(newrec_.condition_code);
         END IF;
      ELSIF (name_ = 'PART_OWNERSHIP') THEN
         newrec_.part_ownership := Part_Ownership_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Part_Ownership_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'PART_OWNERSHIP_DB') THEN
         newrec_.part_ownership := value_;
         IF (value_ IS NOT NULL) THEN
            Part_Ownership_API.Exist_Db(value_);
         END IF;
      ELSIF (name_ = 'OWNING_CUSTOMER_NO') THEN
         newrec_.owning_customer_no := value_;
        IF (value_ IS NOT NULL) THEN
            Cust_Ord_Customer_API.Exist(newrec_.owning_customer_no);
         END IF;
      ELSIF (name_ = 'ACTIVITY_SEQ') THEN
         Error_SYS.Item_Update(lu_name_, 'ACTIVITY_SEQ');
      ELSIF (name_ = 'PROJECT_ID') THEN
         Error_SYS.Item_Update(lu_name_, 'PROJECT_ID');
      ELSIF (name_ = 'ALTERNATE_COMPONENT_USED') THEN
         newrec_.alternate_component_used := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL) THEN
            Fnd_Boolean_API.Exist(value_);
         END IF;
      ELSIF (name_ = 'ALTERNATE_COMPONENT_USED_DB') THEN
         newrec_.alternate_component_used := value_;
         IF (value_ IS NOT NULL) THEN
            Fnd_Boolean_API.Exist_Db(value_);
         END IF;
      ELSE
         Error_SYS.Item_Not_Exist(lu_name_, name_, value_);
      END IF;
   END LOOP;
   Client_SYS.Clear_Attr(attr_);
   Error_SYS.Check_Not_Null(lu_name_, 'COUNTER', newrec_.counter);
   Error_SYS.Check_Not_Null(lu_name_, 'REVISED_DUE_DATE', newrec_.revised_due_date);
   Error_SYS.Check_Not_Null(lu_name_, 'PLAN_ORDER_REC', newrec_.plan_order_rec);
   Error_SYS.Check_Not_Null(lu_name_, 'PROP_START_DATE', newrec_.prop_start_date);
   Error_SYS.Check_Not_Null(lu_name_, 'DATE_ENTERED', newrec_.date_entered);
   Error_SYS.Check_Not_Null(lu_name_, 'SHOP_PROPOSAL_TYPE', newrec_.shop_proposal_type);
   Error_SYS.Check_Not_Null(lu_name_, 'ALTERNATIVE_NO', newrec_.alternative_no);
   Error_SYS.Check_Not_Null(lu_name_, 'ENG_CHG_LEVEL', newrec_.eng_chg_level);
   Error_SYS.Check_Not_Null(lu_name_, 'PART_OWNERSHIP', newrec_.part_ownership);
   Error_SYS.Check_Not_Null(lu_name_, 'ALTERNATE_COMPONENT_USED', newrec_.alternate_component_used);
EXCEPTION
   WHEN value_error THEN
      Error_SYS.Item_Format(lu_name_, name_, value_);
END Unpack_Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     &TABLE%ROWTYPE,
   newrec_     IN OUT &TABLE%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
BEGIN
   newrec_.rowversion := sysdate;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   IF by_keys_ THEN
      UPDATE shop_order_prop_tab
         SET proposal_no = newrec_.proposal_no,
             part_no = newrec_.part_no,
             contract = newrec_.contract,
             counter = newrec_.counter,
             org_counter = newrec_.org_counter,
             revised_due_date = newrec_.revised_due_date,
             org_due_date = newrec_.org_due_date,
             org_qty_due = newrec_.org_qty_due,
             period_no = newrec_.period_no,
             plan_order_rec = newrec_.plan_order_rec,
             prop_start_date = newrec_.prop_start_date,
             date_entered = newrec_.date_entered,
             source = newrec_.source,
             note_text = newrec_.note_text,
             shop_proposal_type = newrec_.shop_proposal_type,
             alternative_no = newrec_.alternative_no,
             header_req_no = newrec_.header_req_no,
             balance_id = newrec_.balance_id,
             eng_chg_level = newrec_.eng_chg_level,
             shrinkage_factor = newrec_.shrinkage_factor,
             process_type = newrec_.process_type,
             serial_begin = newrec_.serial_begin,
             serial_end = newrec_.serial_end,
             proposed_location = newrec_.proposed_location,
             condition_code = newrec_.condition_code,
             part_ownership = newrec_.part_ownership,
             owning_customer_no = newrec_.owning_customer_no,
             activity_seq = newrec_.activity_seq,
             project_id = newrec_.project_id,
             alternate_component_used = newrec_.alternate_component_used,
             rowversion = newrec_.rowversion
         WHERE proposal_no = newrec_.proposal_no;
   ELSE
      UPDATE shop_order_prop_tab
         SET proposal_no = newrec_.proposal_no,
             part_no = newrec_.part_no,
             contract = newrec_.contract,
             counter = newrec_.counter,
             org_counter = newrec_.org_counter,
             revised_due_date = newrec_.revised_due_date,
             org_due_date = newrec_.org_due_date,
             org_qty_due = newrec_.org_qty_due,
             period_no = newrec_.period_no,
             plan_order_rec = newrec_.plan_order_rec,
             prop_start_date = newrec_.prop_start_date,
             date_entered = newrec_.date_entered,
             source = newrec_.source,
             note_text = newrec_.note_text,
             shop_proposal_type = newrec_.shop_proposal_type,
             alternative_no = newrec_.alternative_no,
             header_req_no = newrec_.header_req_no,
             balance_id = newrec_.balance_id,
             eng_chg_level = newrec_.eng_chg_level,
             shrinkage_factor = newrec_.shrinkage_factor,
             process_type = newrec_.process_type,
             serial_begin = newrec_.serial_begin,
             serial_end = newrec_.serial_end,
             proposed_location = newrec_.proposed_location,
             condition_code = newrec_.condition_code,
             part_ownership = newrec_.part_ownership,
             owning_customer_no = newrec_.owning_customer_no,
             activity_seq = newrec_.activity_seq,
             project_id = newrec_.project_id,
             alternate_component_used = newrec_.alternate_component_used,
             rowversion = newrec_.rowversion
         WHERE &OBJID = objid_;
   END IF;
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;

-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION BASE METHODS FOR DELETE -----------------
-----------------------------------------------------------------------------
-- Check_Delete___
--    Checks whether a specific LU-record may be removed or not.
--    The procedure should check business rules like attribute values
--    as well as database constraints (defined or not).
--
-- Delete___
--    Deletion of the specific LU-object from the database.
-----------------------------------------------------------------------------

PROCEDURE Check_Delete___ (
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.proposal_no || '^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN &TABLE%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.proposal_no || '^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   DELETE
      FROM  &TABLE
      WHERE &OBJID = objid_;
END Delete___;

-----------------------------------------------------------------------------
-------------------- PRIVATE BASE METHODS -----------------------------------
-----------------------------------------------------------------------------
-- Lock__
--    Client-support to lock a specific instance of the logical unit.
--
-- New__
--    Client-support interface to create LU instances.
--       action_ = 'PREPARE'
--          Default values and handle of information to client.
--          The default values are set in procedure Prepare_Insert___.
--       action_ = 'CHECK'
--          Check all attributes before creating new object and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___.
--       action_ = 'DO'
--          Creation of new instances of the logical unit and handle of
--          information to client. The attribute list is unpacked, checked
--          and prepared (defaults) in procedure Unpack_Check_Insert___
--          before calling procedure Insert___.
--
-- Modify__
--    Client-support interface to modify attributes for LU instances.
--       action_ = 'CHECK'
--          Check all attributes before modifying an existing object and
--          handle of information to client. The attribute list is unpacked,
--          checked and prepared(defaults) in procedure Unpack_Check_Update___.
--       action_ = 'DO'
--          Modification of an existing instance of the logical unit. The
--          procedure unpacks the attributes, checks all values before
--          procedure Update___ is called.
--
-- Remove__
--    Client-support interface to remove LU instances.
--       action_ = 'CHECK'
--          Check whether a specific LU-instance may be removed or not.
--          The procedure fetches the complete record by calling procedure
--          Get_Object_By_Id___. Then the check is made by calling procedure
--          Check_Delete___.
--       action_ = 'DO'
--          Remove an existing instance of the logical unit. The procedure
--          fetches the complete LU-record, checks for a delete and then
--          deletes the record by calling procedure Delete___.
-----------------------------------------------------------------------------

PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Lock__');
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack_Check_Insert___(attr_, newrec_);
   ELSIF (action_ = 'DO') THEN
      Unpack_Check_Insert___(attr_, newrec_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_ &TABLE%ROWTYPE;
   newrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Modify__');
   IF (action_ = 'CHECK') THEN
      newrec_ := Get_Object_By_Id___(objid_);
      Unpack_Check_Update___(attr_, newrec_, objid_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack_Check_Update___(attr_, newrec_, objid_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;

-----------------------------------------------------------------------------
-------------------- PUBLIC BASE METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
-----------------------------------------------------------------------------

PROCEDURE Exist (
   proposal_no_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Exist', TRUE);
   IF (NOT Check_Exist___(proposal_no_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   END IF;
END Exist;

-----------------------------------------------------------------------------
-------------------- PUBLIC TRANSLATION METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Language_Refreshed
IS
BEGIN
   Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
END Language_Refreshed;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Do_Create_Shop_Order___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   NULL;
END Do_Create_Shop_Order___;


PROCEDURE Refresh_Connected_Objects___ (
   rec_  IN OUT &TABLE%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   NULL;
END Refresh_Connected_Objects___;


FUNCTION Do_Cancel_Shop_Order___ (
   rec_  IN     &TABLE%ROWTYPE ) RETURN BOOLEAN
IS
BEGIN
   RETURN FALSE;
END Do_Cancel_Shop_Order___;


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Cancel_Shop_Order__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Cancel_Shop_Order__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'CancelShopOrder', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Cancel_Shop_Order__;


PROCEDURE Create_Shop_Order__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   attr_       IN OUT VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ &TABLE%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Create_Shop_Order__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'CreateShopOrder', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Create_Shop_Order__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Part_No (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..part_no%TYPE;
   CURSOR get_attr IS
      SELECT part_no
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Part_No;


FUNCTION Get_Contract (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..contract%TYPE;
   CURSOR get_attr IS
      SELECT contract
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Contract;


FUNCTION Get_Revised_Due_Date (
   proposal_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ &TABLE..revised_due_date%TYPE;
   CURSOR get_attr IS
      SELECT revised_due_date
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Revised_Due_Date;


FUNCTION Get_Plan_Order_Rec (
   proposal_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ &TABLE..plan_order_rec%TYPE;
   CURSOR get_attr IS
      SELECT plan_order_rec
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Plan_Order_Rec;


FUNCTION Get_Prop_Start_Date (
   proposal_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ &TABLE..prop_start_date%TYPE;
   CURSOR get_attr IS
      SELECT prop_start_date
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Prop_Start_Date;


FUNCTION Get_Shop_Proposal_Type (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..shop_proposal_type%TYPE;
   CURSOR get_attr IS
      SELECT shop_proposal_type
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN Shop_Proposal_Type_API.Decode(temp_);
END Get_Shop_Proposal_Type;


FUNCTION Get_Condition_Code (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..condition_code%TYPE;
   CURSOR get_attr IS
      SELECT condition_code
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   --RETURN temp_;
END Get_Condition_Code;


FUNCTION Get_Part_Ownership (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..part_ownership%TYPE;
   CURSOR get_attr IS
      SELECT part_ownership
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN Part_Ownership_API.Decode(temp_);
END Get_Part_Ownership;


FUNCTION Get_Alternate_Component_Used (
   proposal_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ &TABLE..alternate_component_used%TYPE;
   CURSOR get_attr IS
      SELECT alternate_component_used
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN Fnd_Boolean_API.Decode(temp_);
END Get_Alternate_Component_Used;


FUNCTION Get (
   proposal_no_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
   CURSOR get_attr IS
      SELECT part_no, contract, revised_due_date, plan_order_rec, prop_start_date, shop_proposal_type, condition_code, part_ownership, alternate_component_used
      FROM &TABLE
      WHERE proposal_no = proposal_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
END Init;


BEGIN
   --
   -- Load the context with values
   --
   Init;
END &PKG;
/
SHOW ERROR


BEGIN
   SHOP_ORDER_PROP_API.Language_Refreshed;
END;
/

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE PKG
UNDEFINE OBJID
UNDEFINE OBJVERSION
UNDEFINE OBJSTATE
UNDEFINE OBJEVENTS
UNDEFINE STATE
-----------------------------------------------------------------------------